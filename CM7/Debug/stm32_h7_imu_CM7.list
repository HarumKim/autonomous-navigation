
stm32_h7_imu_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c62c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800c8d0  0800c8d0  0001c8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d37c  0800d37c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d384  0800d384  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  24000000  0800d38c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  24000208  0800d594  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240006c0  0800d594  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002193b  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343e  00000000  00000000  00041b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00044fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  00046b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d986  00000000  00000000  00048518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020918  00000000  00000000  00085e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00196068  00000000  00000000  000a67b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023c81e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087b0  00000000  00000000  0023c870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c8b4 	.word	0x0800c8b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0800c8b4 	.word	0x0800c8b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fc79 	bl	8004114 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fc70 	bl	8004114 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000234 	.word	0x24000234
 8000840:	24000238 	.word	0x24000238

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fc59 	bl	8004114 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fc50 	bl	8004114 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000234 	.word	0x24000234
 8000880:	2400023a 	.word	0x2400023a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f006 fa40 	bl	8006d2c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f006 fc2a 	bl	8007110 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400023c 	.word	0x2400023c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f006 fa15 	bl	8006d2c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f006 fc00 	bl	8007110 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400023c 	.word	0x2400023c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f006 f9eb 	bl	8006d2c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400023c 	.word	0x2400023c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f006 f9cb 	bl	8006d2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f006 f9c4 	bl	8006d2c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400023c 	.word	0x2400023c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f006 f99b 	bl	8006d2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f006 fb86 	bl	8007110 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400023c 	.word	0x2400023c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f009 f818 	bl	8009aa8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f002 fa5e 	bl	8002f58 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fad5 	bl	8001150 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fae5 	bl	8001184 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f9ab 	bl	8000f1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9e1 	bl	8000f90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fa24 	bl	800101c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f976 	bl	8000ec4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 faae 	bl	800113e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000bf0:	f000 fa3c 	bl	800106c <NRF24_powerDown>
	
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400023c 	.word	0x2400023c
 8000c08:	24000234 	.word	0x24000234
 8000c0c:	24000238 	.word	0x24000238
 8000c10:	2400023a 	.word	0x2400023a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000228 	.word	0x24000228

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa10 	bl	800108a <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}
	
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000228 	.word	0x24000228
 8000d40:	0800cf58 	.word	0x0800cf58
 8000d44:	0800cf60 	.word	0x0800cf60
 8000d48:	24000230 	.word	0x24000230

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000230 	.word	0x24000230

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000230 	.word	0x24000230

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0306 	orr.w	r3, r3, #6
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f991 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0306 	orr.w	r3, r3, #6
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 0303 	orr.w	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd0d 	bl	8000884 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd55 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fd02 	bl	8000884 <NRF24_read_register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e86:	f000 f963 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff fcfa 	bl	8000884 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f7ff fd42 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fcef 	bl	8000884 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f7ff fd37 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <NRF24_enableDynamicPayloads+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
	
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24000231 	.word	0x24000231

08000ec4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f7ff fcdb 	bl	8000884 <NRF24_read_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fd23 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f7ff fd1f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <NRF24_disableDynamicPayloads+0x2c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000231 	.word	0x24000231

08000ef4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f04:	213f      	movs	r1, #63	; 0x3f
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fd0c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f0c:	e003      	b.n	8000f16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd07 	bl	8000924 <NRF24_write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fcab 	bl	8000884 <NRF24_read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f023 0306 	bic.w	r3, r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d104      	bne.n	8000f4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0306 	orr.w	r3, r3, #6
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e019      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d104      	bne.n	8000f5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e011      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d103      	bne.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0306 	orr.w	r3, r3, #6
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fcce 	bl	8000924 <NRF24_write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fc70 	bl	8000884 <NRF24_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <NRF24_setDataRate+0x88>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00d      	b.n	8000fe8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	e002      	b.n	8000fe8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fc99 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f7ff fc46 	bl	8000884 <NRF24_read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e002      	b.n	800100e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_setDataRate+0x88>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000232 	.word	0x24000232

0800101c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fc2c 	bl	8000884 <NRF24_read_register>
 800102c:	4603      	mov	r3, r0
 800102e:	f023 030c 	bic.w	r3, r3, #12
 8001032:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e007      	b.n	800105a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc60 	bl	8000924 <NRF24_write_register>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc07 	bl	8000884 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc4f 	bl	8000924 <NRF24_write_register>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001092:	f7ff fcd1 	bl	8000a38 <NRF24_get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fc2b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010d8:	2120      	movs	r1, #32
 80010da:	2007      	movs	r0, #7
 80010dc:	f7ff fc22 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80010fe:	2320      	movs	r3, #32
 8001100:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001102:	7afa      	ldrb	r2, [r7, #11]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	4293      	cmp	r3, r2
 8001108:	bf28      	it	cs
 800110a:	4613      	movcs	r3, r2
 800110c:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fb78 	bl	8000804 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc1c 	bl	8000968 <NRF24_write_registerN>
  NRF24_csn(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fb67 	bl	8000804 <NRF24_csn>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001142:	2170      	movs	r1, #112	; 0x70
 8001144:	2007      	movs	r0, #7
 8001146:	f7ff fbed 	bl	8000924 <NRF24_write_register>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fb54 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800115c:	2350      	movs	r3, #80	; 0x50
 800115e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001160:	2373      	movs	r3, #115	; 0x73
 8001162:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2202      	movs	r2, #2
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <NRF24_ACTIVATE_cmd+0x30>)
 800116c:	f005 fdde 	bl	8006d2c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fb47 	bl	8000804 <NRF24_csn>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2400023c 	.word	0x2400023c

08001184 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b0a1      	sub	sp, #132	; 0x84
 8001188:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	49c3      	ldr	r1, [pc, #780]	; (800149c <printRadioSettings+0x318>)
 8001190:	4618      	mov	r0, r3
 8001192:	f009 f9a5 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8a0 	bl	80002e0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	230a      	movs	r3, #10
 80011aa:	48bd      	ldr	r0, [pc, #756]	; (80014a0 <printRadioSettings+0x31c>)
 80011ac:	f007 fb9c 	bl	80088e8 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fb67 	bl	8000884 <NRF24_read_register>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80011bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80011c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <printRadioSettings+0x5e>
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	49b2      	ldr	r1, [pc, #712]	; (80014a4 <printRadioSettings+0x320>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 f980 	bl	800a4e0 <siprintf>
 80011e0:	e00c      	b.n	80011fc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	49b0      	ldr	r1, [pc, #704]	; (80014a8 <printRadioSettings+0x324>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f009 f979 	bl	800a4e0 <siprintf>
 80011ee:	e005      	b.n	80011fc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49ad      	ldr	r1, [pc, #692]	; (80014ac <printRadioSettings+0x328>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f009 f972 	bl	800a4e0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f86d 	bl	80002e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <printRadioSettings+0x31c>)
 8001212:	f007 fb69 	bl	80088e8 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fb34 	bl	8000884 <NRF24_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfcc      	ite	gt
 800122e:	2301      	movgt	r3, #1
 8001230:	2300      	movle	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfcc      	ite	gt
 8001256:	2301      	movgt	r3, #1
 8001258:	2300      	movle	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfcc      	ite	gt
 800126a:	2301      	movgt	r3, #1
 800126c:	2300      	movle	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001276:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfcc      	ite	gt
 800127e:	2301      	movgt	r3, #1
 8001280:	2300      	movle	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfcc      	ite	gt
 8001292:	2301      	movgt	r3, #1
 8001294:	2300      	movle	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	9303      	str	r3, [sp, #12]
 800129e:	9402      	str	r4, [sp, #8]
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	4633      	mov	r3, r6
 80012a6:	462a      	mov	r2, r5
 80012a8:	4981      	ldr	r1, [pc, #516]	; (80014b0 <printRadioSettings+0x32c>)
 80012aa:	f009 f919 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f814 	bl	80002e0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	230a      	movs	r3, #10
 80012c2:	4877      	ldr	r0, [pc, #476]	; (80014a0 <printRadioSettings+0x31c>)
 80012c4:	f007 fb10 	bl	80088e8 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fadb 	bl	8000884 <NRF24_read_register>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfcc      	ite	gt
 80012f4:	2301      	movgt	r3, #1
 80012f6:	2300      	movle	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001300:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	bfcc      	ite	gt
 8001308:	2301      	movgt	r3, #1
 800130a:	2300      	movle	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001310:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001314:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfcc      	ite	gt
 800131c:	2301      	movgt	r3, #1
 800131e:	2300      	movle	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001328:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfcc      	ite	gt
 8001330:	2301      	movgt	r3, #1
 8001332:	2300      	movle	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f107 0008 	add.w	r0, r7, #8
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	9402      	str	r4, [sp, #8]
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	4633      	mov	r3, r6
 8001358:	462a      	mov	r2, r5
 800135a:	4956      	ldr	r1, [pc, #344]	; (80014b4 <printRadioSettings+0x330>)
 800135c:	f009 f8c0 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffbb 	bl	80002e0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	230a      	movs	r3, #10
 8001374:	484a      	ldr	r0, [pc, #296]	; (80014a0 <printRadioSettings+0x31c>)
 8001376:	f007 fab7 	bl	80088e8 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fa82 	bl	8000884 <NRF24_read_register>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	3302      	adds	r3, #2
 8001390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001394:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4946      	ldr	r1, [pc, #280]	; (80014b8 <printRadioSettings+0x334>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f009 f89e 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	230a      	movs	r3, #10
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <printRadioSettings+0x31c>)
 80013ba:	f007 fa95 	bl	80088e8 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80013be:	2005      	movs	r0, #5
 80013c0:	f7ff fa60 	bl	8000884 <NRF24_read_register>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80013ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <printRadioSettings+0x338>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 f881 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff7c 	bl	80002e0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f107 0108 	add.w	r1, r7, #8
 80013f0:	230a      	movs	r3, #10
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <printRadioSettings+0x31c>)
 80013f4:	f007 fa78 	bl	80088e8 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80013f8:	2006      	movs	r0, #6
 80013fa:	f7ff fa43 	bl	8000884 <NRF24_read_register>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <printRadioSettings+0x29a>
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	492a      	ldr	r1, [pc, #168]	; (80014c0 <printRadioSettings+0x33c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f009 f862 	bl	800a4e0 <siprintf>
 800141c:	e005      	b.n	800142a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4928      	ldr	r1, [pc, #160]	; (80014c4 <printRadioSettings+0x340>)
 8001424:	4618      	mov	r0, r3
 8001426:	f009 f85b 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ff56 	bl	80002e0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0108 	add.w	r1, r7, #8
 800143c:	230a      	movs	r3, #10
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <printRadioSettings+0x31c>)
 8001440:	f007 fa52 	bl	80088e8 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001448:	f003 0306 	and.w	r3, r3, #6
 800144c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <printRadioSettings+0x2ec>
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4918      	ldr	r1, [pc, #96]	; (80014c8 <printRadioSettings+0x344>)
 8001468:	4618      	mov	r0, r3
 800146a:	f009 f839 	bl	800a4e0 <siprintf>
 800146e:	e03b      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <printRadioSettings+0x302>
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <printRadioSettings+0x348>)
 800147e:	4618      	mov	r0, r3
 8001480:	f009 f82e 	bl	800a4e0 <siprintf>
 8001484:	e030      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	2b02      	cmp	r3, #2
 800148c:	d122      	bne.n	80014d4 <printRadioSettings+0x350>
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <printRadioSettings+0x34c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f009 f823 	bl	800a4e0 <siprintf>
 800149a:	e025      	b.n	80014e8 <printRadioSettings+0x364>
 800149c:	0800c8d0 	.word	0x0800c8d0
 80014a0:	240002c4 	.word	0x240002c4
 80014a4:	0800c904 	.word	0x0800c904
 80014a8:	0800c920 	.word	0x0800c920
 80014ac:	0800c93c 	.word	0x0800c93c
 80014b0:	0800c950 	.word	0x0800c950
 80014b4:	0800c994 	.word	0x0800c994
 80014b8:	0800c9e0 	.word	0x0800c9e0
 80014bc:	0800c9fc 	.word	0x0800c9fc
 80014c0:	0800ca10 	.word	0x0800ca10
 80014c4:	0800ca28 	.word	0x0800ca28
 80014c8:	0800ca40 	.word	0x0800ca40
 80014cc:	0800ca54 	.word	0x0800ca54
 80014d0:	0800ca68 	.word	0x0800ca68
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80014d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d105      	bne.n	80014e8 <printRadioSettings+0x364>
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	49d7      	ldr	r1, [pc, #860]	; (8001840 <printRadioSettings+0x6bc>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 fffc 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fef7 	bl	80002e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	230a      	movs	r3, #10
 80014fc:	48d1      	ldr	r0, [pc, #836]	; (8001844 <printRadioSettings+0x6c0>)
 80014fe:	f007 f9f3 	bl	80088e8 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001502:	463b      	mov	r3, r7
 8001504:	2205      	movs	r2, #5
 8001506:	4619      	mov	r1, r3
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff f9e3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	461c      	mov	r4, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	461d      	mov	r5, r3
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	787a      	ldrb	r2, [r7, #1]
 800151a:	7839      	ldrb	r1, [r7, #0]
 800151c:	f107 0008 	add.w	r0, r7, #8
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	49c7      	ldr	r1, [pc, #796]	; (8001848 <printRadioSettings+0x6c4>)
 800152c:	f008 ffd8 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed3 	bl	80002e0 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	230a      	movs	r3, #10
 8001544:	48bf      	ldr	r0, [pc, #764]	; (8001844 <printRadioSettings+0x6c0>)
 8001546:	f007 f9cf 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800154a:	463b      	mov	r3, r7
 800154c:	2205      	movs	r2, #5
 800154e:	4619      	mov	r1, r3
 8001550:	200b      	movs	r0, #11
 8001552:	f7ff f9bf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	461d      	mov	r5, r3
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	787a      	ldrb	r2, [r7, #1]
 8001562:	7839      	ldrb	r1, [r7, #0]
 8001564:	f107 0008 	add.w	r0, r7, #8
 8001568:	9102      	str	r1, [sp, #8]
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	462b      	mov	r3, r5
 8001570:	4622      	mov	r2, r4
 8001572:	49b6      	ldr	r1, [pc, #728]	; (800184c <printRadioSettings+0x6c8>)
 8001574:	f008 ffb4 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feaf 	bl	80002e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	230a      	movs	r3, #10
 800158c:	48ad      	ldr	r0, [pc, #692]	; (8001844 <printRadioSettings+0x6c0>)
 800158e:	f007 f9ab 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001592:	463b      	mov	r3, r7
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	200c      	movs	r0, #12
 800159a:	f7ff f99b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	49aa      	ldr	r1, [pc, #680]	; (8001850 <printRadioSettings+0x6cc>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 ff99 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe94 	bl	80002e0 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	230a      	movs	r3, #10
 80015c2:	48a0      	ldr	r0, [pc, #640]	; (8001844 <printRadioSettings+0x6c0>)
 80015c4:	f007 f990 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80015c8:	463b      	mov	r3, r7
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	200d      	movs	r0, #13
 80015d0:	f7ff f980 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	499d      	ldr	r1, [pc, #628]	; (8001854 <printRadioSettings+0x6d0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 ff7e 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fe79 	bl	80002e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	230a      	movs	r3, #10
 80015f8:	4892      	ldr	r0, [pc, #584]	; (8001844 <printRadioSettings+0x6c0>)
 80015fa:	f007 f975 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80015fe:	463b      	mov	r3, r7
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	200e      	movs	r0, #14
 8001606:	f7ff f965 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800160a:	783b      	ldrb	r3, [r7, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4991      	ldr	r1, [pc, #580]	; (8001858 <printRadioSettings+0x6d4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f008 ff63 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe5e 	bl	80002e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	4885      	ldr	r0, [pc, #532]	; (8001844 <printRadioSettings+0x6c0>)
 8001630:	f007 f95a 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff f94a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001640:	783b      	ldrb	r3, [r7, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4984      	ldr	r1, [pc, #528]	; (800185c <printRadioSettings+0x6d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f008 ff48 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe43 	bl	80002e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	230a      	movs	r3, #10
 8001664:	4877      	ldr	r0, [pc, #476]	; (8001844 <printRadioSettings+0x6c0>)
 8001666:	f007 f93f 	bl	80088e8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800166a:	463b      	mov	r3, r7
 800166c:	2205      	movs	r2, #5
 800166e:	4619      	mov	r1, r3
 8001670:	2010      	movs	r0, #16
 8001672:	f7ff f92f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	461c      	mov	r4, r3
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	461d      	mov	r5, r3
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	787a      	ldrb	r2, [r7, #1]
 8001682:	7839      	ldrb	r1, [r7, #0]
 8001684:	f107 0008 	add.w	r0, r7, #8
 8001688:	9102      	str	r1, [sp, #8]
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	462b      	mov	r3, r5
 8001690:	4622      	mov	r2, r4
 8001692:	4973      	ldr	r1, [pc, #460]	; (8001860 <printRadioSettings+0x6dc>)
 8001694:	f008 ff24 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fe1f 	bl	80002e0 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	230a      	movs	r3, #10
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <printRadioSettings+0x6c0>)
 80016ae:	f007 f91b 	bl	80088e8 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80016b2:	2011      	movs	r0, #17
 80016b4:	f7ff f8e6 	bl	8000884 <NRF24_read_register>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4966      	ldr	r1, [pc, #408]	; (8001864 <printRadioSettings+0x6e0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f008 ff07 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 0108 	add.w	r1, r7, #8
 80016e4:	230a      	movs	r3, #10
 80016e6:	4857      	ldr	r0, [pc, #348]	; (8001844 <printRadioSettings+0x6c0>)
 80016e8:	f007 f8fe 	bl	80088e8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f7ff f8c9 	bl	8000884 <NRF24_read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4958      	ldr	r1, [pc, #352]	; (8001868 <printRadioSettings+0x6e4>)
 8001706:	4618      	mov	r0, r3
 8001708:	f008 feea 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fde5 	bl	80002e0 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	f107 0108 	add.w	r1, r7, #8
 800171e:	230a      	movs	r3, #10
 8001720:	4848      	ldr	r0, [pc, #288]	; (8001844 <printRadioSettings+0x6c0>)
 8001722:	f007 f8e1 	bl	80088e8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001726:	2013      	movs	r0, #19
 8001728:	f7ff f8ac 	bl	8000884 <NRF24_read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001732:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <printRadioSettings+0x6e8>)
 8001740:	4618      	mov	r0, r3
 8001742:	f008 fecd 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdc8 	bl	80002e0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	230a      	movs	r3, #10
 800175a:	483a      	ldr	r0, [pc, #232]	; (8001844 <printRadioSettings+0x6c0>)
 800175c:	f007 f8c4 	bl	80088e8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001760:	2014      	movs	r0, #20
 8001762:	f7ff f88f 	bl	8000884 <NRF24_read_register>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <printRadioSettings+0x6ec>)
 800177a:	4618      	mov	r0, r3
 800177c:	f008 feb0 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdab 	bl	80002e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	482b      	ldr	r0, [pc, #172]	; (8001844 <printRadioSettings+0x6c0>)
 8001796:	f007 f8a7 	bl	80088e8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800179a:	2015      	movs	r0, #21
 800179c:	f7ff f872 	bl	8000884 <NRF24_read_register>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4930      	ldr	r1, [pc, #192]	; (8001874 <printRadioSettings+0x6f0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 fe93 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd8e 	bl	80002e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <printRadioSettings+0x6c0>)
 80017d0:	f007 f88a 	bl	80088e8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80017d4:	2016      	movs	r0, #22
 80017d6:	f7ff f855 	bl	8000884 <NRF24_read_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4922      	ldr	r1, [pc, #136]	; (8001878 <printRadioSettings+0x6f4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 fe76 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd71 	bl	80002e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <printRadioSettings+0x6c0>)
 800180a:	f007 f86d 	bl	80088e8 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800180e:	201c      	movs	r0, #28
 8001810:	f7ff f838 	bl	8000884 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfcc      	ite	gt
 8001826:	2301      	movgt	r3, #1
 8001828:	2300      	movle	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001832:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfcc      	ite	gt
 800183a:	2301      	movgt	r3, #1
 800183c:	2300      	movle	r3, #0
 800183e:	e01d      	b.n	800187c <printRadioSettings+0x6f8>
 8001840:	0800ca7c 	.word	0x0800ca7c
 8001844:	240002c4 	.word	0x240002c4
 8001848:	0800ca90 	.word	0x0800ca90
 800184c:	0800cac0 	.word	0x0800cac0
 8001850:	0800caf0 	.word	0x0800caf0
 8001854:	0800cb18 	.word	0x0800cb18
 8001858:	0800cb40 	.word	0x0800cb40
 800185c:	0800cb68 	.word	0x0800cb68
 8001860:	0800cb90 	.word	0x0800cb90
 8001864:	0800cbbc 	.word	0x0800cbbc
 8001868:	0800cbd8 	.word	0x0800cbd8
 800186c:	0800cbf4 	.word	0x0800cbf4
 8001870:	0800cc10 	.word	0x0800cc10
 8001874:	0800cc2c 	.word	0x0800cc2c
 8001878:	0800cc48 	.word	0x0800cc48
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfcc      	ite	gt
 800188c:	2301      	movgt	r3, #1
 800188e:	2300      	movle	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001894:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001898:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800189c:	2b00      	cmp	r3, #0
 800189e:	bfcc      	ite	gt
 80018a0:	2301      	movgt	r3, #1
 80018a2:	2300      	movle	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bfcc      	ite	gt
 80018b4:	2301      	movgt	r3, #1
 80018b6:	2300      	movle	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bfcc      	ite	gt
 80018c8:	2301      	movgt	r3, #1
 80018ca:	2300      	movle	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f107 0008 	add.w	r0, r7, #8
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9402      	str	r4, [sp, #8]
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	462a      	mov	r2, r5
 80018de:	4936      	ldr	r1, [pc, #216]	; (80019b8 <printRadioSettings+0x834>)
 80018e0:	f008 fdfe 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcf9 	bl	80002e0 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	230a      	movs	r3, #10
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <printRadioSettings+0x838>)
 80018fa:	f006 fff5 	bl	80088e8 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80018fe:	201d      	movs	r0, #29
 8001900:	f7fe ffc0 	bl	8000884 <NRF24_read_register>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800190a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <printRadioSettings+0x7a0>
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4929      	ldr	r1, [pc, #164]	; (80019c0 <printRadioSettings+0x83c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f008 fddf 	bl	800a4e0 <siprintf>
 8001922:	e005      	b.n	8001930 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4926      	ldr	r1, [pc, #152]	; (80019c4 <printRadioSettings+0x840>)
 800192a:	4618      	mov	r0, r3
 800192c:	f008 fdd8 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fcd3 	bl	80002e0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0108 	add.w	r1, r7, #8
 8001942:	230a      	movs	r3, #10
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <printRadioSettings+0x838>)
 8001946:	f006 ffcf 	bl	80088e8 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800194a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <printRadioSettings+0x7e0>
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <printRadioSettings+0x844>)
 800195c:	4618      	mov	r0, r3
 800195e:	f008 fdbf 	bl	800a4e0 <siprintf>
 8001962:	e005      	b.n	8001970 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <printRadioSettings+0x848>)
 800196a:	4618      	mov	r0, r3
 800196c:	f008 fdb8 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <printRadioSettings+0x838>)
 8001986:	f006 ffaf 	bl	80088e8 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <printRadioSettings+0x84c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f008 fda5 	bl	800a4e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fca0 	bl	80002e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0108 	add.w	r1, r7, #8
 80019a8:	230a      	movs	r3, #10
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <printRadioSettings+0x838>)
 80019ac:	f006 ff9c 	bl	80088e8 <HAL_UART_Transmit>
}
 80019b0:	bf00      	nop
 80019b2:	3774      	adds	r7, #116	; 0x74
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	0800cc64 	.word	0x0800cc64
 80019bc:	240002c4 	.word	0x240002c4
 80019c0:	0800ccb0 	.word	0x0800ccb0
 80019c4:	0800ccc8 	.word	0x0800ccc8
 80019c8:	0800cce0 	.word	0x0800cce0
 80019cc:	0800ccfc 	.word	0x0800ccfc
 80019d0:	0800c8d0 	.word	0x0800c8d0

080019d4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019d4:	b084      	sub	sp, #16
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f107 0c08 	add.w	ip, r7, #8
 80019de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <nrf24_DebugUART_Init+0x2c>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2290      	movs	r2, #144	; 0x90
 80019ec:	4619      	mov	r1, r3
 80019ee:	f008 f85b 	bl	8009aa8 <memcpy>
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fa:	b004      	add	sp, #16
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	240002c4 	.word	0x240002c4

08001a04 <readNRF>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void readNRF(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af02      	add	r7, sp, #8
	if(NRF24_available()) {
 8001a0a:	f7ff f929 	bl	8000c60 <NRF24_available>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d053      	beq.n	8001abc <readNRF+0xb8>
		NRF24_read(buffer, 6);
 8001a14:	2106      	movs	r1, #6
 8001a16:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <readNRF+0xc0>)
 8001a18:	f7ff f92a 	bl	8000c70 <NRF24_read>
	    if(buffer[0] == 0xFF && buffer[1] == 0xFF) {
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <readNRF+0xc0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d109      	bne.n	8001a38 <readNRF+0x34>
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <readNRF+0xc0>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	2bff      	cmp	r3, #255	; 0xff
 8001a2a:	d105      	bne.n	8001a38 <readNRF+0x34>
	    	snprintf(myRxData, 32, "Coordinates not found\r\n");
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <readNRF+0xc4>)
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4826      	ldr	r0, [pc, #152]	; (8001acc <readNRF+0xc8>)
 8001a32:	f008 fd21 	bl	800a478 <sniprintf>
 8001a36:	e032      	b.n	8001a9e <readNRF+0x9a>
	    }
	    else {
	    	snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <readNRF+0xc0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <readNRF+0xc0>)
 8001a40:	7852      	ldrb	r2, [r2, #1]
 8001a42:	ea43 0102 	orr.w	r1, r3, r2
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <readNRF+0xc0>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <readNRF+0xc0>)
 8001a4e:	78d2      	ldrb	r2, [r2, #3]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <readNRF+0xc0>)
 8001a54:	7912      	ldrb	r2, [r2, #4]
 8001a56:	0212      	lsls	r2, r2, #8
 8001a58:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <readNRF+0xc0>)
 8001a5a:	7940      	ldrb	r0, [r0, #5]
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	460b      	mov	r3, r1
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <readNRF+0xcc>)
 8001a66:	2120      	movs	r1, #32
 8001a68:	4818      	ldr	r0, [pc, #96]	; (8001acc <readNRF+0xc8>)
 8001a6a:	f008 fd05 	bl	800a478 <sniprintf>

	    	coordY = (buffer[2]<<8|buffer[3]);
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <readNRF+0xc0>)
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <readNRF+0xc0>)
 8001a78:	78db      	ldrb	r3, [r3, #3]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <readNRF+0xd0>)
 8001a84:	801a      	strh	r2, [r3, #0]
	    	coordX = (buffer[0]<<8|buffer[1]);
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <readNRF+0xc0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <readNRF+0xc0>)
 8001a90:	785b      	ldrb	r3, [r3, #1]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <readNRF+0xd4>)
 8001a9c:	801a      	strh	r2, [r3, #0]
	    }
	    NRF24_writeAckPayload(1, myAckPayload, 32);
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <readNRF+0xd8>)
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff fb21 	bl	80010ea <NRF24_writeAckPayload>
	    HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <readNRF+0xc8>)
 8001aaa:	f7fe fc19 	bl	80002e0 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	4905      	ldr	r1, [pc, #20]	; (8001acc <readNRF+0xc8>)
 8001ab6:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <readNRF+0xdc>)
 8001ab8:	f006 ff16 	bl	80088e8 <HAL_UART_Transmit>
	}
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	240006a0 	.word	0x240006a0
 8001ac8:	0800ce14 	.word	0x0800ce14
 8001acc:	2400066c 	.word	0x2400066c
 8001ad0:	0800ce2c 	.word	0x0800ce2c
 8001ad4:	24000664 	.word	0x24000664
 8001ad8:	24000666 	.word	0x24000666
 8001adc:	24000010 	.word	0x24000010
 8001ae0:	24000560 	.word	0x24000560

08001ae4 <moveForward>:

void moveForward( void ){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1750);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <moveForward+0x2c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(100); // Pausa tras el movimiento
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	f001 fa30 	bl	8002f58 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <moveForward+0x2c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(100);
 8001b02:	2064      	movs	r0, #100	; 0x64
 8001b04:	f001 fa28 	bl	8002f58 <HAL_Delay>
    readNRF();
 8001b08:	f7ff ff7c 	bl	8001a04 <readNRF>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	240004c8 	.word	0x240004c8

08001b14 <ProcessCANMessage>:


/**
 * @brief Procesa los mensajes recibidos por el protocolo CAN
 */
void ProcessCANMessage() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <ProcessCANMessage+0xb4>)
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	482a      	ldr	r0, [pc, #168]	; (8001bcc <ProcessCANMessage+0xb8>)
 8001b22:	f001 fdd9 	bl	80036d8 <HAL_FDCAN_GetRxMessage>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d146      	bne.n	8001bba <ProcessCANMessage+0xa6>
        printf("\n\rSTM32 - Mensaje CAN recibido:\n\r");
 8001b2c:	4828      	ldr	r0, [pc, #160]	; (8001bd0 <ProcessCANMessage+0xbc>)
 8001b2e:	f008 fc15 	bl	800a35c <iprintf>
        printf("ID: 0x%lx, Longitud: %ld bytes\n\r", RxHeader.Identifier, RxHeader.DataLength >> 16);
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <ProcessCANMessage+0xb4>)
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <ProcessCANMessage+0xb4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <ProcessCANMessage+0xc0>)
 8001b40:	f008 fc0c 	bl	800a35c <iprintf>
        printf("Datos: ");
 8001b44:	4824      	ldr	r0, [pc, #144]	; (8001bd8 <ProcessCANMessage+0xc4>)
 8001b46:	f008 fc09 	bl	800a35c <iprintf>

        if (RxHeader.Identifier == 0x100) {
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <ProcessCANMessage+0xb4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b52:	d102      	bne.n	8001b5a <ProcessCANMessage+0x46>
            printf("\n\rMensaje recibido de Arduino: ");
 8001b54:	4821      	ldr	r0, [pc, #132]	; (8001bdc <ProcessCANMessage+0xc8>)
 8001b56:	f008 fc01 	bl	800a35c <iprintf>
        }
        for (uint8_t i = 0; i < 8; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e009      	b.n	8001b74 <ProcessCANMessage+0x60>
            printf("%02X ", RxData[i]);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	4619      	mov	r1, r3
 8001b68:	481d      	ldr	r0, [pc, #116]	; (8001be0 <ProcessCANMessage+0xcc>)
 8001b6a:	f008 fbf7 	bl	800a35c <iprintf>
        for (uint8_t i = 0; i < 8; i++) {
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	3301      	adds	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	d9f2      	bls.n	8001b60 <ProcessCANMessage+0x4c>
		union {
			float valueFloat;
			uint8_t valueInt[4];
		} conversion;

		conversion.valueInt[0] = RxData[0];
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	703b      	strb	r3, [r7, #0]
		conversion.valueInt[1] = RxData[1];
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	707b      	strb	r3, [r7, #1]
		conversion.valueInt[2] = RxData[2];
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	70bb      	strb	r3, [r7, #2]
		conversion.valueInt[3] = RxData[3];
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <ProcessCANMessage+0xb0>)
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	70fb      	strb	r3, [r7, #3]

		vueltas = conversion.valueFloat;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <ProcessCANMessage+0xd0>)
 8001b96:	6013      	str	r3, [r2, #0]

        printf("\n\rSTM32 - Mensaje recibido correctamente.\n\r");
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <ProcessCANMessage+0xd4>)
 8001b9a:	f008 fbdf 	bl	800a35c <iprintf>

        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Indicar recepción
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4812      	ldr	r0, [pc, #72]	; (8001bec <ProcessCANMessage+0xd8>)
 8001ba2:	f002 fad0 	bl	8004146 <HAL_GPIO_TogglePin>
        printf("Vueltas: %.4f\n\r", vueltas);
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <ProcessCANMessage+0xd0>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb0:	ec53 2b17 	vmov	r2, r3, d7
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <ProcessCANMessage+0xdc>)
 8001bb6:	f008 fbd1 	bl	800a35c <iprintf>
    } else {
        //printf("Esperando mensajes CAN...\n\r");
    }
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2400065c 	.word	0x2400065c
 8001bc8:	24000634 	.word	0x24000634
 8001bcc:	24000354 	.word	0x24000354
 8001bd0:	0800ce38 	.word	0x0800ce38
 8001bd4:	0800ce5c 	.word	0x0800ce5c
 8001bd8:	0800ce80 	.word	0x0800ce80
 8001bdc:	0800ce88 	.word	0x0800ce88
 8001be0:	0800cea8 	.word	0x0800cea8
 8001be4:	24000668 	.word	0x24000668
 8001be8:	0800ceb0 	.word	0x0800ceb0
 8001bec:	58020400 	.word	0x58020400
 8001bf0:	0800cedc 	.word	0x0800cedc

08001bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b0a7      	sub	sp, #156	; 0x9c
 8001bf8:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c00:	bf00      	nop
 8001c02:	4bac      	ldr	r3, [pc, #688]	; (8001eb4 <main+0x2c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <main+0x24>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dcf4      	bgt.n	8001c02 <main+0xe>
  if ( timeout < 0 )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da01      	bge.n	8001c22 <main+0x2e>
  {
  Error_Handler();
 8001c1e:	f000 fd51 	bl	80026c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c22:	f001 f907 	bl	8002e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c26:	f000 f95d 	bl	8001ee4 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001c2a:	4ba2      	ldr	r3, [pc, #648]	; (8001eb4 <main+0x2c0>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	4aa0      	ldr	r2, [pc, #640]	; (8001eb4 <main+0x2c0>)
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3a:	4b9e      	ldr	r3, [pc, #632]	; (8001eb4 <main+0x2c0>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f002 fa97 	bl	800417c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2000      	movs	r0, #0
 8001c52:	f002 faad 	bl	80041b0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5a:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001c5c:	bf00      	nop
 8001c5e:	4b95      	ldr	r3, [pc, #596]	; (8001eb4 <main+0x2c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d104      	bne.n	8001c74 <main+0x80>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dcf4      	bgt.n	8001c5e <main+0x6a>
	if ( timeout < 0 )
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da01      	bge.n	8001c7e <main+0x8a>
	{
	Error_Handler();
 8001c7a:	f000 fd23 	bl	80026c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001c7e:	f000 fc43 	bl	8002508 <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 8001c82:	f000 fbf5 	bl	8002470 <MX_USART3_UART_Init>
	  MX_I2C4_Init();
 8001c86:	f000 fa69 	bl	800215c <MX_I2C4_Init>
	  MX_SPI5_Init();
 8001c8a:	f000 faa7 	bl	80021dc <MX_SPI5_Init>
	  MX_FDCAN1_Init();
 8001c8e:	f000 f9b1 	bl	8001ff4 <MX_FDCAN1_Init>
	  MX_TIM16_Init();
 8001c92:	f000 faf9 	bl	8002288 <MX_TIM16_Init>
	  MX_TIM17_Init();
 8001c96:	f000 fb71 	bl	800237c <MX_TIM17_Init>
	  /* USER CODE BEGIN 2 */

		NRF24_begin(GPIOC, CSN_Pin, CE_Pin, hspi5);
 8001c9a:	4c87      	ldr	r4, [pc, #540]	; (8001eb8 <main+0x2c4>)
 8001c9c:	4668      	mov	r0, sp
 8001c9e:	1d23      	adds	r3, r4, #4
 8001ca0:	2284      	movs	r2, #132	; 0x84
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f007 ff00 	bl	8009aa8 <memcpy>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	4883      	ldr	r0, [pc, #524]	; (8001ebc <main+0x2c8>)
 8001cb0:	f7fe fed0 	bl	8000a54 <NRF24_begin>
		nrf24_DebugUART_Init(huart3);
 8001cb4:	4c82      	ldr	r4, [pc, #520]	; (8001ec0 <main+0x2cc>)
 8001cb6:	4668      	mov	r0, sp
 8001cb8:	f104 0310 	add.w	r3, r4, #16
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f007 fef2 	bl	8009aa8 <memcpy>
 8001cc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cc8:	f7ff fe84 	bl	80019d4 <nrf24_DebugUART_Init>

		NRF24_openReadingPipe(1, RxpipeAddrs);
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <main+0x2d0>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7fe ffec 	bl	8000cb0 <NRF24_openReadingPipe>
		NRF24_setAutoAck(false);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff f90b 	bl	8000ef4 <NRF24_setAutoAck>
		NRF24_setChannel(52);
 8001cde:	2034      	movs	r0, #52	; 0x34
 8001ce0:	f7ff f84f 	bl	8000d82 <NRF24_setChannel>
		NRF24_setPayloadSize(32);
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	f7ff f861 	bl	8000dac <NRF24_setPayloadSize>
		NRF24_setDataRate(RF24_2MBPS);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff f950 	bl	8000f90 <NRF24_setDataRate>

		NRF24_enableDynamicPayloads();
 8001cf0:	f7ff f8b6 	bl	8000e60 <NRF24_enableDynamicPayloads>
		NRF24_enableAckPayload();
 8001cf4:	f7ff f886 	bl	8000e04 <NRF24_enableAckPayload>
		printRadioSettings();
 8001cf8:	f7ff fa44 	bl	8001184 <printRadioSettings>
		NRF24_startListening();
 8001cfc:	f7fe ff8a 	bl	8000c14 <NRF24_startListening>
		printf("Starting NRF24\r\n");
 8001d00:	4871      	ldr	r0, [pc, #452]	; (8001ec8 <main+0x2d4>)
 8001d02:	f008 fbb1 	bl	800a468 <puts>
		HAL_Delay(1000);
 8001d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0a:	f001 f925 	bl	8002f58 <HAL_Delay>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */

	  /* Configuración inicial del motor */
	  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	486e      	ldr	r0, [pc, #440]	; (8001ecc <main+0x2d8>)
 8001d12:	f005 ff63 	bl	8007bdc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001d16:	2100      	movs	r1, #0
 8001d18:	486d      	ldr	r0, [pc, #436]	; (8001ed0 <main+0x2dc>)
 8001d1a:	f005 ff5f 	bl	8007bdc <HAL_TIM_PWM_Start>

	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);  // Posición inicial
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	; (8001ed0 <main+0x2dc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
	  Turning_SetAngle(-62);	//Angulo Inicial
 8001d28:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001ed4 <main+0x2e0>
 8001d2c:	f000 fc90 	bl	8002650 <Turning_SetAngle>
	  HAL_Delay(1000);
 8001d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d34:	f001 f910 	bl	8002f58 <HAL_Delay>

  	  //readNRF();
  	  int waypoint = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  	  int flagDone = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]

  	while (1) {

  		ProcessCANMessage();
 8001d40:	f7ff fee8 	bl	8001b14 <ProcessCANMessage>

  	    // Mover a la siguiente posición en función de las coordenadas
  	    if (coordX < 50 && coordY < 50 && waypoint == 0) {
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <main+0x2e4>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b31      	cmp	r3, #49	; 0x31
 8001d4a:	d809      	bhi.n	8001d60 <main+0x16c>
 8001d4c:	4b63      	ldr	r3, [pc, #396]	; (8001edc <main+0x2e8>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b31      	cmp	r3, #49	; 0x31
 8001d52:	d805      	bhi.n	8001d60 <main+0x16c>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <main+0x16c>
  	        moveForward();  // Mover adelante
 8001d5a:	f7ff fec3 	bl	8001ae4 <moveForward>
 8001d5e:	e0a7      	b.n	8001eb0 <main+0x2bc>
  	    }
  	    else if (coordX < 50 && coordY > 50 && waypoint == 0){
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <main+0x2e4>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	2b31      	cmp	r3, #49	; 0x31
 8001d66:	d831      	bhi.n	8001dcc <main+0x1d8>
 8001d68:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <main+0x2e8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b32      	cmp	r3, #50	; 0x32
 8001d6e:	d92d      	bls.n	8001dcc <main+0x1d8>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12a      	bne.n	8001dcc <main+0x1d8>
  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d7c:	4858      	ldr	r0, [pc, #352]	; (8001ee0 <main+0x2ec>)
 8001d7e:	f002 f9c9 	bl	8004114 <HAL_GPIO_WritePin>
  	    	HAL_Delay(500);
 8001d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d86:	f001 f8e7 	bl	8002f58 <HAL_Delay>
  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d90:	4853      	ldr	r0, [pc, #332]	; (8001ee0 <main+0x2ec>)
 8001d92:	f002 f9bf 	bl	8004114 <HAL_GPIO_WritePin>
  	    	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <main+0x2dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
  	    	Turning_SetAngle(5);
 8001da0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001da4:	f000 fc54 	bl	8002650 <Turning_SetAngle>
  	    	HAL_Delay(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dac:	f001 f8d4 	bl	8002f58 <HAL_Delay>
  	    	waypoint = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]

  	    	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1900);
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <main+0x2dc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f240 726c 	movw	r2, #1900	; 0x76c
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
  	    	HAL_Delay(500);
 8001dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc2:	f001 f8c9 	bl	8002f58 <HAL_Delay>
  	    	readNRF();
 8001dc6:	f7ff fe1d 	bl	8001a04 <readNRF>
 8001dca:	e071      	b.n	8001eb0 <main+0x2bc>
  	    }
  	    else if (coordX < 85 && coordY > 65 && waypoint == 1){
 8001dcc:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <main+0x2e4>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b54      	cmp	r3, #84	; 0x54
 8001dd2:	d81b      	bhi.n	8001e0c <main+0x218>
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <main+0x2e8>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	2b41      	cmp	r3, #65	; 0x41
 8001dda:	d917      	bls.n	8001e0c <main+0x218>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d114      	bne.n	8001e0c <main+0x218>
  	    	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1900);
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <main+0x2dc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f240 726c 	movw	r2, #1900	; 0x76c
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
  	    	HAL_Delay(1000);
 8001dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001df0:	f001 f8b2 	bl	8002f58 <HAL_Delay>
  	        __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <main+0x2dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
  	      	HAL_Delay(500);
 8001dfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e02:	f001 f8a9 	bl	8002f58 <HAL_Delay>
  	    	readNRF();
 8001e06:	f7ff fdfd 	bl	8001a04 <readNRF>
 8001e0a:	e051      	b.n	8001eb0 <main+0x2bc>
  	    }
  	    else if(coordX > 85 && coordY > 65 && waypoint == 1){
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <main+0x2e4>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	2b55      	cmp	r3, #85	; 0x55
 8001e12:	d926      	bls.n	8001e62 <main+0x26e>
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <main+0x2e8>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b41      	cmp	r3, #65	; 0x41
 8001e1a:	d922      	bls.n	8001e62 <main+0x26e>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d11f      	bne.n	8001e62 <main+0x26e>
  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e28:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0x2ec>)
 8001e2a:	f002 f973 	bl	8004114 <HAL_GPIO_WritePin>
  	    	HAL_Delay(500);
 8001e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e32:	f001 f891 	bl	8002f58 <HAL_Delay>
  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3c:	4828      	ldr	r0, [pc, #160]	; (8001ee0 <main+0x2ec>)
 8001e3e:	f002 f969 	bl	8004114 <HAL_GPIO_WritePin>
  	    	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <main+0x2dc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
  	    	Turning_SetAngle(-62);
 8001e4c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001ed4 <main+0x2e0>
 8001e50:	f000 fbfe 	bl	8002650 <Turning_SetAngle>
  	    	HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	f001 f87e 	bl	8002f58 <HAL_Delay>
  	    	waypoint = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	e026      	b.n	8001eb0 <main+0x2bc>
  	    }
  	    else {
  	    	if (coordY > 50){
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <main+0x2e8>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b32      	cmp	r3, #50	; 0x32
 8001e68:	d902      	bls.n	8001e70 <main+0x27c>
  	    		moveForward();
 8001e6a:	f7ff fe3b 	bl	8001ae4 <moveForward>
 8001e6e:	e767      	b.n	8001d40 <main+0x14c>
  	    	}
  	    	else{
  	    		if (!flagDone){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d117      	bne.n	8001ea6 <main+0x2b2>
  	  	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e7c:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <main+0x2ec>)
 8001e7e:	f002 f949 	bl	8004114 <HAL_GPIO_WritePin>
  	  	  	    	HAL_Delay(500);
 8001e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e86:	f001 f867 	bl	8002f58 <HAL_Delay>
  	  	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e90:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <main+0x2ec>)
 8001e92:	f002 f93f 	bl	8004114 <HAL_GPIO_WritePin>
  	  	  	    	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <main+0x2dc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
  	  	  	    	flagDone = true;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	e74c      	b.n	8001d40 <main+0x14c>
  	    		}
  	    		else{
  	    			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1500);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <main+0x2dc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001eae:	635a      	str	r2, [r3, #52]	; 0x34
  		ProcessCANMessage();
 8001eb0:	e746      	b.n	8001d40 <main+0x14c>
 8001eb2:	bf00      	nop
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	24000440 	.word	0x24000440
 8001ebc:	58020800 	.word	0x58020800
 8001ec0:	24000560 	.word	0x24000560
 8001ec4:	24000008 	.word	0x24000008
 8001ec8:	0800ceec 	.word	0x0800ceec
 8001ecc:	24000514 	.word	0x24000514
 8001ed0:	240004c8 	.word	0x240004c8
 8001ed4:	c2780000 	.word	0xc2780000
 8001ed8:	24000666 	.word	0x24000666
 8001edc:	24000664 	.word	0x24000664
 8001ee0:	58020400 	.word	0x58020400

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09c      	sub	sp, #112	; 0x70
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	224c      	movs	r2, #76	; 0x4c
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f007 fde6 	bl	8009ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2220      	movs	r2, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 fde0 	bl	8009ac4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001f04:	2004      	movs	r0, #4
 8001f06:	f002 fa8f 	bl	8004428 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <SystemClock_Config+0x104>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <SystemClock_Config+0x104>)
 8001f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <SystemClock_Config+0x104>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <SystemClock_Config+0x108>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4a30      	ldr	r2, [pc, #192]	; (8001fec <SystemClock_Config+0x108>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <SystemClock_Config+0x108>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f3c:	bf00      	nop
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <SystemClock_Config+0x104>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4a:	d1f8      	bne.n	8001f3e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <SystemClock_Config+0x10c>)
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f023 0303 	bic.w	r3, r3, #3
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <SystemClock_Config+0x10c>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f72:	2302      	movs	r3, #2
 8001f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001f7a:	2378      	movs	r3, #120	; 0x78
 8001f7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fa9e 	bl	80044dc <HAL_RCC_OscConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fa6:	f000 fb8d 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001faa:	233f      	movs	r3, #63	; 0x3f
 8001fac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fba:	2340      	movs	r3, #64	; 0x40
 8001fbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fc8:	2340      	movs	r3, #64	; 0x40
 8001fca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 feb1 	bl	8004d38 <HAL_RCC_ClockConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001fdc:	f000 fb72 	bl	80026c4 <Error_Handler>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3770      	adds	r7, #112	; 0x70
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	58024800 	.word	0x58024800
 8001fec:	58000400 	.word	0x58000400
 8001ff0:	58024400 	.word	0x58024400

08001ff4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <MX_FDCAN1_Init+0x158>)
 8001ffc:	4a54      	ldr	r2, [pc, #336]	; (8002150 <MX_FDCAN1_Init+0x15c>)
 8001ffe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <MX_FDCAN1_Init+0x158>)
 800200e:	2200      	movs	r2, #0
 8002010:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002012:	4b4e      	ldr	r3, [pc, #312]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002014:	2200      	movs	r2, #0
 8002016:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <MX_FDCAN1_Init+0x158>)
 800201a:	2201      	movs	r2, #1
 800201c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800201e:	4b4b      	ldr	r3, [pc, #300]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002020:	2202      	movs	r2, #2
 8002022:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8002024:	4b49      	ldr	r3, [pc, #292]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002026:	2208      	movs	r2, #8
 8002028:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 800202a:	4b48      	ldr	r3, [pc, #288]	; (800214c <MX_FDCAN1_Init+0x158>)
 800202c:	221f      	movs	r2, #31
 800202e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8002030:	4b46      	ldr	r3, [pc, #280]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002032:	2208      	movs	r2, #8
 8002034:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002036:	4b45      	ldr	r3, [pc, #276]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002038:	2201      	movs	r2, #1
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800203c:	4b43      	ldr	r3, [pc, #268]	; (800214c <MX_FDCAN1_Init+0x158>)
 800203e:	2201      	movs	r2, #1
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002044:	2201      	movs	r2, #1
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <MX_FDCAN1_Init+0x158>)
 800204a:	2201      	movs	r2, #1
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002050:	2200      	movs	r2, #0
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002056:	2201      	movs	r2, #1
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <MX_FDCAN1_Init+0x158>)
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002062:	2201      	movs	r2, #1
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002068:	2204      	movs	r2, #4
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <MX_FDCAN1_Init+0x158>)
 800206e:	2200      	movs	r2, #0
 8002070:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002074:	2204      	movs	r2, #4
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <MX_FDCAN1_Init+0x158>)
 800207a:	2200      	movs	r2, #0
 800207c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002080:	2204      	movs	r2, #4
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002086:	2200      	movs	r2, #0
 8002088:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <MX_FDCAN1_Init+0x158>)
 800208c:	2200      	movs	r2, #0
 800208e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002092:	2201      	movs	r2, #1
 8002094:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002098:	2200      	movs	r2, #0
 800209a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <MX_FDCAN1_Init+0x158>)
 800209e:	2204      	movs	r2, #4
 80020a0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80020a2:	482a      	ldr	r0, [pc, #168]	; (800214c <MX_FDCAN1_Init+0x158>)
 80020a4:	f001 f86c 	bl	8003180 <HAL_FDCAN_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80020ae:	f000 fb09 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
      /* Configure Rx filter */
       sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
       sFilterConfig.FilterIndex = 0;
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
       sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	609a      	str	r2, [r3, #8]
       sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	60da      	str	r2, [r3, #12]
       sFilterConfig.FilterID1 = 0x000;
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
       sFilterConfig.FilterID2 = 0x000;
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]

       /* Configure global filter to reject all non-matching frames */
       HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	2202      	movs	r2, #2
 80020de:	2102      	movs	r1, #2
 80020e0:	481a      	ldr	r0, [pc, #104]	; (800214c <MX_FDCAN1_Init+0x158>)
 80020e2:	f001 faa1 	bl	8003628 <HAL_FDCAN_ConfigGlobalFilter>

       if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80020e6:	491b      	ldr	r1, [pc, #108]	; (8002154 <MX_FDCAN1_Init+0x160>)
 80020e8:	4818      	ldr	r0, [pc, #96]	; (800214c <MX_FDCAN1_Init+0x158>)
 80020ea:	f001 fa27 	bl	800353c <HAL_FDCAN_ConfigFilter>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_FDCAN1_Init+0x104>
         {
            /* Filter configuration Error */
            Error_Handler();
 80020f4:	f000 fae6 	bl	80026c4 <Error_Handler>
         }
        /* Start the FDCAN module */
       if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80020f8:	4814      	ldr	r0, [pc, #80]	; (800214c <MX_FDCAN1_Init+0x158>)
 80020fa:	f001 fac2 	bl	8003682 <HAL_FDCAN_Start>
         }
            /* Start Error */
       if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80020fe:	2200      	movs	r2, #0
 8002100:	2101      	movs	r1, #1
 8002102:	4812      	ldr	r0, [pc, #72]	; (800214c <MX_FDCAN1_Init+0x158>)
 8002104:	f001 fc56 	bl	80039b4 <HAL_FDCAN_ActivateNotification>
         }
            /* Notification Error */

        /* Configure Tx buffer message */
       TxHeader.Identifier = 0x111;
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <MX_FDCAN1_Init+0x164>)
 800210a:	f240 1211 	movw	r2, #273	; 0x111
 800210e:	601a      	str	r2, [r3, #0]
       TxHeader.IdType = FDCAN_STANDARD_ID;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_FDCAN1_Init+0x164>)
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
       TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_FDCAN1_Init+0x164>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
       TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_FDCAN1_Init+0x164>)
 800211e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002122:	60da      	str	r2, [r3, #12]
       TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_FDCAN1_Init+0x164>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
       TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_FDCAN1_Init+0x164>)
 800212c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002130:	615a      	str	r2, [r3, #20]
       TxHeader.FDFormat = FDCAN_FD_CAN;
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_FDCAN1_Init+0x164>)
 8002134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002138:	619a      	str	r2, [r3, #24]
       TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <MX_FDCAN1_Init+0x164>)
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
       TxHeader.MessageMarker = 0x00;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <MX_FDCAN1_Init+0x164>)
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]
      /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000354 	.word	0x24000354
 8002150:	4000a000 	.word	0x4000a000
 8002154:	240005f0 	.word	0x240005f0
 8002158:	24000610 	.word	0x24000610

0800215c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <MX_I2C4_Init+0x78>)
 8002164:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <MX_I2C4_Init+0x7c>)
 800216a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_I2C4_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002174:	2201      	movs	r2, #1
 8002176:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_I2C4_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_I2C4_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002196:	480e      	ldr	r0, [pc, #56]	; (80021d0 <MX_I2C4_Init+0x74>)
 8002198:	f002 f81e 	bl	80041d8 <HAL_I2C_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80021a2:	f000 fa8f 	bl	80026c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <MX_I2C4_Init+0x74>)
 80021aa:	f002 f8a5 	bl	80042f8 <HAL_I2CEx_ConfigAnalogFilter>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80021b4:	f000 fa86 	bl	80026c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80021b8:	2100      	movs	r1, #0
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_I2C4_Init+0x74>)
 80021bc:	f002 f8e7 	bl	800438e <HAL_I2CEx_ConfigDigitalFilter>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80021c6:	f000 fa7d 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	240003f4 	.word	0x240003f4
 80021d4:	58001c00 	.word	0x58001c00
 80021d8:	00404c74 	.word	0x00404c74

080021dc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <MX_SPI5_Init+0xa4>)
 80021e2:	4a28      	ldr	r2, [pc, #160]	; (8002284 <MX_SPI5_Init+0xa8>)
 80021e4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <MX_SPI5_Init+0xa4>)
 80021e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021ec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <MX_SPI5_Init+0xa4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <MX_SPI5_Init+0xa4>)
 80021f6:	2207      	movs	r2, #7
 80021f8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <MX_SPI5_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002208:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800220c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002210:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002214:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_SPI5_Init+0xa4>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_SPI5_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002238:	2200      	movs	r2, #0
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <MX_SPI5_Init+0xa4>)
 800223e:	2200      	movs	r2, #0
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <MX_SPI5_Init+0xa4>)
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002256:	2200      	movs	r2, #0
 8002258:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_SPI5_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_SPI5_Init+0xa4>)
 8002268:	2200      	movs	r2, #0
 800226a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <MX_SPI5_Init+0xa4>)
 800226e:	f004 fc57 	bl	8006b20 <HAL_SPI_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8002278:	f000 fa24 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	24000440 	.word	0x24000440
 8002284:	40015000 	.word	0x40015000

08002288 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b092      	sub	sp, #72	; 0x48
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800228e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	615a      	str	r2, [r3, #20]
 80022a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022a2:	463b      	mov	r3, r7
 80022a4:	222c      	movs	r2, #44	; 0x2c
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fc0b 	bl	8009ac4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <MX_TIM16_Init+0xec>)
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <MX_TIM16_Init+0xf0>)
 80022b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 239;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <MX_TIM16_Init+0xec>)
 80022b6:	22ef      	movs	r2, #239	; 0xef
 80022b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <MX_TIM16_Init+0xec>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <MX_TIM16_Init+0xec>)
 80022c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_TIM16_Init+0xec>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <MX_TIM16_Init+0xec>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <MX_TIM16_Init+0xec>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022da:	4826      	ldr	r0, [pc, #152]	; (8002374 <MX_TIM16_Init+0xec>)
 80022dc:	f005 fbc5 	bl	8007a6a <HAL_TIM_Base_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80022e6:	f000 f9ed 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80022ea:	4822      	ldr	r0, [pc, #136]	; (8002374 <MX_TIM16_Init+0xec>)
 80022ec:	f005 fc14 	bl	8007b18 <HAL_TIM_PWM_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80022f6:	f000 f9e5 	bl	80026c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1500;
 80022fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002308:	2300      	movs	r3, #0
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	4814      	ldr	r0, [pc, #80]	; (8002374 <MX_TIM16_Init+0xec>)
 8002322:	f005 fd69 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800232c:	f000 f9ca 	bl	80026c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002352:	463b      	mov	r3, r7
 8002354:	4619      	mov	r1, r3
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM16_Init+0xec>)
 8002358:	f006 f9f8 	bl	800874c <HAL_TIMEx_ConfigBreakDeadTime>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002362:	f000 f9af 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002366:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM16_Init+0xec>)
 8002368:	f000 fb80 	bl	8002a6c <HAL_TIM_MspPostInit>

}
 800236c:	bf00      	nop
 800236e:	3748      	adds	r7, #72	; 0x48
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	240004c8 	.word	0x240004c8
 8002378:	40014400 	.word	0x40014400

0800237c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	; 0x48
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	222c      	movs	r2, #44	; 0x2c
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f007 fb91 	bl	8009ac4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <MX_TIM17_Init+0xec>)
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <MX_TIM17_Init+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 74;
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <MX_TIM17_Init+0xec>)
 80023aa:	224a      	movs	r2, #74	; 0x4a
 80023ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <MX_TIM17_Init+0xec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <MX_TIM17_Init+0xec>)
 80023b6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80023ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <MX_TIM17_Init+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <MX_TIM17_Init+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <MX_TIM17_Init+0xec>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80023ce:	4826      	ldr	r0, [pc, #152]	; (8002468 <MX_TIM17_Init+0xec>)
 80023d0:	f005 fb4b 	bl	8007a6a <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80023da:	f000 f973 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80023de:	4822      	ldr	r0, [pc, #136]	; (8002468 <MX_TIM17_Init+0xec>)
 80023e0:	f005 fb9a 	bl	8007b18 <HAL_TIM_PWM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80023ea:	f000 f96b 	bl	80026c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ee:	2360      	movs	r3, #96	; 0x60
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f6:	2300      	movs	r3, #0
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	4815      	ldr	r0, [pc, #84]	; (8002468 <MX_TIM17_Init+0xec>)
 8002414:	f005 fcf0 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800241e:	f000 f951 	bl	80026c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	4807      	ldr	r0, [pc, #28]	; (8002468 <MX_TIM17_Init+0xec>)
 800244a:	f006 f97f 	bl	800874c <HAL_TIMEx_ConfigBreakDeadTime>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002454:	f000 f936 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002458:	4803      	ldr	r0, [pc, #12]	; (8002468 <MX_TIM17_Init+0xec>)
 800245a:	f000 fb07 	bl	8002a6c <HAL_TIM_MspPostInit>

}
 800245e:	bf00      	nop
 8002460:	3748      	adds	r7, #72	; 0x48
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24000514 	.word	0x24000514
 800246c:	40014800 	.word	0x40014800

08002470 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <MX_USART3_UART_Init+0x90>)
 8002476:	4a23      	ldr	r2, [pc, #140]	; (8002504 <MX_USART3_UART_Init+0x94>)
 8002478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <MX_USART3_UART_Init+0x90>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <MX_USART3_UART_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <MX_USART3_UART_Init+0x90>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <MX_USART3_UART_Init+0x90>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <MX_USART3_UART_Init+0x90>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <MX_USART3_UART_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024b8:	4811      	ldr	r0, [pc, #68]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024ba:	f006 f9c5 	bl	8008848 <HAL_UART_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024c4:	f000 f8fe 	bl	80026c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c8:	2100      	movs	r1, #0
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024cc:	f007 f9f8 	bl	80098c0 <HAL_UARTEx_SetTxFifoThreshold>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024d6:	f000 f8f5 	bl	80026c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024da:	2100      	movs	r1, #0
 80024dc:	4808      	ldr	r0, [pc, #32]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024de:	f007 fa2d 	bl	800993c <HAL_UARTEx_SetRxFifoThreshold>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024e8:	f000 f8ec 	bl	80026c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_USART3_UART_Init+0x90>)
 80024ee:	f007 f9ae 	bl	800984e <HAL_UARTEx_DisableFifoMode>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024f8:	f000 f8e4 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	24000560 	.word	0x24000560
 8002504:	40004800 	.word	0x40004800

08002508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	; 0x30
 800250c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002524:	4a47      	ldr	r2, [pc, #284]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252e:	4b45      	ldr	r3, [pc, #276]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <MX_GPIO_Init+0x13c>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	4a40      	ldr	r2, [pc, #256]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002544:	f043 0320 	orr.w	r3, r3, #32
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <MX_GPIO_Init+0x13c>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <MX_GPIO_Init+0x13c>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002560:	4a38      	ldr	r2, [pc, #224]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <MX_GPIO_Init+0x13c>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <MX_GPIO_Init+0x13c>)
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257e:	4a31      	ldr	r2, [pc, #196]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <MX_GPIO_Init+0x13c>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <MX_GPIO_Init+0x13c>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <MX_GPIO_Init+0x13c>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <MX_GPIO_Init+0x13c>)
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <MX_GPIO_Init+0x13c>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <MX_GPIO_Init+0x13c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_GPIO_Init+0x13c>)
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f244 0101 	movw	r1, #16385	; 0x4001
 80025d8:	481b      	ldr	r0, [pc, #108]	; (8002648 <MX_GPIO_Init+0x140>)
 80025da:	f001 fd9b 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80025de:	2200      	movs	r2, #0
 80025e0:	21c0      	movs	r1, #192	; 0xc0
 80025e2:	481a      	ldr	r0, [pc, #104]	; (800264c <MX_GPIO_Init+0x144>)
 80025e4:	f001 fd96 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	4813      	ldr	r0, [pc, #76]	; (800264c <MX_GPIO_Init+0x144>)
 80025fe:	f001 fbd9 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8002602:	f244 0301 	movw	r3, #16385	; 0x4001
 8002606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <MX_GPIO_Init+0x140>)
 800261c:	f001 fbca 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_GPIO_Init+0x144>)
 8002638:	f001 fbbc 	bl	8003db4 <HAL_GPIO_Init>

}
 800263c:	bf00      	nop
 800263e:	3730      	adds	r7, #48	; 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	58020400 	.word	0x58020400
 800264c:	58020800 	.word	0x58020800

08002650 <Turning_SetAngle>:

/* USER CODE BEGIN 4 */
static void Turning_SetAngle(float angle){
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	ed87 0a01 	vstr	s0, [r7, #4]
	//ARR value
	uint32_t autoreload_register_value = 63999;
 800265a:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800265e:	617b      	str	r3, [r7, #20]

	//1. Map angle (-90 to 90 degrees) to pulse width (1 to 2 ms) by calculating:
	float pulseWidth = 1.5 + angle/180;
 8002660:	ed97 7a01 	vldr	s14, [r7, #4]
 8002664:	eddf 6a15 	vldr	s13, [pc, #84]	; 80026bc <Turning_SetAngle+0x6c>
 8002668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800266c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002674:	edc7 7a04 	vstr	s15, [r7, #16]

	//2. Calculate the new value to be writing to the compare register:
	uint32_t value = (pulseWidth / 20.0) * (autoreload_register_value + 1);
 8002678:	edd7 7a04 	vldr	s15, [r7, #16]
 800267c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002680:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002684:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	ee07 3a90 	vmov	s15, r3
 8002690:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002694:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	60fb      	str	r3, [r7, #12]

	//3. Set the compare value to adjust the PWM duty cycle
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, value);
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <Turning_SetAngle+0x70>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34

	//4. Start the PWM
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80026aa:	2100      	movs	r1, #0
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <Turning_SetAngle+0x70>)
 80026ae:	f005 fa95 	bl	8007bdc <HAL_TIM_PWM_Start>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	43340000 	.word	0x43340000
 80026c0:	24000514 	.word	0x24000514

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	e7fe      	b.n	80026cc <Error_Handler+0x8>
	...

080026d0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80026d8:	1d39      	adds	r1, r7, #4
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	2201      	movs	r2, #1
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <__io_putchar+0x20>)
 80026e2:	f006 f901 	bl	80088e8 <HAL_UART_Transmit>
  return ch;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	24000560 	.word	0x24000560

080026f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_MspInit+0x30>)
 80026fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_MspInit+0x30>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_MspInit+0x30>)
 800270c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	58024400 	.word	0x58024400

08002728 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b8      	sub	sp, #224	; 0xe0
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	22bc      	movs	r2, #188	; 0xbc
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f007 f9bb 	bl	8009ac4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a37      	ldr	r2, [pc, #220]	; (8002830 <HAL_FDCAN_MspInit+0x108>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d167      	bne.n	8002828 <HAL_FDCAN_MspInit+0x100>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800275e:	2304      	movs	r3, #4
 8002760:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 8002762:	2350      	movs	r3, #80	; 0x50
 8002764:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002766:	2302      	movs	r3, #2
 8002768:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800276a:	2304      	movs	r3, #4
 800276c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800276e:	2302      	movs	r3, #2
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002772:	2340      	movs	r3, #64	; 0x40
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002776:	2320      	movs	r3, #32
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800277e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002782:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fe61 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8002794:	f7ff ff96 	bl	80026c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 800279a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 80027aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_FDCAN_MspInit+0x10c>)
 80027c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80027ec:	2309      	movs	r3, #9
 80027ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027f6:	4619      	mov	r1, r3
 80027f8:	480f      	ldr	r0, [pc, #60]	; (8002838 <HAL_FDCAN_MspInit+0x110>)
 80027fa:	f001 fadb 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FDCAN1_TX_Pin;
 80027fe:	2302      	movs	r3, #2
 8002800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280a:	2301      	movs	r3, #1
 800280c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002816:	2309      	movs	r3, #9
 8002818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002820:	4619      	mov	r1, r3
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <HAL_FDCAN_MspInit+0x110>)
 8002824:	f001 fac6 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	37e0      	adds	r7, #224	; 0xe0
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	4000a000 	.word	0x4000a000
 8002834:	58024400 	.word	0x58024400
 8002838:	58020c00 	.word	0x58020c00

0800283c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0b8      	sub	sp, #224	; 0xe0
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	22bc      	movs	r2, #188	; 0xbc
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f007 f931 	bl	8009ac4 <memset>
  if(hi2c->Instance==I2C4)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <HAL_I2C_MspInit+0xe4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d154      	bne.n	8002916 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800286c:	2310      	movs	r3, #16
 800286e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002870:	2304      	movs	r3, #4
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 8002874:	2378      	movs	r3, #120	; 0x78
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002878:	2302      	movs	r3, #2
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800287c:	2302      	movs	r3, #2
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 8002880:	230c      	movs	r3, #12
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800288a:	2300      	movs	r3, #0
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 8002892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fdd6 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 80028aa:	f7ff ff0b 	bl	80026c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 80028cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d4:	2312      	movs	r3, #18
 80028d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80028e6:	2304      	movs	r3, #4
 80028e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <HAL_I2C_MspInit+0xec>)
 80028f4:	f001 fa5e 	bl	8003db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 80028fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 8002900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002904:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_I2C_MspInit+0xe8>)
 800290a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	37e0      	adds	r7, #224	; 0xe0
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	58001c00 	.word	0x58001c00
 8002924:	58024400 	.word	0x58024400
 8002928:	58021400 	.word	0x58021400

0800292c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0b8      	sub	sp, #224	; 0xe0
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	22bc      	movs	r2, #188	; 0xbc
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f007 f8b9 	bl	8009ac4 <memset>
  if(hspi->Instance==SPI5)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_SPI_MspInit+0xc0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d143      	bne.n	80029e4 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8002962:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002966:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fd6f 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002978:	f7ff fea4 	bl	80026c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 800297e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002982:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 8002984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002988:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 800298e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 800299c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_SPI_MspInit+0xc4>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029b8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80029bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029d2:	2305      	movs	r3, #5
 80029d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_SPI_MspInit+0xc8>)
 80029e0:	f001 f9e8 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	37e0      	adds	r7, #224	; 0xe0
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40015000 	.word	0x40015000
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58021400 	.word	0x58021400

080029f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_TIM_Base_MspInit+0x68>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10f      	bne.n	8002a2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a28:	e013      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_TIM_Base_MspInit+0x70>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10e      	bne.n	8002a52 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_TIM_Base_MspInit+0x6c>)
 8002a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40014400 	.word	0x40014400
 8002a64:	58024400 	.word	0x58024400
 8002a68:	40014800 	.word	0x40014800

08002a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_TIM_MspPostInit+0xb4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d11f      	bne.n	8002ace <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PF6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = ESC_Pin;
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4818      	ldr	r0, [pc, #96]	; (8002b28 <HAL_TIM_MspPostInit+0xbc>)
 8002ac8:	f001 f974 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002acc:	e024      	b.n	8002b18 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM17)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_TIM_MspPostInit+0xc0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d11f      	bne.n	8002b18 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ade:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4807      	ldr	r0, [pc, #28]	; (8002b30 <HAL_TIM_MspPostInit+0xc4>)
 8002b14:	f001 f94e 	bl	8003db4 <HAL_GPIO_Init>
}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40014400 	.word	0x40014400
 8002b24:	58024400 	.word	0x58024400
 8002b28:	58021400 	.word	0x58021400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	58020400 	.word	0x58020400

08002b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0b8      	sub	sp, #224	; 0xe0
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	22bc      	movs	r2, #188	; 0xbc
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f006 ffb5 	bl	8009ac4 <memset>
  if(huart->Instance==USART3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_UART_MspInit+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d142      	bne.n	8002bea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b64:	2302      	movs	r3, #2
 8002b66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fc6c 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b7e:	f7ff fda1 	bl	80026c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002be2:	4619      	mov	r1, r3
 8002be4:	4805      	ldr	r0, [pc, #20]	; (8002bfc <HAL_UART_MspInit+0xc8>)
 8002be6:	f001 f8e5 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	37e0      	adds	r7, #224	; 0xe0
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40004800 	.word	0x40004800
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	58020c00 	.word	0x58020c00

08002c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <NMI_Handler+0x4>

08002c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <HardFault_Handler+0x4>

08002c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <MemManage_Handler+0x4>

08002c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4c:	f000 f964 	bl	8002f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
	return 1;
 8002c58:	2301      	movs	r3, #1
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_kill>:

int _kill(int pid, int sig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c6e:	f006 fef1 	bl	8009a54 <__errno>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2216      	movs	r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
	return -1;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_exit>:

void _exit (int status)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffe7 	bl	8002c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c96:	e7fe      	b.n	8002c96 <_exit+0x12>

08002c98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e00a      	b.n	8002cc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002caa:	f3af 8000 	nop.w
 8002cae:	4601      	mov	r1, r0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	60ba      	str	r2, [r7, #8]
 8002cb6:	b2ca      	uxtb	r2, r1
 8002cb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbf0      	blt.n	8002caa <_read+0x12>
	}

return len;
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e009      	b.n	8002cf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fcef 	bl	80026d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dbf1      	blt.n	8002ce4 <_write+0x12>
	}
	return len;
 8002d00:	687b      	ldr	r3, [r7, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_close>:

int _close(int file)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
	return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d32:	605a      	str	r2, [r3, #4]
	return 0;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_isatty>:

int _isatty(int file)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	return 1;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	return 0;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f006 fe56 	bl	8009a54 <__errno>
 8002da8:	4603      	mov	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <_sbrk+0x64>)
 8002dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	24080000 	.word	0x24080000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	240006a8 	.word	0x240006a8
 8002ddc:	240006c0 	.word	0x240006c0

08002de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002de4:	f7fd fc56 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dea:	490d      	ldr	r1, [pc, #52]	; (8002e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df0:	e002      	b.n	8002df8 <LoopCopyDataInit>

08002df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002df6:	3304      	adds	r3, #4

08002df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dfc:	d3f9      	bcc.n	8002df2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e00:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e04:	e001      	b.n	8002e0a <LoopFillZerobss>

08002e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e08:	3204      	adds	r2, #4

08002e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e0c:	d3fb      	bcc.n	8002e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e0e:	f006 fe27 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e12:	f7fe feef 	bl	8001bf4 <main>
  bx  lr
 8002e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e20:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 8002e24:	0800d38c 	.word	0x0800d38c
  ldr r2, =_sbss
 8002e28:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 8002e2c:	240006c0 	.word	0x240006c0

08002e30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC3_IRQHandler>
	...

08002e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f000 f96e 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e40:	f002 f930 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_Init+0x68>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	4913      	ldr	r1, [pc, #76]	; (8002ea0 <HAL_Init+0x6c>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_Init+0x68>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_Init+0x6c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_Init+0x70>)
 8002e76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_Init+0x74>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7e:	200f      	movs	r0, #15
 8002e80:	f000 f814 	bl	8002eac <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e002      	b.n	8002e94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8e:	f7ff fc31 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	0800cf48 	.word	0x0800cf48
 8002ea4:	24000004 	.word	0x24000004
 8002ea8:	24000000 	.word	0x24000000

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_InitTick+0x60>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e021      	b.n	8002f04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <HAL_InitTick+0x64>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_InitTick+0x60>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f945 	bl	8003166 <HAL_SYSTICK_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00e      	b.n	8002f04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b0f      	cmp	r3, #15
 8002eea:	d80a      	bhi.n	8002f02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eec:	2200      	movs	r2, #0
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f000 f91d 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <HAL_InitTick+0x68>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	24000034 	.word	0x24000034
 8002f10:	24000000 	.word	0x24000000
 8002f14:	24000030 	.word	0x24000030

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	24000034 	.word	0x24000034
 8002f3c:	240006ac 	.word	0x240006ac

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	240006ac 	.word	0x240006ac

08002f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff ffee 	bl	8002f40 <HAL_GetTick>
 8002f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d005      	beq.n	8002f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_Delay+0x44>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f7e:	bf00      	nop
 8002f80:	f7ff ffde 	bl	8002f40 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f7      	bhi.n	8002f80 <HAL_Delay+0x28>
  {
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	24000034 	.word	0x24000034

08002fa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_GetREVID+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	5c001000 	.word	0x5c001000

08002fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00
 8002ffc:	05fa0000 	.word	0x05fa0000

08003000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <__NVIC_GetPriorityGrouping+0x18>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 0307 	and.w	r3, r3, #7
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff47 	bl	8002fb8 <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff5e 	bl	8003000 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff90 	bl	8003070 <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5f 	bl	800301c <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffb2 	bl	80030d8 <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b098      	sub	sp, #96	; 0x60
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003188:	4a84      	ldr	r2, [pc, #528]	; (800339c <HAL_FDCAN_Init+0x21c>)
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	4611      	mov	r1, r2
 8003190:	224c      	movs	r2, #76	; 0x4c
 8003192:	4618      	mov	r0, r3
 8003194:	f006 fc88 	bl	8009aa8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c6      	b.n	8003530 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a7e      	ldr	r2, [pc, #504]	; (80033a0 <HAL_FDCAN_Init+0x220>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d106      	bne.n	80031ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff faaa 	bl	8002728 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0210 	bic.w	r2, r2, #16
 80031e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e4:	f7ff feac 	bl	8002f40 <HAL_GetTick>
 80031e8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031ea:	e014      	b.n	8003216 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031ec:	f7ff fea8 	bl	8002f40 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d90d      	bls.n	8003216 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e18c      	b.n	8003530 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d0e3      	beq.n	80031ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003234:	f7ff fe84 	bl	8002f40 <HAL_GetTick>
 8003238:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800323a:	e014      	b.n	8003266 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800323c:	f7ff fe80 	bl	8002f40 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b0a      	cmp	r3, #10
 8003248:	d90d      	bls.n	8003266 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e164      	b.n	8003530 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0e3      	beq.n	800323c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0202 	orr.w	r2, r2, #2
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7c1b      	ldrb	r3, [r3, #16]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	e007      	b.n	80032ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7c5b      	ldrb	r3, [r3, #17]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c4:	619a      	str	r2, [r3, #24]
 80032c6:	e007      	b.n	80032d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7c9b      	ldrb	r3, [r3, #18]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	e007      	b.n	8003302 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003300:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003326:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0210 	bic.w	r2, r2, #16
 8003336:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0204 	orr.w	r2, r2, #4
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	e030      	b.n	80033b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02c      	beq.n	80033b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d020      	beq.n	80033a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003370:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0210 	orr.w	r2, r2, #16
 8003380:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d114      	bne.n	80033b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0220 	orr.w	r2, r2, #32
 8003398:	619a      	str	r2, [r3, #24]
 800339a:	e00b      	b.n	80033b4 <HAL_FDCAN_Init+0x234>
 800339c:	0800cefc 	.word	0x0800cefc
 80033a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e8:	d115      	bne.n	8003416 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	3b01      	subs	r3, #1
 80033f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	3b01      	subs	r3, #1
 8003400:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003402:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	3b01      	subs	r3, #1
 800340c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003412:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003414:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	4413      	add	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800344a:	f023 0107 	bic.w	r1, r3, #7
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3360      	adds	r3, #96	; 0x60
 8003456:	443b      	add	r3, r7
 8003458:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d011      	beq.n	8003492 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003476:	f023 0107 	bic.w	r1, r3, #7
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	3360      	adds	r3, #96	; 0x60
 8003482:	443b      	add	r3, r7
 8003484:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034a2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3360      	adds	r3, #96	; 0x60
 80034ae:	443b      	add	r3, r7
 80034b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034b4:	011a      	lsls	r2, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034d0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	443b      	add	r3, r7
 80034de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_FDCAN_Init+0x3b8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d107      	bne.n	8003508 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f022 0203 	bic.w	r2, r2, #3
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fac1 	bl	8003aa8 <FDCAN_CalcultateRamBlockAddresses>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800352c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003530:	4618      	mov	r0, r3
 8003532:	3760      	adds	r7, #96	; 0x60
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	4000a000 	.word	0x4000a000

0800353c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800354c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d002      	beq.n	800355a <HAL_FDCAN_ConfigFilter+0x1e>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d157      	bne.n	800360a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d12b      	bne.n	80035ba <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b07      	cmp	r3, #7
 8003568:	d10d      	bne.n	8003586 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003576:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800357c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800357e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e00e      	b.n	80035a4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003592:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800359a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e025      	b.n	8003606 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	075a      	lsls	r2, r3, #29
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d103      	bne.n	80035d8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e006      	b.n	80035e6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	079a      	lsls	r2, r3, #30
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3304      	adds	r3, #4
 80035fe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e008      	b.n	800361c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003610:	f043 0202 	orr.w	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d110      	bne.n	8003664 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800364a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003650:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800365c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e008      	b.n	8003676 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d111      	bne.n	80036ba <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e008      	b.n	80036cc <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80036d8:	b480      	push	{r7}
 80036da:	b08b      	sub	sp, #44	; 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036f0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80036f2:	7efb      	ldrb	r3, [r7, #27]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	f040 814b 	bne.w	8003990 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d14d      	bne.n	800379c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003708:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e13e      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800372c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800373a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e12c      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10b      	bne.n	8003772 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003762:	0fdb      	lsrs	r3, r3, #31
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376c:	d101      	bne.n	8003772 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800376e:	2301      	movs	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	4413      	add	r3, r2
 8003784:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	69f9      	ldr	r1, [r7, #28]
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
 800379a:	e069      	b.n	8003870 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b41      	cmp	r3, #65	; 0x41
 80037a0:	d14d      	bne.n	800383e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0ed      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0db      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037f2:	0e1b      	lsrs	r3, r3, #24
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10b      	bne.n	8003814 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003804:	0fdb      	lsrs	r3, r3, #31
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380e:	d101      	bne.n	8003814 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003810:	2301      	movs	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e018      	b.n	8003870 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d309      	bcc.n	800385c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0a2      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0c9b      	lsrs	r3, r3, #18
 800388a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e005      	b.n	80038a0 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	3304      	adds	r3, #4
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0fda      	lsrs	r2, r3, #31
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	3304      	adds	r3, #4
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800390e:	2300      	movs	r3, #0
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	e00a      	b.n	800392a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	441a      	add	r2, r3
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	440b      	add	r3, r1
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	3301      	adds	r3, #1
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	461a      	mov	r2, r3
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	4293      	cmp	r3, r2
 800393a:	d3eb      	bcc.n	8003914 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d105      	bne.n	800394e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800394c:	e01e      	b.n	800398c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b41      	cmp	r3, #65	; 0x41
 8003952:	d105      	bne.n	8003960 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800395e:	e015      	b.n	800398c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b1f      	cmp	r3, #31
 8003964:	d808      	bhi.n	8003978 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003976:	e009      	b.n	800398c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e008      	b.n	80039a2 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003996:	f043 0208 	orr.w	r2, r3, #8
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	372c      	adds	r7, #44	; 0x2c
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	0800cf68 	.word	0x0800cf68

080039b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039c6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d002      	beq.n	80039d4 <HAL_FDCAN_ActivateNotification+0x20>
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d155      	bne.n	8003a80 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f2:	e014      	b.n	8003a1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d108      	bne.n	8003a16 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0202 	orr.w	r2, r2, #2
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a14:	e003      	b.n	8003a1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_FDCAN_ActivateNotification+0xec>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6553      	str	r3, [r2, #84]	; 0x54
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0f9b      	lsrs	r3, r3, #30
 8003a76:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e008      	b.n	8003a92 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a86:	f043 0202 	orr.w	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	3fcfffff 	.word	0x3fcfffff
 8003aa4:	4000a800 	.word	0x4000a800

08003aa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003abe:	4ba7      	ldr	r3, [pc, #668]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	0091      	lsls	r1, r2, #2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	430b      	orrs	r3, r1
 8003acc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	041a      	lsls	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	4413      	add	r3, r2
 8003af4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003afe:	4b97      	ldr	r3, [pc, #604]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	0091      	lsls	r1, r2, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	041a      	lsls	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4413      	add	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003b40:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	0091      	lsls	r1, r2, #2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	041a      	lsls	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b88:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	0091      	lsls	r1, r2, #2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	041a      	lsls	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	0091      	lsls	r1, r2, #2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003bfc:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	0091      	lsls	r1, r2, #2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	041a      	lsls	r2, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4413      	add	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0091      	lsls	r1, r2, #2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	041a      	lsls	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	061a      	lsls	r2, r3, #24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009a      	lsls	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d915      	bls.n	8003d84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003d58:	e006      	b.n	8003d68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003d5a:	bf00      	nop
 8003d5c:	ffff0003 	.word	0xffff0003
 8003d60:	10002b00 	.word	0x10002b00
 8003d64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e010      	b.n	8003da6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e005      	b.n	8003d98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3304      	adds	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3f3      	bcc.n	8003d8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dc2:	4b89      	ldr	r3, [pc, #548]	; (8003fe8 <HAL_GPIO_Init+0x234>)
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dc6:	e194      	b.n	80040f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8186 	beq.w	80040ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_GPIO_Init+0x44>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d017      	beq.n	8003e96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d123      	bne.n	8003eea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80e0 	beq.w	80040ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f32:	4a2e      	ldr	r2, [pc, #184]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_GPIO_Init+0x238>)
 8003f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_GPIO_Init+0x23c>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_GPIO_Init+0x240>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d052      	beq.n	800401c <HAL_GPIO_Init+0x268>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_GPIO_Init+0x244>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_GPIO_Init+0x22e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_GPIO_Init+0x248>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x22a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_GPIO_Init+0x24c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d025      	beq.n	8003fda <HAL_GPIO_Init+0x226>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <HAL_GPIO_Init+0x250>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x222>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <HAL_GPIO_Init+0x254>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x21e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1a      	ldr	r2, [pc, #104]	; (800400c <HAL_GPIO_Init+0x258>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x21a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_GPIO_Init+0x25c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x216>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_GPIO_Init+0x260>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x212>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_GPIO_Init+0x264>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x20e>
 8003fbe:	2309      	movs	r3, #9
 8003fc0:	e02d      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	e02b      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	e029      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fca:	2307      	movs	r3, #7
 8003fcc:	e027      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fce:	2306      	movs	r3, #6
 8003fd0:	e025      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e023      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e021      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e01f      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e01d      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01b      	b.n	800401e <HAL_GPIO_Init+0x26a>
 8003fe6:	bf00      	nop
 8003fe8:	58000080 	.word	0x58000080
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	58000400 	.word	0x58000400
 8003ff4:	58020000 	.word	0x58020000
 8003ff8:	58020400 	.word	0x58020400
 8003ffc:	58020800 	.word	0x58020800
 8004000:	58020c00 	.word	0x58020c00
 8004004:	58021000 	.word	0x58021000
 8004008:	58021400 	.word	0x58021400
 800400c:	58021800 	.word	0x58021800
 8004010:	58021c00 	.word	0x58021c00
 8004014:	58022000 	.word	0x58022000
 8004018:	58022400 	.word	0x58022400
 800401c:	2300      	movs	r3, #0
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402e:	4938      	ldr	r1, [pc, #224]	; (8004110 <HAL_GPIO_Init+0x35c>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae63 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004130:	e003      	b.n	800413a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	041a      	lsls	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004158:	887a      	ldrh	r2, [r7, #2]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	041a      	lsls	r2, r3, #16
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43d9      	mvns	r1, r3
 8004164:	887b      	ldrh	r3, [r7, #2]
 8004166:	400b      	ands	r3, r1
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004184:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <HAL_HSEM_FastTake+0x2c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3320      	adds	r3, #32
 800418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <HAL_HSEM_FastTake+0x30>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	58026400 	.word	0x58026400
 80041ac:	80000300 	.word	0x80000300

080041b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041ba:	4906      	ldr	r1, [pc, #24]	; (80041d4 <HAL_HSEM_Release+0x24>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	58026400 	.word	0x58026400

080041d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe fb1c 	bl	800283c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e006      	b.n	8004260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800425e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d104      	bne.n	8004272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <HAL_I2C_Init+0x11c>)
 800427e:	430b      	orrs	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004290:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	02008000 	.word	0x02008000

080042f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d138      	bne.n	8004380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004318:	2302      	movs	r3, #2
 800431a:	e032      	b.n	8004382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	; 0x24
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800434a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d139      	bne.n	8004418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e033      	b.n	800441a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	2b06      	cmp	r3, #6
 800443a:	d00a      	beq.n	8004452 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e040      	b.n	80044d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e03e      	b.n	80044d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800445a:	491f      	ldr	r1, [pc, #124]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4313      	orrs	r3, r2
 8004460:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004462:	f7fe fd6d 	bl	8002f40 <HAL_GetTick>
 8004466:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004468:	e009      	b.n	800447e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800446a:	f7fe fd69 	bl	8002f40 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004478:	d901      	bls.n	800447e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e028      	b.n	80044d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448a:	d1ee      	bne.n	800446a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b1e      	cmp	r3, #30
 8004490:	d008      	beq.n	80044a4 <HAL_PWREx_ConfigSupply+0x7c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b2e      	cmp	r3, #46	; 0x2e
 8004496:	d005      	beq.n	80044a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b1d      	cmp	r3, #29
 800449c:	d002      	beq.n	80044a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b2d      	cmp	r3, #45	; 0x2d
 80044a2:	d114      	bne.n	80044ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044a4:	f7fe fd4c 	bl	8002f40 <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044aa:	e009      	b.n	80044c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044ac:	f7fe fd48 	bl	8002f40 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ba:	d901      	bls.n	80044c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d1ee      	bne.n	80044ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	58024800 	.word	0x58024800

080044dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f000 bc1d 	b.w	8004d2a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8087 	beq.w	800460c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fe:	4b99      	ldr	r3, [pc, #612]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004508:	4b96      	ldr	r3, [pc, #600]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	2b10      	cmp	r3, #16
 8004512:	d007      	beq.n	8004524 <HAL_RCC_OscConfig+0x48>
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	2b18      	cmp	r3, #24
 8004518:	d110      	bne.n	800453c <HAL_RCC_OscConfig+0x60>
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d10b      	bne.n	800453c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	4b8f      	ldr	r3, [pc, #572]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d06c      	beq.n	800460a <HAL_RCC_OscConfig+0x12e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d168      	bne.n	800460a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e3f6      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x78>
 8004546:	4b87      	ldr	r3, [pc, #540]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a86      	ldr	r2, [pc, #536]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e02e      	b.n	80045b2 <HAL_RCC_OscConfig+0xd6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x9a>
 800455c:	4b81      	ldr	r3, [pc, #516]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a80      	ldr	r2, [pc, #512]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a7d      	ldr	r2, [pc, #500]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e01d      	b.n	80045b2 <HAL_RCC_OscConfig+0xd6>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0xbe>
 8004580:	4b78      	ldr	r3, [pc, #480]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a77      	ldr	r2, [pc, #476]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b75      	ldr	r3, [pc, #468]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a74      	ldr	r2, [pc, #464]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e00b      	b.n	80045b2 <HAL_RCC_OscConfig+0xd6>
 800459a:	4b72      	ldr	r3, [pc, #456]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a71      	ldr	r2, [pc, #452]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6e      	ldr	r2, [pc, #440]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80045ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d013      	beq.n	80045e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fe fcc1 	bl	8002f40 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c2:	f7fe fcbd 	bl	8002f40 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e3aa      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d4:	4b63      	ldr	r3, [pc, #396]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0xe6>
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fe fcad 	bl	8002f40 <HAL_GetTick>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ea:	f7fe fca9 	bl	8002f40 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e396      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x10e>
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80cb 	beq.w	80047b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461a:	4b52      	ldr	r3, [pc, #328]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004622:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x164>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b18      	cmp	r3, #24
 8004634:	d156      	bne.n	80046e4 <HAL_RCC_OscConfig+0x208>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d151      	bne.n	80046e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x17c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e368      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 0219 	bic.w	r2, r3, #25
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	493f      	ldr	r1, [pc, #252]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800466a:	f7fe fc69 	bl	8002f40 <HAL_GetTick>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004672:	f7fe fc65 	bl	8002f40 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e352      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004690:	f7fe fc86 	bl	8002fa0 <HAL_GetREVID>
 8004694:	4603      	mov	r3, r0
 8004696:	f241 0203 	movw	r2, #4099	; 0x1003
 800469a:	4293      	cmp	r3, r2
 800469c:	d817      	bhi.n	80046ce <HAL_RCC_OscConfig+0x1f2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d108      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1dc>
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046ae:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b6:	e07b      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	031b      	lsls	r3, r3, #12
 80046c6:	4927      	ldr	r1, [pc, #156]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046cc:	e070      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	061b      	lsls	r3, r3, #24
 80046dc:	4921      	ldr	r1, [pc, #132]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e2:	e065      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d048      	beq.n	800477e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 0219 	bic.w	r2, r3, #25
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fe fc1f 	bl	8002f40 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004706:	f7fe fc1b 	bl	8002f40 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e308      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004718:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004724:	f7fe fc3c 	bl	8002fa0 <HAL_GetREVID>
 8004728:	4603      	mov	r3, r0
 800472a:	f241 0203 	movw	r2, #4099	; 0x1003
 800472e:	4293      	cmp	r3, r2
 8004730:	d81a      	bhi.n	8004768 <HAL_RCC_OscConfig+0x28c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d108      	bne.n	800474c <HAL_RCC_OscConfig+0x270>
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 8004744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004748:	6053      	str	r3, [r2, #4]
 800474a:	e031      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	4902      	ldr	r1, [pc, #8]	; (8004764 <HAL_RCC_OscConfig+0x288>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
 8004760:	e026      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
 8004768:	4b9a      	ldr	r3, [pc, #616]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	4997      	ldr	r1, [pc, #604]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
 800477c:	e018      	b.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b95      	ldr	r3, [pc, #596]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a94      	ldr	r2, [pc, #592]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fe fbd9 	bl	8002f40 <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004792:	f7fe fbd5 	bl	8002f40 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e2c2      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047a4:	4b8b      	ldr	r3, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a9 	beq.w	8004910 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c8:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d007      	beq.n	80047e4 <HAL_RCC_OscConfig+0x308>
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b18      	cmp	r3, #24
 80047d8:	d13a      	bne.n	8004850 <HAL_RCC_OscConfig+0x374>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d135      	bne.n	8004850 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047e4:	4b7b      	ldr	r3, [pc, #492]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_OscConfig+0x320>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b80      	cmp	r3, #128	; 0x80
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e296      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047fc:	f7fe fbd0 	bl	8002fa0 <HAL_GetREVID>
 8004800:	4603      	mov	r3, r0
 8004802:	f241 0203 	movw	r2, #4099	; 0x1003
 8004806:	4293      	cmp	r3, r2
 8004808:	d817      	bhi.n	800483a <HAL_RCC_OscConfig+0x35e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	2b20      	cmp	r3, #32
 8004810:	d108      	bne.n	8004824 <HAL_RCC_OscConfig+0x348>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800481a:	4a6e      	ldr	r2, [pc, #440]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800481c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004820:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004822:	e075      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004824:	4b6b      	ldr	r3, [pc, #428]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	069b      	lsls	r3, r3, #26
 8004832:	4968      	ldr	r1, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004838:	e06a      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800483a:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	4962      	ldr	r1, [pc, #392]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800484e:	e05f      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d042      	beq.n	80048de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800485e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fe fb6c 	bl	8002f40 <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800486c:	f7fe fb68 	bl	8002f40 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e255      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800488a:	f7fe fb89 	bl	8002fa0 <HAL_GetREVID>
 800488e:	4603      	mov	r3, r0
 8004890:	f241 0203 	movw	r2, #4099	; 0x1003
 8004894:	4293      	cmp	r3, r2
 8004896:	d817      	bhi.n	80048c8 <HAL_RCC_OscConfig+0x3ec>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	2b20      	cmp	r3, #32
 800489e:	d108      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3d6>
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e02e      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
 80048b2:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	069b      	lsls	r3, r3, #26
 80048c0:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
 80048c6:	e023      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
 80048c8:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	493f      	ldr	r1, [pc, #252]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
 80048dc:	e018      	b.n	8004910 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fe fb29 	bl	8002f40 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048f2:	f7fe fb25 	bl	8002f40 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e212      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004904:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d036      	beq.n	800498a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d019      	beq.n	8004958 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fe fb06 	bl	8002f40 <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004938:	f7fe fb02 	bl	8002f40 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1ef      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x45c>
 8004956:	e018      	b.n	800498a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495c:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004964:	f7fe faec 	bl	8002f40 <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800496c:	f7fe fae8 	bl	8002f40 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e1d5      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d039      	beq.n	8004a0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049aa:	f7fe fac9 	bl	8002f40 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049b2:	f7fe fac5 	bl	8002f40 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1b2      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4d6>
 80049d0:	e01b      	b.n	8004a0a <HAL_RCC_OscConfig+0x52e>
 80049d2:	bf00      	nop
 80049d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d8:	4b9b      	ldr	r3, [pc, #620]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a9a      	ldr	r2, [pc, #616]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 80049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049e4:	f7fe faac 	bl	8002f40 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049ec:	f7fe faa8 	bl	8002f40 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e195      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049fe:	4b92      	ldr	r3, [pc, #584]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8081 	beq.w	8004b1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a18:	4b8c      	ldr	r3, [pc, #560]	; (8004c4c <HAL_RCC_OscConfig+0x770>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a8b      	ldr	r2, [pc, #556]	; (8004c4c <HAL_RCC_OscConfig+0x770>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a24:	f7fe fa8c 	bl	8002f40 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fe fa88 	bl	8002f40 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e175      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a3e:	4b83      	ldr	r3, [pc, #524]	; (8004c4c <HAL_RCC_OscConfig+0x770>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x584>
 8004a52:	4b7d      	ldr	r3, [pc, #500]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a7c      	ldr	r2, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e02d      	b.n	8004abc <HAL_RCC_OscConfig+0x5e0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5a6>
 8004a68:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a76      	ldr	r2, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
 8004a74:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	4a73      	ldr	r2, [pc, #460]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	f023 0304 	bic.w	r3, r3, #4
 8004a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a80:	e01c      	b.n	8004abc <HAL_RCC_OscConfig+0x5e0>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5c8>
 8004a8a:	4b6f      	ldr	r3, [pc, #444]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	4a6e      	ldr	r2, [pc, #440]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	6713      	str	r3, [r2, #112]	; 0x70
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a6b      	ldr	r2, [pc, #428]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0x5e0>
 8004aa4:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a67      	ldr	r2, [pc, #412]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4a64      	ldr	r2, [pc, #400]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	f023 0304 	bic.w	r3, r3, #4
 8004aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d015      	beq.n	8004af0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fe fa3c 	bl	8002f40 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fe fa38 	bl	8002f40 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e123      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ae2:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ee      	beq.n	8004acc <HAL_RCC_OscConfig+0x5f0>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fe fa26 	bl	8002f40 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fe fa22 	bl	8002f40 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e10d      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b0e:	4b4e      	ldr	r3, [pc, #312]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ee      	bne.n	8004af8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8102 	beq.w	8004d28 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b24:	4b48      	ldr	r3, [pc, #288]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2c:	2b18      	cmp	r3, #24
 8004b2e:	f000 80bd 	beq.w	8004cac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	f040 809e 	bne.w	8004c78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a41      	ldr	r2, [pc, #260]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe f9fa 	bl	8002f40 <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fe f9f6 	bl	8002f40 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0e3      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b72:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <HAL_RCC_OscConfig+0x774>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	430a      	orrs	r2, r1
 8004b82:	4931      	ldr	r1, [pc, #196]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	628b      	str	r3, [r1, #40]	; 0x28
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	3b01      	subs	r3, #1
 8004b98:	025b      	lsls	r3, r3, #9
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bb8:	4923      	ldr	r1, [pc, #140]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCC_OscConfig+0x778>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bd6:	00d2      	lsls	r2, r2, #3
 8004bd8:	491b      	ldr	r1, [pc, #108]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f023 020c 	bic.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4917      	ldr	r1, [pc, #92]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f023 0202 	bic.w	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	4912      	ldr	r1, [pc, #72]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe f97f 	bl	8002f40 <HAL_GetTick>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c44:	e011      	b.n	8004c6a <HAL_RCC_OscConfig+0x78e>
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58024800 	.word	0x58024800
 8004c50:	fffffc0c 	.word	0xfffffc0c
 8004c54:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fe f972 	bl	8002f40 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e05f      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c6a:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x77c>
 8004c76:	e057      	b.n	8004d28 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe f95c 	bl	8002f40 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe f958 	bl	8002f40 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e045      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x7b0>
 8004caa:	e03d      	b.n	8004d28 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_RCC_OscConfig+0x858>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d031      	beq.n	8004d24 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f003 0203 	and.w	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d12a      	bne.n	8004d24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d122      	bne.n	8004d24 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d11a      	bne.n	8004d24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d111      	bne.n	8004d24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d108      	bne.n	8004d24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3730      	adds	r7, #48	; 0x30
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400

08004d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e19c      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d910      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b87      	ldr	r3, [pc, #540]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 020f 	bic.w	r2, r3, #15
 8004d62:	4985      	ldr	r1, [pc, #532]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b83      	ldr	r3, [pc, #524]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e184      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d98:	4b78      	ldr	r3, [pc, #480]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	4975      	ldr	r1, [pc, #468]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	4b70      	ldr	r3, [pc, #448]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d908      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	496a      	ldr	r1, [pc, #424]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	4b64      	ldr	r3, [pc, #400]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004df4:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	495e      	ldr	r1, [pc, #376]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d908      	bls.n	8004e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4953      	ldr	r1, [pc, #332]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b4d      	ldr	r3, [pc, #308]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d908      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f023 020f 	bic.w	r2, r3, #15
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4947      	ldr	r1, [pc, #284]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d055      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e6e:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4940      	ldr	r1, [pc, #256]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e88:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d121      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0f6      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0ea      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0de      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0d6      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f023 0207 	bic.w	r2, r3, #7
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4925      	ldr	r1, [pc, #148]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eea:	f7fe f829 	bl	8002f40 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef2:	f7fe f825 	bl	8002f40 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0be      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d1eb      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d208      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f023 020f 	bic.w	r2, r3, #15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	490e      	ldr	r1, [pc, #56]	; (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d214      	bcs.n	8004f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 020f 	bic.w	r2, r3, #15
 8004f5e:	4906      	ldr	r1, [pc, #24]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e086      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
 8004f78:	52002000 	.word	0x52002000
 8004f7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d010      	beq.n	8004fae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d208      	bcs.n	8004fae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	4939      	ldr	r1, [pc, #228]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	4b34      	ldr	r3, [pc, #208]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d208      	bcs.n	8004fdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	492e      	ldr	r1, [pc, #184]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d010      	beq.n	800500a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d208      	bcs.n	800500a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4922      	ldr	r1, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005006:	4313      	orrs	r3, r2
 8005008:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005022:	429a      	cmp	r2, r3
 8005024:	d208      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4917      	ldr	r1, [pc, #92]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005034:	4313      	orrs	r3, r2
 8005036:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005038:	f000 f834 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	4912      	ldr	r1, [pc, #72]	; (8005094 <HAL_RCC_ClockConfig+0x35c>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <HAL_RCC_ClockConfig+0x35c>)
 8005060:	5cd3      	ldrb	r3, [r2, r3]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x360>)
 800506e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x364>)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_RCC_ClockConfig+0x368>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd ff16 	bl	8002eac <HAL_InitTick>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	0800cf48 	.word	0x0800cf48
 8005098:	24000004 	.word	0x24000004
 800509c:	24000000 	.word	0x24000000
 80050a0:	24000030 	.word	0x24000030

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050aa:	4bb3      	ldr	r3, [pc, #716]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050b2:	2b18      	cmp	r3, #24
 80050b4:	f200 8155 	bhi.w	8005362 <HAL_RCC_GetSysClockFreq+0x2be>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005125 	.word	0x08005125
 80050c4:	08005363 	.word	0x08005363
 80050c8:	08005363 	.word	0x08005363
 80050cc:	08005363 	.word	0x08005363
 80050d0:	08005363 	.word	0x08005363
 80050d4:	08005363 	.word	0x08005363
 80050d8:	08005363 	.word	0x08005363
 80050dc:	08005363 	.word	0x08005363
 80050e0:	0800514b 	.word	0x0800514b
 80050e4:	08005363 	.word	0x08005363
 80050e8:	08005363 	.word	0x08005363
 80050ec:	08005363 	.word	0x08005363
 80050f0:	08005363 	.word	0x08005363
 80050f4:	08005363 	.word	0x08005363
 80050f8:	08005363 	.word	0x08005363
 80050fc:	08005363 	.word	0x08005363
 8005100:	08005151 	.word	0x08005151
 8005104:	08005363 	.word	0x08005363
 8005108:	08005363 	.word	0x08005363
 800510c:	08005363 	.word	0x08005363
 8005110:	08005363 	.word	0x08005363
 8005114:	08005363 	.word	0x08005363
 8005118:	08005363 	.word	0x08005363
 800511c:	08005363 	.word	0x08005363
 8005120:	08005157 	.word	0x08005157
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005124:	4b94      	ldr	r3, [pc, #592]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005130:	4b91      	ldr	r3, [pc, #580]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	4a90      	ldr	r2, [pc, #576]	; (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005142:	e111      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005144:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005146:	61bb      	str	r3, [r7, #24]
    break;
 8005148:	e10e      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800514a:	4b8d      	ldr	r3, [pc, #564]	; (8005380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800514c:	61bb      	str	r3, [r7, #24]
    break;
 800514e:	e10b      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005150:	4b8c      	ldr	r3, [pc, #560]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005152:	61bb      	str	r3, [r7, #24]
    break;
 8005154:	e108      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005156:	4b88      	ldr	r3, [pc, #544]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005160:	4b85      	ldr	r3, [pc, #532]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800516c:	4b82      	ldr	r3, [pc, #520]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005176:	4b80      	ldr	r3, [pc, #512]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	08db      	lsrs	r3, r3, #3
 800517c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80e1 	beq.w	800535c <HAL_RCC_GetSysClockFreq+0x2b8>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f000 8083 	beq.w	80052a8 <HAL_RCC_GetSysClockFreq+0x204>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f200 80a1 	bhi.w	80052ec <HAL_RCC_GetSysClockFreq+0x248>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x114>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d056      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051b6:	e099      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b8:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02d      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051c4:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	4a6b      	ldr	r2, [pc, #428]	; (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b62      	ldr	r3, [pc, #392]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800521e:	e087      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800538c <HAL_RCC_GetSysClockFreq+0x2e8>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b51      	ldr	r3, [pc, #324]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a02 	vldr	s12, [r7, #8]
 8005246:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005262:	e065      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b40      	ldr	r3, [pc, #256]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a02 	vldr	s12, [r7, #8]
 800528a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a6:	e043      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ea:	e021      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005312:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	0a5b      	lsrs	r3, r3, #9
 8005336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533a:	3301      	adds	r3, #1
 800533c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005348:	edd7 6a07 	vldr	s13, [r7, #28]
 800534c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005354:	ee17 3a90 	vmov	r3, s15
 8005358:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    break;
 8005360:	e002      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005364:	61bb      	str	r3, [r7, #24]
    break;
 8005366:	bf00      	nop
  }

  return sysclockfreq;
 8005368:	69bb      	ldr	r3, [r7, #24]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
 800537c:	03d09000 	.word	0x03d09000
 8005380:	003d0900 	.word	0x003d0900
 8005384:	007a1200 	.word	0x007a1200
 8005388:	46000000 	.word	0x46000000
 800538c:	4c742400 	.word	0x4c742400
 8005390:	4a742400 	.word	0x4a742400
 8005394:	4af42400 	.word	0x4af42400

08005398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800539e:	f7ff fe81 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490f      	ldr	r1, [pc, #60]	; (80053ec <HAL_RCC_GetHCLKFreq+0x54>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	4a09      	ldr	r2, [pc, #36]	; (80053ec <HAL_RCC_GetHCLKFreq+0x54>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a07      	ldr	r2, [pc, #28]	; (80053f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80053d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	58024400 	.word	0x58024400
 80053ec:	0800cf48 	.word	0x0800cf48
 80053f0:	24000004 	.word	0x24000004
 80053f4:	24000000 	.word	0x24000000

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053fc:	f7ff ffcc 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58024400 	.word	0x58024400
 8005420:	0800cf48 	.word	0x0800cf48

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005428:	f7ff ffb6 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4904      	ldr	r1, [pc, #16]	; (800544c <HAL_RCC_GetPCLK2Freq+0x28>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	58024400 	.word	0x58024400
 800544c:	0800cf48 	.word	0x0800cf48

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005458:	2300      	movs	r3, #0
 800545a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800545c:	2300      	movs	r3, #0
 800545e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d03f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005474:	d02a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800547a:	d824      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800547c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005480:	d018      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005486:	d81e      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d007      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005492:	e018      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4ba3      	ldr	r3, [pc, #652]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4aa2      	ldr	r2, [pc, #648]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80054a0:	e015      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 f9d5 	bl	8006858 <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80054b2:	e00c      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fa7e 	bl	80069bc <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054d4:	4b93      	ldr	r3, [pc, #588]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e0:	4990      	ldr	r1, [pc, #576]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	650b      	str	r3, [r1, #80]	; 0x50
 80054e6:	e001      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03d      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d826      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800551d 	.word	0x0800551d
 800550c:	0800552b 	.word	0x0800552b
 8005510:	0800553d 	.word	0x0800553d
 8005514:	08005555 	.word	0x08005555
 8005518:	08005555 	.word	0x08005555
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551c:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a80      	ldr	r2, [pc, #512]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005528:	e015      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f991 	bl	8006858 <RCCEx_PLL2_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800553a:	e00c      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3324      	adds	r3, #36	; 0x24
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fa3a 	bl	80069bc <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
      break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800555c:	4b71      	ldr	r3, [pc, #452]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	f023 0207 	bic.w	r2, r3, #7
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	496e      	ldr	r1, [pc, #440]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800556a:	4313      	orrs	r3, r2
 800556c:	650b      	str	r3, [r1, #80]	; 0x50
 800556e:	e001      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557c:	2b00      	cmp	r3, #0
 800557e:	d042      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	d02b      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d825      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005590:	2bc0      	cmp	r3, #192	; 0xc0
 8005592:	d028      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005594:	2bc0      	cmp	r3, #192	; 0xc0
 8005596:	d821      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d016      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	d81d      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d007      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80055a8:	e018      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055aa:	4b5e      	ldr	r3, [pc, #376]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a5d      	ldr	r2, [pc, #372]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055b6:	e017      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f94a 	bl	8006858 <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055c8:	e00e      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 f9f3 	bl	80069bc <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055da:	e005      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e002      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055ee:	4b4d      	ldr	r3, [pc, #308]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	494a      	ldr	r1, [pc, #296]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	650b      	str	r3, [r1, #80]	; 0x50
 8005600:	e001      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560e:	2b00      	cmp	r3, #0
 8005610:	d049      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800561c:	d030      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800561e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005622:	d82a      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005624:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005628:	d02c      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800562a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800562e:	d824      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005634:	d018      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563a:	d81e      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005644:	d007      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005646:	e018      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b36      	ldr	r3, [pc, #216]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a35      	ldr	r2, [pc, #212]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005654:	e017      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f8fb 	bl	8006858 <RCCEx_PLL2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005666:	e00e      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f001 f9a4 	bl	80069bc <RCCEx_PLL3_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005678:	e005      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
      break;
 800567e:	e002      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005680:	bf00      	nop
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800569a:	4922      	ldr	r1, [pc, #136]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	658b      	str	r3, [r1, #88]	; 0x58
 80056a0:	e001      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056bc:	d030      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80056be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c2:	d82a      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056c8:	d02e      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80056ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ce:	d824      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d4:	d018      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056da:	d81e      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80056e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056e4:	d007      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80056e6:	e018      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056f4:	e019      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f8ab 	bl	8006858 <RCCEx_PLL2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005706:	e010      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3324      	adds	r3, #36	; 0x24
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f001 f954 	bl	80069bc <RCCEx_PLL3_Config>
 8005714:	4603      	mov	r3, r0
 8005716:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005718:	e007      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
      break;
 800571e:	e004      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005724:	58024400 	.word	0x58024400
      break;
 8005728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005730:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800573e:	4996      	ldr	r1, [pc, #600]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005740:	4313      	orrs	r3, r2
 8005742:	658b      	str	r3, [r1, #88]	; 0x58
 8005744:	e001      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d032      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575a:	2b30      	cmp	r3, #48	; 0x30
 800575c:	d01c      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d817      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005762:	2b20      	cmp	r3, #32
 8005764:	d00c      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d813      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d016      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800576e:	2b10      	cmp	r3, #16
 8005770:	d10f      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005772:	4b89      	ldr	r3, [pc, #548]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	4a88      	ldr	r2, [pc, #544]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800577e:	e00e      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	2102      	movs	r1, #2
 8005786:	4618      	mov	r0, r3
 8005788:	f001 f866 	bl	8006858 <RCCEx_PLL2_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005790:	e005      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
      break;
 8005796:	e002      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005798:	bf00      	nop
 800579a:	e000      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800579c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057a4:	4b7c      	ldr	r3, [pc, #496]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b0:	4979      	ldr	r1, [pc, #484]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d047      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d0:	d030      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d6:	d82a      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057dc:	d02c      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80057de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e2:	d824      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e8:	d018      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ee:	d81e      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d007      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80057fa:	e018      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fc:	4b66      	ldr	r3, [pc, #408]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a65      	ldr	r2, [pc, #404]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005808:	e017      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3304      	adds	r3, #4
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f821 	bl	8006858 <RCCEx_PLL2_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800581a:	e00e      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3324      	adds	r3, #36	; 0x24
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f8ca 	bl	80069bc <RCCEx_PLL3_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800582c:	e005      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
      break;
 8005832:	e002      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005834:	bf00      	nop
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005840:	4b55      	ldr	r3, [pc, #340]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	4952      	ldr	r1, [pc, #328]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800584e:	4313      	orrs	r3, r2
 8005850:	650b      	str	r3, [r1, #80]	; 0x50
 8005852:	e001      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d049      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800586c:	d02e      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800586e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005872:	d828      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005878:	d02a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800587a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800587e:	d822      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005880:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005884:	d026      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005886:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800588a:	d81c      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800588c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005890:	d010      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005896:	d816      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d111      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 ffd5 	bl	8006858 <RCCEx_PLL2_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80058b2:	e012      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	2101      	movs	r1, #1
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 f87e 	bl	80069bc <RCCEx_PLL3_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80058c4:	e009      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ca:	e006      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058cc:	bf00      	nop
 80058ce:	e004      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058d0:	bf00      	nop
 80058d2:	e002      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	492a      	ldr	r1, [pc, #168]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	650b      	str	r3, [r1, #80]	; 0x50
 80058f2:	e001      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d04d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800590a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800590e:	d02e      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005914:	d828      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d02a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005920:	d822      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005922:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005926:	d026      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005928:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800592c:	d81c      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800592e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005932:	d010      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005938:	d816      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01d      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800593e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005942:	d111      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f000 ff84 	bl	8006858 <RCCEx_PLL2_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005954:	e012      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3324      	adds	r3, #36	; 0x24
 800595a:	2101      	movs	r1, #1
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f82d 	bl	80069bc <RCCEx_PLL3_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005966:	e009      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800596e:	bf00      	nop
 8005970:	e004      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800597a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10c      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005990:	4901      	ldr	r1, [pc, #4]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005992:	4313      	orrs	r3, r2
 8005994:	658b      	str	r3, [r1, #88]	; 0x58
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02f      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b4:	d00e      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d814      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d015      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80059c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c4:	d10f      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4baf      	ldr	r3, [pc, #700]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4aae      	ldr	r2, [pc, #696]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ff3c 	bl	8006858 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80059ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059f4:	4ba3      	ldr	r3, [pc, #652]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	49a0      	ldr	r1, [pc, #640]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	650b      	str	r3, [r1, #80]	; 0x50
 8005a06:	e001      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d032      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d81b      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a5f 	.word	0x08005a5f
 8005a2c:	08005a39 	.word	0x08005a39
 8005a30:	08005a47 	.word	0x08005a47
 8005a34:	08005a5f 	.word	0x08005a5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4b92      	ldr	r3, [pc, #584]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a91      	ldr	r2, [pc, #580]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a44:	e00c      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 ff03 	bl	8006858 <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a56:	e003      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5c:	e000      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a66:	4b87      	ldr	r3, [pc, #540]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	f023 0203 	bic.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	4984      	ldr	r1, [pc, #528]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a78:	e001      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8086 	beq.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a8c:	4b7e      	ldr	r3, [pc, #504]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a7d      	ldr	r2, [pc, #500]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a98:	f7fd fa52 	bl	8002f40 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9e:	e009      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa0:	f7fd fa4e 	bl	8002f40 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d902      	bls.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	75fb      	strb	r3, [r7, #23]
        break;
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab4:	4b74      	ldr	r3, [pc, #464]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ef      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d166      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ac6:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ad0:	4053      	eors	r3, r2
 8005ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ada:	4b6a      	ldr	r3, [pc, #424]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ae4:	4b67      	ldr	r3, [pc, #412]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a66      	ldr	r2, [pc, #408]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005af0:	4b64      	ldr	r3, [pc, #400]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a63      	ldr	r2, [pc, #396]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005afc:	4a61      	ldr	r2, [pc, #388]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d115      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fd fa17 	bl	8002f40 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b14:	e00b      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fa13 	bl	8002f40 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b2c:	e005      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b2e:	4b55      	ldr	r3, [pc, #340]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ed      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d126      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4e:	d10d      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005b50:	4b4c      	ldr	r3, [pc, #304]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b5e:	0919      	lsrs	r1, r3, #4
 8005b60:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005b62:	400b      	ands	r3, r1
 8005b64:	4947      	ldr	r1, [pc, #284]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]
 8005b6a:	e005      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005b6c:	4b45      	ldr	r3, [pc, #276]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	4a44      	ldr	r2, [pc, #272]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b76:	6113      	str	r3, [r2, #16]
 8005b78:	4b42      	ldr	r3, [pc, #264]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b86:	493f      	ldr	r1, [pc, #252]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	670b      	str	r3, [r1, #112]	; 0x70
 8005b8c:	e004      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	75bb      	strb	r3, [r7, #22]
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8085 	beq.w	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	2b28      	cmp	r3, #40	; 0x28
 8005bac:	d866      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005c91 	.word	0x08005c91
 8005bb8:	08005c7d 	.word	0x08005c7d
 8005bbc:	08005c7d 	.word	0x08005c7d
 8005bc0:	08005c7d 	.word	0x08005c7d
 8005bc4:	08005c7d 	.word	0x08005c7d
 8005bc8:	08005c7d 	.word	0x08005c7d
 8005bcc:	08005c7d 	.word	0x08005c7d
 8005bd0:	08005c7d 	.word	0x08005c7d
 8005bd4:	08005c59 	.word	0x08005c59
 8005bd8:	08005c7d 	.word	0x08005c7d
 8005bdc:	08005c7d 	.word	0x08005c7d
 8005be0:	08005c7d 	.word	0x08005c7d
 8005be4:	08005c7d 	.word	0x08005c7d
 8005be8:	08005c7d 	.word	0x08005c7d
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c7d 	.word	0x08005c7d
 8005bf4:	08005c6b 	.word	0x08005c6b
 8005bf8:	08005c7d 	.word	0x08005c7d
 8005bfc:	08005c7d 	.word	0x08005c7d
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c7d 	.word	0x08005c7d
 8005c08:	08005c7d 	.word	0x08005c7d
 8005c0c:	08005c7d 	.word	0x08005c7d
 8005c10:	08005c7d 	.word	0x08005c7d
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005c7d 	.word	0x08005c7d
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	08005c7d 	.word	0x08005c7d
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005c7d 	.word	0x08005c7d
 8005c34:	08005c91 	.word	0x08005c91
 8005c38:	08005c7d 	.word	0x08005c7d
 8005c3c:	08005c7d 	.word	0x08005c7d
 8005c40:	08005c7d 	.word	0x08005c7d
 8005c44:	08005c7d 	.word	0x08005c7d
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005c7d 	.word	0x08005c7d
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08005c91 	.word	0x08005c91
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fdfa 	bl	8006858 <RCCEx_PLL2_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c68:	e013      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3324      	adds	r3, #36	; 0x24
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fea3 	bl	80069bc <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	e007      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	58024800 	.word	0x58024800
 8005c8c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c98:	4b96      	ldr	r3, [pc, #600]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca4:	4993      	ldr	r1, [pc, #588]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	654b      	str	r3, [r1, #84]	; 0x54
 8005caa:	e001      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d038      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d821      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d0f 	.word	0x08005d0f
 8005cd0:	08005ce5 	.word	0x08005ce5
 8005cd4:	08005cf7 	.word	0x08005cf7
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005d0f 	.word	0x08005d0f
 8005ce0:	08005d0f 	.word	0x08005d0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2101      	movs	r1, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fdb4 	bl	8006858 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e00c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fe5d 	bl	80069bc <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e000      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d16:	4b77      	ldr	r3, [pc, #476]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f023 0207 	bic.w	r2, r3, #7
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	4974      	ldr	r1, [pc, #464]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	654b      	str	r3, [r1, #84]	; 0x54
 8005d28:	e001      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d03a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d821      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d8f 	.word	0x08005d8f
 8005d50:	08005d65 	.word	0x08005d65
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fd74 	bl	8006858 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d74:	e00c      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fe1d 	bl	80069bc <RCCEx_PLL3_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8c:	e000      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d96:	4b57      	ldr	r3, [pc, #348]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	4953      	ldr	r1, [pc, #332]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	658b      	str	r3, [r1, #88]	; 0x58
 8005daa:	e001      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d04b      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc6:	d02e      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dcc:	d828      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d02a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d822      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dde:	d026      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005de4:	d81c      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dea:	d010      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df0:	d816      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01d      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dfa:	d111      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fd28 	bl	8006858 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e0c:	e012      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	2102      	movs	r1, #2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fdd1 	bl	80069bc <RCCEx_PLL3_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e1e:	e009      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e26:	bf00      	nop
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e48:	492a      	ldr	r1, [pc, #168]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	654b      	str	r3, [r1, #84]	; 0x54
 8005e4e:	e001      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d04d      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e6a:	d02e      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005e6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e70:	d828      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d02a      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d822      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e82:	d026      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e88:	d81c      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d010      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e94:	d816      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01d      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d111      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fcd6 	bl	8006858 <RCCEx_PLL2_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005eb0:	e012      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3324      	adds	r3, #36	; 0x24
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fd7f 	bl	80069bc <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ec2:	e009      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec8:	e006      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e004      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e002      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e000      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eec:	4901      	ldr	r1, [pc, #4]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ef2:	e003      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d04b      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f12:	d02e      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005f14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f18:	d828      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d02a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	d822      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f2a:	d026      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005f2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f30:	d81c      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f36:	d010      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3c:	d816      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01d      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	d111      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fc82 	bl	8006858 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f58:	e012      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3324      	adds	r3, #36	; 0x24
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd2b 	bl	80069bc <RCCEx_PLL3_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f6a:	e009      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f72:	bf00      	nop
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f76:	bf00      	nop
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f86:	4b9d      	ldr	r3, [pc, #628]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f94:	4999      	ldr	r1, [pc, #612]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	658b      	str	r3, [r1, #88]	; 0x58
 8005f9a:	e001      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d10a      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fcfc 	bl	80069bc <RCCEx_PLL3_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fce:	4b8b      	ldr	r3, [pc, #556]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fdc:	4987      	ldr	r1, [pc, #540]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3324      	adds	r3, #36	; 0x24
 8005ffe:	2102      	movs	r1, #2
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fcdb 	bl	80069bc <RCCEx_PLL3_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006010:	4b7a      	ldr	r3, [pc, #488]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601e:	4977      	ldr	r1, [pc, #476]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006020:	4313      	orrs	r3, r2
 8006022:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d034      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800603a:	d01d      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800603c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006040:	d817      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604a:	d009      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800604c:	e011      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fbff 	bl	8006858 <RCCEx_PLL2_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800605e:	e00c      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3324      	adds	r3, #36	; 0x24
 8006064:	2102      	movs	r1, #2
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fca8 	bl	80069bc <RCCEx_PLL3_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006070:	e003      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800608e:	495b      	ldr	r1, [pc, #364]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006090:	4313      	orrs	r3, r2
 8006092:	658b      	str	r3, [r1, #88]	; 0x58
 8006094:	e001      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d033      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b0:	d01c      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80060b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b6:	d816      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80060b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060bc:	d003      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80060be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060c2:	d007      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80060c4:	e00f      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c6:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	4a4c      	ldr	r2, [pc, #304]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80060d2:	e00c      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3324      	adds	r3, #36	; 0x24
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fc6e 	bl	80069bc <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80060ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060f4:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006102:	493e      	ldr	r1, [pc, #248]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006104:	4313      	orrs	r3, r2
 8006106:	654b      	str	r3, [r1, #84]	; 0x54
 8006108:	e001      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d029      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006126:	d007      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006128:	e00f      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a33      	ldr	r2, [pc, #204]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb8a 	bl	8006858 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006148:	e002      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	75fb      	strb	r3, [r7, #23]
      break;
 800614e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006162:	4926      	ldr	r1, [pc, #152]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006164:	4313      	orrs	r3, r2
 8006166:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006168:	e001      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3324      	adds	r3, #36	; 0x24
 800617e:	2102      	movs	r1, #2
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fc1b 	bl	80069bc <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d033      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a4:	d017      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d811      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b0:	d013      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80061b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b6:	d80b      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80061bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c0:	d106      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c2:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80061ce:	e007      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	e004      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061d6:	bf00      	nop
 80061d8:	e002      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10c      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f2:	4902      	ldr	r1, [pc, #8]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	654b      	str	r3, [r1, #84]	; 0x54
 80061f8:	e004      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80061fa:	bf00      	nop
 80061fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006210:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	492e      	ldr	r1, [pc, #184]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800621e:	4313      	orrs	r3, r2
 8006220:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800622e:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800623c:	4926      	ldr	r1, [pc, #152]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006252:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	491f      	ldr	r1, [pc, #124]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800625c:	4313      	orrs	r3, r2
 800625e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006276:	6113      	str	r3, [r2, #16]
 8006278:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006282:	4915      	ldr	r1, [pc, #84]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006284:	4313      	orrs	r3, r2
 8006286:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	da08      	bge.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	490e      	ldr	r1, [pc, #56]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	4906      	ldr	r1, [pc, #24]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80062c2:	7dbb      	ldrb	r3, [r7, #22]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	58024400 	.word	0x58024400

080062dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062e0:	f7ff f85a 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4904      	ldr	r1, [pc, #16]	; (8006304 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	58024400 	.word	0x58024400
 8006304:	0800cf48 	.word	0x0800cf48

08006308 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006310:	4ba1      	ldr	r3, [pc, #644]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800631a:	4b9f      	ldr	r3, [pc, #636]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	0b1b      	lsrs	r3, r3, #12
 8006320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006324:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006326:	4b9c      	ldr	r3, [pc, #624]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006332:	4b99      	ldr	r3, [pc, #612]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	08db      	lsrs	r3, r3, #3
 8006338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8111 	beq.w	8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	f000 8083 	beq.w	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b02      	cmp	r3, #2
 8006362:	f200 80a1 	bhi.w	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d056      	beq.n	8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006372:	e099      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006374:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02d      	beq.n	80063dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006380:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	4a84      	ldr	r2, [pc, #528]	; (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063aa:	4b7b      	ldr	r3, [pc, #492]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80063be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063da:	e087      	b.n	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ee:	4b6a      	ldr	r3, [pc, #424]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006402:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800641e:	e065      	b.n	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006462:	e043      	b.n	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a6:	e021      	b.n	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80064ec:	4b2a      	ldr	r3, [pc, #168]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	0a5b      	lsrs	r3, r3, #9
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006506:	edd7 6a07 	vldr	s13, [r7, #28]
 800650a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800650e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006512:	ee17 2a90 	vmov	r2, s15
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800651a:	4b1f      	ldr	r3, [pc, #124]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006534:	edd7 6a07 	vldr	s13, [r7, #28]
 8006538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006540:	ee17 2a90 	vmov	r2, s15
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	0e1b      	lsrs	r3, r3, #24
 800654e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800655e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006562:	edd7 6a07 	vldr	s13, [r7, #28]
 8006566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656e:	ee17 2a90 	vmov	r2, s15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006576:	e008      	b.n	800658a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
}
 800658a:	bf00      	nop
 800658c:	3724      	adds	r7, #36	; 0x24
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	58024400 	.word	0x58024400
 800659c:	03d09000 	.word	0x03d09000
 80065a0:	46000000 	.word	0x46000000
 80065a4:	4c742400 	.word	0x4c742400
 80065a8:	4a742400 	.word	0x4a742400
 80065ac:	4af42400 	.word	0x4af42400

080065b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b089      	sub	sp, #36	; 0x24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065b8:	4ba1      	ldr	r3, [pc, #644]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80065c2:	4b9f      	ldr	r3, [pc, #636]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	0d1b      	lsrs	r3, r3, #20
 80065c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80065ce:	4b9c      	ldr	r3, [pc, #624]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80065da:	4b99      	ldr	r3, [pc, #612]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8111 	beq.w	8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b02      	cmp	r3, #2
 8006602:	f000 8083 	beq.w	800670c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b02      	cmp	r3, #2
 800660a:	f200 80a1 	bhi.w	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d056      	beq.n	80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800661a:	e099      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661c:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02d      	beq.n	8006684 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006628:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	08db      	lsrs	r3, r3, #3
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	4a84      	ldr	r2, [pc, #528]	; (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b7b      	ldr	r3, [pc, #492]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a03 	vldr	s12, [r7, #12]
 8006666:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006682:	e087      	b.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066c6:	e065      	b.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b59      	ldr	r3, [pc, #356]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800670a:	e043      	b.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b48      	ldr	r3, [pc, #288]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006732:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800674e:	e021      	b.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a03 	vldr	s12, [r7, #12]
 8006776:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006792:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006794:	4b2a      	ldr	r3, [pc, #168]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	0a5b      	lsrs	r3, r3, #9
 800679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ba:	ee17 2a90 	vmov	r2, s15
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80067c2:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e8:	ee17 2a90 	vmov	r2, s15
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800680a:	edd7 6a07 	vldr	s13, [r7, #28]
 800680e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006816:	ee17 2a90 	vmov	r2, s15
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800681e:	e008      	b.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	609a      	str	r2, [r3, #8]
}
 8006832:	bf00      	nop
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
 8006844:	03d09000 	.word	0x03d09000
 8006848:	46000000 	.word	0x46000000
 800684c:	4c742400 	.word	0x4c742400
 8006850:	4a742400 	.word	0x4a742400
 8006854:	4af42400 	.word	0x4af42400

08006858 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006866:	4b53      	ldr	r3, [pc, #332]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b03      	cmp	r3, #3
 8006870:	d101      	bne.n	8006876 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e099      	b.n	80069aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006876:	4b4f      	ldr	r3, [pc, #316]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a4e      	ldr	r2, [pc, #312]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800687c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006882:	f7fc fb5d 	bl	8002f40 <HAL_GetTick>
 8006886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006888:	e008      	b.n	800689c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800688a:	f7fc fb59 	bl	8002f40 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e086      	b.n	80069aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800689c:	4b45      	ldr	r3, [pc, #276]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f0      	bne.n	800688a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068a8:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	493f      	ldr	r1, [pc, #252]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	628b      	str	r3, [r1, #40]	; 0x28
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	025b      	lsls	r3, r3, #9
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	041b      	lsls	r3, r3, #16
 80068da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	061b      	lsls	r3, r3, #24
 80068e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068ec:	4931      	ldr	r1, [pc, #196]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068f2:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	492d      	ldr	r1, [pc, #180]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006900:	4313      	orrs	r3, r2
 8006902:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	f023 0220 	bic.w	r2, r3, #32
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	4928      	ldr	r1, [pc, #160]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800691c:	f023 0310 	bic.w	r3, r3, #16
 8006920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006922:	4b24      	ldr	r3, [pc, #144]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <RCCEx_PLL2_Config+0x160>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	69d2      	ldr	r2, [r2, #28]
 800692e:	00d2      	lsls	r2, r2, #3
 8006930:	4920      	ldr	r1, [pc, #128]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800693c:	f043 0310 	orr.w	r3, r3, #16
 8006940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006948:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4a19      	ldr	r2, [pc, #100]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800694e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006954:	e00f      	b.n	8006976 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d106      	bne.n	800696a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800695c:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006968:	e005      	b.n	8006976 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006976:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800697c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006982:	f7fc fadd 	bl	8002f40 <HAL_GetTick>
 8006986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006988:	e008      	b.n	800699c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800698a:	f7fc fad9 	bl	8002f40 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e006      	b.n	80069aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <RCCEx_PLL2_Config+0x15c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	58024400 	.word	0x58024400
 80069b8:	ffff0007 	.word	0xffff0007

080069bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ca:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d101      	bne.n	80069da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e099      	b.n	8006b0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069da:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a4e      	ldr	r2, [pc, #312]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 80069e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e6:	f7fc faab 	bl	8002f40 <HAL_GetTick>
 80069ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069ec:	e008      	b.n	8006a00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069ee:	f7fc faa7 	bl	8002f40 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e086      	b.n	8006b0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a00:	4b45      	ldr	r3, [pc, #276]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f0      	bne.n	80069ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a0c:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	051b      	lsls	r3, r3, #20
 8006a1a:	493f      	ldr	r1, [pc, #252]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a50:	4931      	ldr	r1, [pc, #196]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a56:	4b30      	ldr	r3, [pc, #192]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	492d      	ldr	r1, [pc, #180]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	4928      	ldr	r1, [pc, #160]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a7a:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a86:	4b24      	ldr	r3, [pc, #144]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <RCCEx_PLL3_Config+0x160>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	69d2      	ldr	r2, [r2, #28]
 8006a92:	00d2      	lsls	r2, r2, #3
 8006a94:	4920      	ldr	r1, [pc, #128]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a9a:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab8:	e00f      	b.n	8006ada <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ac0:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ac6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006acc:	e005      	b.n	8006ada <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae6:	f7fc fa2b 	bl	8002f40 <HAL_GetTick>
 8006aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006aec:	e008      	b.n	8006b00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006aee:	f7fc fa27 	bl	8002f40 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e006      	b.n	8006b0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <RCCEx_PLL3_Config+0x15c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	ffff0007 	.word	0xffff0007

08006b20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0f1      	b.n	8006d16 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a78      	ldr	r2, [pc, #480]	; (8006d20 <HAL_SPI_Init+0x200>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <HAL_SPI_Init+0x42>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a77      	ldr	r2, [pc, #476]	; (8006d24 <HAL_SPI_Init+0x204>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00a      	beq.n	8006b62 <HAL_SPI_Init+0x42>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a75      	ldr	r2, [pc, #468]	; (8006d28 <HAL_SPI_Init+0x208>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d005      	beq.n	8006b62 <HAL_SPI_Init+0x42>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d901      	bls.n	8006b62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e0d9      	b.n	8006d16 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 ff66 	bl	8007a34 <SPI_GetPacketSize>
 8006b68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6c      	ldr	r2, [pc, #432]	; (8006d20 <HAL_SPI_Init+0x200>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00c      	beq.n	8006b8e <HAL_SPI_Init+0x6e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6a      	ldr	r2, [pc, #424]	; (8006d24 <HAL_SPI_Init+0x204>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d007      	beq.n	8006b8e <HAL_SPI_Init+0x6e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a69      	ldr	r2, [pc, #420]	; (8006d28 <HAL_SPI_Init+0x208>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d002      	beq.n	8006b8e <HAL_SPI_Init+0x6e>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d811      	bhi.n	8006bb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b92:	4a63      	ldr	r2, [pc, #396]	; (8006d20 <HAL_SPI_Init+0x200>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a61      	ldr	r2, [pc, #388]	; (8006d24 <HAL_SPI_Init+0x204>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_SPI_Init+0x8c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a60      	ldr	r2, [pc, #384]	; (8006d28 <HAL_SPI_Init+0x208>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d104      	bne.n	8006bb6 <HAL_SPI_Init+0x96>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d901      	bls.n	8006bb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0af      	b.n	8006d16 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fb feae 	bl	800292c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006bf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bfc:	d119      	bne.n	8006c32 <HAL_SPI_Init+0x112>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c06:	d103      	bne.n	8006c10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10c      	bne.n	8006c32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c20:	d107      	bne.n	8006c32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	ea42 0103 	orr.w	r1, r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c92:	ea42 0103 	orr.w	r1, r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d113      	bne.n	8006cd2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40013000 	.word	0x40013000
 8006d24:	40003800 	.word	0x40003800
 8006d28:	40003c00 	.word	0x40003c00

08006d2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3320      	adds	r3, #32
 8006d42:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_SPI_Transmit+0x2a>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e1d7      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d5e:	f7fc f8ef 	bl	8002f40 <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d007      	beq.n	8006d80 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d7c:	7efb      	ldrb	r3, [r7, #27]
 8006d7e:	e1c2      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_SPI_Transmit+0x60>
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d98:	7efb      	ldrb	r3, [r7, #27]
 8006d9a:	e1b4      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2203      	movs	r2, #3
 8006da0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	88fa      	ldrh	r2, [r7, #6]
 8006dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006dec:	d107      	bne.n	8006dfe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4b96      	ldr	r3, [pc, #600]	; (8007060 <HAL_SPI_Transmit+0x334>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	88f9      	ldrh	r1, [r7, #6]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e2a:	d107      	bne.n	8006e3c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b0f      	cmp	r3, #15
 8006e42:	d947      	bls.n	8006ed4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006e44:	e03f      	b.n	8006ec6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d114      	bne.n	8006e7e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006e7c:	e023      	b.n	8006ec6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7e:	f7fc f85f 	bl	8002f40 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d803      	bhi.n	8006e96 <HAL_SPI_Transmit+0x16a>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x170>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d114      	bne.n	8006ec6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fcfb 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e11f      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1b9      	bne.n	8006e46 <HAL_SPI_Transmit+0x11a>
 8006ed2:	e0f2      	b.n	80070ba <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b07      	cmp	r3, #7
 8006eda:	f240 80e7 	bls.w	80070ac <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006ede:	e05d      	b.n	8006f9c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d132      	bne.n	8006f54 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d918      	bls.n	8006f2c <HAL_SPI_Transmit+0x200>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d014      	beq.n	8006f2c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b02      	subs	r3, #2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006f2a:	e037      	b.n	8006f9c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006f52:	e023      	b.n	8006f9c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f54:	f7fb fff4 	bl	8002f40 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d803      	bhi.n	8006f6c <HAL_SPI_Transmit+0x240>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d102      	bne.n	8006f72 <HAL_SPI_Transmit+0x246>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d114      	bne.n	8006f9c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fc90 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e0b4      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d19b      	bne.n	8006ee0 <HAL_SPI_Transmit+0x1b4>
 8006fa8:	e087      	b.n	80070ba <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d155      	bne.n	8007064 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d918      	bls.n	8006ff6 <HAL_SPI_Transmit+0x2ca>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d914      	bls.n	8006ff6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	1d1a      	adds	r2, r3, #4
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b04      	subs	r3, #4
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006ff4:	e05a      	b.n	80070ac <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d917      	bls.n	8007032 <HAL_SPI_Transmit+0x306>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d013      	beq.n	8007032 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	1c9a      	adds	r2, r3, #2
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b02      	subs	r3, #2
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007030:	e03c      	b.n	80070ac <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3320      	adds	r3, #32
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800705c:	e026      	b.n	80070ac <HAL_SPI_Transmit+0x380>
 800705e:	bf00      	nop
 8007060:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007064:	f7fb ff6c 	bl	8002f40 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d803      	bhi.n	800707c <HAL_SPI_Transmit+0x350>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d102      	bne.n	8007082 <HAL_SPI_Transmit+0x356>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d114      	bne.n	80070ac <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fc08 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e02c      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f47f af78 	bne.w	8006faa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2108      	movs	r1, #8
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fc87 	bl	80079d8 <SPI_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fbd9 	bl	8007898 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007104:	7efb      	ldrb	r3, [r7, #27]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3330      	adds	r3, #48	; 0x30
 800712a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007134:	d112      	bne.n	800715c <HAL_SPI_Receive+0x4c>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10e      	bne.n	800715c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2204      	movs	r2, #4
 8007142:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f978 	bl	8007448 <HAL_SPI_TransmitReceive>
 8007158:	4603      	mov	r3, r0
 800715a:	e16f      	b.n	800743c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_SPI_Receive+0x5a>
 8007166:	2302      	movs	r3, #2
 8007168:	e168      	b.n	800743c <HAL_SPI_Receive+0x32c>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007172:	f7fb fee5 	bl	8002f40 <HAL_GetTick>
 8007176:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d007      	beq.n	8007194 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8007184:	2302      	movs	r3, #2
 8007186:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007190:	7ffb      	ldrb	r3, [r7, #31]
 8007192:	e153      	b.n	800743c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Receive+0x90>
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80071ac:	7ffb      	ldrb	r3, [r7, #31]
 80071ae:	e145      	b.n	800743c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2204      	movs	r2, #4
 80071b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007200:	d107      	bne.n	8007212 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	4b8a      	ldr	r3, [pc, #552]	; (8007444 <HAL_SPI_Receive+0x334>)
 800721a:	4013      	ands	r3, r2
 800721c:	88f9      	ldrh	r1, [r7, #6]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	430b      	orrs	r3, r1
 8007224:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723e:	d107      	bne.n	8007250 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d948      	bls.n	80072ea <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007258:	e040      	b.n	80072dc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695a      	ldr	r2, [r3, #20]
 8007260:	f248 0308 	movw	r3, #32776	; 0x8008
 8007264:	4013      	ands	r3, r2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d014      	beq.n	8007294 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007272:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007274:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007292:	e023      	b.n	80072dc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007294:	f7fb fe54 	bl	8002f40 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d803      	bhi.n	80072ac <HAL_SPI_Receive+0x19c>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d102      	bne.n	80072b2 <HAL_SPI_Receive+0x1a2>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d114      	bne.n	80072dc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 faf0 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e0af      	b.n	800743c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1b8      	bne.n	800725a <HAL_SPI_Receive+0x14a>
 80072e8:	e095      	b.n	8007416 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b07      	cmp	r3, #7
 80072f0:	f240 808b 	bls.w	800740a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80072f4:	e03f      	b.n	8007376 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d114      	bne.n	800732e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	8812      	ldrh	r2, [r2, #0]
 800730c:	b292      	uxth	r2, r2
 800730e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800732c:	e023      	b.n	8007376 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732e:	f7fb fe07 	bl	8002f40 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d803      	bhi.n	8007346 <HAL_SPI_Receive+0x236>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d102      	bne.n	800734c <HAL_SPI_Receive+0x23c>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d114      	bne.n	8007376 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 faa3 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e062      	b.n	800743c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1b9      	bne.n	80072f6 <HAL_SPI_Receive+0x1e6>
 8007382:	e048      	b.n	8007416 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d117      	bne.n	80073c2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80073c0:	e023      	b.n	800740a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c2:	f7fb fdbd 	bl	8002f40 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d803      	bhi.n	80073da <HAL_SPI_Receive+0x2ca>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d102      	bne.n	80073e0 <HAL_SPI_Receive+0x2d0>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d114      	bne.n	800740a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fa59 	bl	8007898 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e018      	b.n	800743c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1b6      	bne.n	8007384 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fa3e 	bl	8007898 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800743a:	7ffb      	ldrb	r3, [r7, #31]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	ffff0000 	.word	0xffff0000

08007448 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	; 0x38
 800744c:	af02      	add	r7, sp, #8
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3320      	adds	r3, #32
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_SPI_TransmitReceive+0x32>
 8007476:	2302      	movs	r3, #2
 8007478:	e209      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007482:	f7fb fd5d 	bl	8002f40 <HAL_GetTick>
 8007486:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007496:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800749e:	7efb      	ldrb	r3, [r7, #27]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d014      	beq.n	80074ce <HAL_SPI_TransmitReceive+0x86>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074aa:	d106      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80074b4:	7efb      	ldrb	r3, [r7, #27]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d009      	beq.n	80074ce <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80074ba:	2302      	movs	r3, #2
 80074bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80074c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074cc:	e1df      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x98>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x98>
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80074ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f2:	e1cc      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d003      	beq.n	8007508 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2205      	movs	r2, #5
 8007504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	887a      	ldrh	r2, [r7, #2]
 800751a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	887a      	ldrh	r2, [r7, #2]
 8007522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4b82      	ldr	r3, [pc, #520]	; (8007758 <HAL_SPI_TransmitReceive+0x310>)
 8007550:	4013      	ands	r3, r2
 8007552:	8879      	ldrh	r1, [r7, #2]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	430b      	orrs	r3, r1
 800755a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007574:	d107      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007584:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	2b0f      	cmp	r3, #15
 800758c:	d970      	bls.n	8007670 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800758e:	e068      	b.n	8007662 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d11a      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x18c>
 800759e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80075d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	f248 0308 	movw	r3, #32776	; 0x8008
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01a      	beq.n	800761a <HAL_SPI_TransmitReceive+0x1d2>
 80075e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fa:	1d1a      	adds	r2, r3, #4
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007618:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800761a:	f7fb fc91 	bl	8002f40 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007626:	429a      	cmp	r2, r3
 8007628:	d803      	bhi.n	8007632 <HAL_SPI_TransmitReceive+0x1ea>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d102      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1f0>
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d114      	bne.n	8007662 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f92d 	bl	8007898 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e115      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007664:	2b00      	cmp	r3, #0
 8007666:	d193      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x148>
 8007668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d190      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x148>
 800766e:	e0e7      	b.n	8007840 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	2b07      	cmp	r3, #7
 8007676:	f240 80dd 	bls.w	8007834 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800767a:	e066      	b.n	800774a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d119      	bne.n	80076be <HAL_SPI_TransmitReceive+0x276>
 800768a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800768c:	2b00      	cmp	r3, #0
 800768e:	d016      	beq.n	80076be <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d11a      	bne.n	8007702 <HAL_SPI_TransmitReceive+0x2ba>
 80076cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	8812      	ldrh	r2, [r2, #0]
 80076da:	b292      	uxth	r2, r2
 80076dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007700:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007702:	f7fb fc1d 	bl	8002f40 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800770e:	429a      	cmp	r2, r3
 8007710:	d803      	bhi.n	800771a <HAL_SPI_TransmitReceive+0x2d2>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d102      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x2d8>
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	2b00      	cmp	r3, #0
 800771e:	d114      	bne.n	800774a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f8b9 	bl	8007898 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e0a1      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800774a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800774c:	2b00      	cmp	r3, #0
 800774e:	d195      	bne.n	800767c <HAL_SPI_TransmitReceive+0x234>
 8007750:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d192      	bne.n	800767c <HAL_SPI_TransmitReceive+0x234>
 8007756:	e073      	b.n	8007840 <HAL_SPI_TransmitReceive+0x3f8>
 8007758:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b02      	cmp	r3, #2
 8007768:	d11b      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x35a>
 800776a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800776c:	2b00      	cmp	r3, #0
 800776e:	d018      	beq.n	80077a2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3320      	adds	r3, #32
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80077a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d11d      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x3a4>
 80077b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01a      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ec:	f7fb fba8 	bl	8002f40 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d803      	bhi.n	8007804 <HAL_SPI_TransmitReceive+0x3bc>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d102      	bne.n	800780a <HAL_SPI_TransmitReceive+0x3c2>
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	2b00      	cmp	r3, #0
 8007808:	d114      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f844 	bl	8007898 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800781e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e02c      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007836:	2b00      	cmp	r3, #0
 8007838:	d190      	bne.n	800775c <HAL_SPI_TransmitReceive+0x314>
 800783a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d18d      	bne.n	800775c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2200      	movs	r2, #0
 8007848:	2108      	movs	r1, #8
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f8c4 	bl	80079d8 <SPI_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f816 	bl	8007898 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e001      	b.n	800788e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800788a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800788e:	4618      	mov	r0, r3
 8007890:	3730      	adds	r7, #48	; 0x30
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0210 	orr.w	r2, r2, #16
 80078c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0201 	bic.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6919      	ldr	r1, [r3, #16]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b3c      	ldr	r3, [pc, #240]	; (80079d4 <SPI_CloseTransfer+0x13c>)
 80078e4:	400b      	ands	r3, r1
 80078e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689a      	ldr	r2, [r3, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80078f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b04      	cmp	r3, #4
 8007902:	d014      	beq.n	800792e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00f      	beq.n	800792e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0220 	orr.w	r2, r2, #32
 800792c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b03      	cmp	r3, #3
 8007938:	d014      	beq.n	8007964 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00f      	beq.n	8007964 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794a:	f043 0204 	orr.w	r2, r3, #4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007962:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00f      	beq.n	800798e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007974:	f043 0201 	orr.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00f      	beq.n	80079b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799e:	f043 0208 	orr.w	r2, r3, #8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	fffffc90 	.word	0xfffffc90

080079d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80079e8:	e010      	b.n	8007a0c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ea:	f7fb faa9 	bl	8002f40 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d803      	bhi.n	8007a02 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d102      	bne.n	8007a08 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e00f      	b.n	8007a2c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4013      	ands	r3, r2
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	bf0c      	ite	eq
 8007a1c:	2301      	moveq	r3, #1
 8007a1e:	2300      	movne	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d0df      	beq.n	80079ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3307      	adds	r3, #7
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e049      	b.n	8007b10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fa ffb1 	bl	80029f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fab9 	bl	8008020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e049      	b.n	8007bbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f841 	bl	8007bc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f000 fa62 	bl	8008020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <HAL_TIM_PWM_Start+0x24>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	bf14      	ite	ne
 8007bf8:	2301      	movne	r3, #1
 8007bfa:	2300      	moveq	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	e03c      	b.n	8007c7a <HAL_TIM_PWM_Start+0x9e>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d109      	bne.n	8007c1a <HAL_TIM_PWM_Start+0x3e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	bf14      	ite	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	2300      	moveq	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	e02f      	b.n	8007c7a <HAL_TIM_PWM_Start+0x9e>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d109      	bne.n	8007c34 <HAL_TIM_PWM_Start+0x58>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e022      	b.n	8007c7a <HAL_TIM_PWM_Start+0x9e>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b0c      	cmp	r3, #12
 8007c38:	d109      	bne.n	8007c4e <HAL_TIM_PWM_Start+0x72>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e015      	b.n	8007c7a <HAL_TIM_PWM_Start+0x9e>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b10      	cmp	r3, #16
 8007c52:	d109      	bne.n	8007c68 <HAL_TIM_PWM_Start+0x8c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e008      	b.n	8007c7a <HAL_TIM_PWM_Start+0x9e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0a1      	b.n	8007dc6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Start+0xb6>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	e023      	b.n	8007cda <HAL_TIM_PWM_Start+0xfe>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0xc6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ca0:	e01b      	b.n	8007cda <HAL_TIM_PWM_Start+0xfe>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIM_PWM_Start+0xd6>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cb0:	e013      	b.n	8007cda <HAL_TIM_PWM_Start+0xfe>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b0c      	cmp	r3, #12
 8007cb6:	d104      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0xe6>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cc0:	e00b      	b.n	8007cda <HAL_TIM_PWM_Start+0xfe>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d104      	bne.n	8007cd2 <HAL_TIM_PWM_Start+0xf6>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd0:	e003      	b.n	8007cda <HAL_TIM_PWM_Start+0xfe>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fd0c 	bl	8008700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a38      	ldr	r2, [pc, #224]	; (8007dd0 <HAL_TIM_PWM_Start+0x1f4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <HAL_TIM_PWM_Start+0x13e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a37      	ldr	r2, [pc, #220]	; (8007dd4 <HAL_TIM_PWM_Start+0x1f8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_TIM_PWM_Start+0x13e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a35      	ldr	r2, [pc, #212]	; (8007dd8 <HAL_TIM_PWM_Start+0x1fc>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIM_PWM_Start+0x13e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a34      	ldr	r2, [pc, #208]	; (8007ddc <HAL_TIM_PWM_Start+0x200>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIM_PWM_Start+0x13e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a32      	ldr	r2, [pc, #200]	; (8007de0 <HAL_TIM_PWM_Start+0x204>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_PWM_Start+0x142>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <HAL_TIM_PWM_Start+0x144>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d007      	beq.n	8007d34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <HAL_TIM_PWM_Start+0x1f4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d01d      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a25      	ldr	r2, [pc, #148]	; (8007de4 <HAL_TIM_PWM_Start+0x208>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a24      	ldr	r2, [pc, #144]	; (8007de8 <HAL_TIM_PWM_Start+0x20c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a22      	ldr	r2, [pc, #136]	; (8007dec <HAL_TIM_PWM_Start+0x210>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <HAL_TIM_PWM_Start+0x1f8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <HAL_TIM_PWM_Start+0x214>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_TIM_PWM_Start+0x1a8>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIM_PWM_Start+0x1fc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d115      	bne.n	8007db0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <HAL_TIM_PWM_Start+0x218>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b06      	cmp	r3, #6
 8007d94:	d015      	beq.n	8007dc2 <HAL_TIM_PWM_Start+0x1e6>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d011      	beq.n	8007dc2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dae:	e008      	b.n	8007dc2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e000      	b.n	8007dc4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40010400 	.word	0x40010400
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	40014400 	.word	0x40014400
 8007de0:	40014800 	.word	0x40014800
 8007de4:	40000400 	.word	0x40000400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	40000c00 	.word	0x40000c00
 8007df0:	40001800 	.word	0x40001800
 8007df4:	00010007 	.word	0x00010007

08007df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0ff      	b.n	8008016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b14      	cmp	r3, #20
 8007e22:	f200 80f0 	bhi.w	8008006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e81 	.word	0x08007e81
 8007e30:	08008007 	.word	0x08008007
 8007e34:	08008007 	.word	0x08008007
 8007e38:	08008007 	.word	0x08008007
 8007e3c:	08007ec1 	.word	0x08007ec1
 8007e40:	08008007 	.word	0x08008007
 8007e44:	08008007 	.word	0x08008007
 8007e48:	08008007 	.word	0x08008007
 8007e4c:	08007f03 	.word	0x08007f03
 8007e50:	08008007 	.word	0x08008007
 8007e54:	08008007 	.word	0x08008007
 8007e58:	08008007 	.word	0x08008007
 8007e5c:	08007f43 	.word	0x08007f43
 8007e60:	08008007 	.word	0x08008007
 8007e64:	08008007 	.word	0x08008007
 8007e68:	08008007 	.word	0x08008007
 8007e6c:	08007f85 	.word	0x08007f85
 8007e70:	08008007 	.word	0x08008007
 8007e74:	08008007 	.word	0x08008007
 8007e78:	08008007 	.word	0x08008007
 8007e7c:	08007fc5 	.word	0x08007fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f964 	bl	8008154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0208 	orr.w	r2, r2, #8
 8007e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0204 	bic.w	r2, r2, #4
 8007eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6999      	ldr	r1, [r3, #24]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	619a      	str	r2, [r3, #24]
      break;
 8007ebe:	e0a5      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f9d4 	bl	8008274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6999      	ldr	r1, [r3, #24]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	021a      	lsls	r2, r3, #8
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	619a      	str	r2, [r3, #24]
      break;
 8007f00:	e084      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fa3d 	bl	8008388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0208 	orr.w	r2, r2, #8
 8007f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69da      	ldr	r2, [r3, #28]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0204 	bic.w	r2, r2, #4
 8007f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69d9      	ldr	r1, [r3, #28]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	61da      	str	r2, [r3, #28]
      break;
 8007f40:	e064      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 faa5 	bl	8008498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69d9      	ldr	r1, [r3, #28]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	021a      	lsls	r2, r3, #8
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	61da      	str	r2, [r3, #28]
      break;
 8007f82:	e043      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 faee 	bl	800856c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0208 	orr.w	r2, r2, #8
 8007f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0204 	bic.w	r2, r2, #4
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fc2:	e023      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fb32 	bl	8008634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	021a      	lsls	r2, r3, #8
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008004:	e002      	b.n	800800c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
      break;
 800800a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a40      	ldr	r2, [pc, #256]	; (8008134 <TIM_Base_SetConfig+0x114>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d00f      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a3d      	ldr	r2, [pc, #244]	; (8008138 <TIM_Base_SetConfig+0x118>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a3c      	ldr	r2, [pc, #240]	; (800813c <TIM_Base_SetConfig+0x11c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a3b      	ldr	r2, [pc, #236]	; (8008140 <TIM_Base_SetConfig+0x120>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a3a      	ldr	r2, [pc, #232]	; (8008144 <TIM_Base_SetConfig+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d108      	bne.n	8008072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2f      	ldr	r2, [pc, #188]	; (8008134 <TIM_Base_SetConfig+0x114>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01f      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008080:	d01b      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a2c      	ldr	r2, [pc, #176]	; (8008138 <TIM_Base_SetConfig+0x118>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d017      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2b      	ldr	r2, [pc, #172]	; (800813c <TIM_Base_SetConfig+0x11c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a2a      	ldr	r2, [pc, #168]	; (8008140 <TIM_Base_SetConfig+0x120>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00f      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a29      	ldr	r2, [pc, #164]	; (8008144 <TIM_Base_SetConfig+0x124>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a28      	ldr	r2, [pc, #160]	; (8008148 <TIM_Base_SetConfig+0x128>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a27      	ldr	r2, [pc, #156]	; (800814c <TIM_Base_SetConfig+0x12c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0x9a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a26      	ldr	r2, [pc, #152]	; (8008150 <TIM_Base_SetConfig+0x130>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a10      	ldr	r2, [pc, #64]	; (8008134 <TIM_Base_SetConfig+0x114>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00f      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a12      	ldr	r2, [pc, #72]	; (8008144 <TIM_Base_SetConfig+0x124>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00b      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a11      	ldr	r2, [pc, #68]	; (8008148 <TIM_Base_SetConfig+0x128>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d007      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a10      	ldr	r2, [pc, #64]	; (800814c <TIM_Base_SetConfig+0x12c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a0f      	ldr	r2, [pc, #60]	; (8008150 <TIM_Base_SetConfig+0x130>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d103      	bne.n	8008120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	615a      	str	r2, [r3, #20]
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40010000 	.word	0x40010000
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800
 8008140:	40000c00 	.word	0x40000c00
 8008144:	40010400 	.word	0x40010400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f023 0201 	bic.w	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4b37      	ldr	r3, [pc, #220]	; (800825c <TIM_OC1_SetConfig+0x108>)
 8008180:	4013      	ands	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 0302 	bic.w	r3, r3, #2
 800819c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a2d      	ldr	r2, [pc, #180]	; (8008260 <TIM_OC1_SetConfig+0x10c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00f      	beq.n	80081d0 <TIM_OC1_SetConfig+0x7c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a2c      	ldr	r2, [pc, #176]	; (8008264 <TIM_OC1_SetConfig+0x110>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00b      	beq.n	80081d0 <TIM_OC1_SetConfig+0x7c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a2b      	ldr	r2, [pc, #172]	; (8008268 <TIM_OC1_SetConfig+0x114>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d007      	beq.n	80081d0 <TIM_OC1_SetConfig+0x7c>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a2a      	ldr	r2, [pc, #168]	; (800826c <TIM_OC1_SetConfig+0x118>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC1_SetConfig+0x7c>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a29      	ldr	r2, [pc, #164]	; (8008270 <TIM_OC1_SetConfig+0x11c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10c      	bne.n	80081ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f023 0308 	bic.w	r3, r3, #8
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <TIM_OC1_SetConfig+0x10c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00f      	beq.n	8008212 <TIM_OC1_SetConfig+0xbe>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a1b      	ldr	r2, [pc, #108]	; (8008264 <TIM_OC1_SetConfig+0x110>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00b      	beq.n	8008212 <TIM_OC1_SetConfig+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1a      	ldr	r2, [pc, #104]	; (8008268 <TIM_OC1_SetConfig+0x114>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d007      	beq.n	8008212 <TIM_OC1_SetConfig+0xbe>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a19      	ldr	r2, [pc, #100]	; (800826c <TIM_OC1_SetConfig+0x118>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d003      	beq.n	8008212 <TIM_OC1_SetConfig+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a18      	ldr	r2, [pc, #96]	; (8008270 <TIM_OC1_SetConfig+0x11c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d111      	bne.n	8008236 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	fffeff8f 	.word	0xfffeff8f
 8008260:	40010000 	.word	0x40010000
 8008264:	40010400 	.word	0x40010400
 8008268:	40014000 	.word	0x40014000
 800826c:	40014400 	.word	0x40014400
 8008270:	40014800 	.word	0x40014800

08008274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0210 	bic.w	r2, r3, #16
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4b34      	ldr	r3, [pc, #208]	; (8008370 <TIM_OC2_SetConfig+0xfc>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0320 	bic.w	r3, r3, #32
 80082be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a29      	ldr	r2, [pc, #164]	; (8008374 <TIM_OC2_SetConfig+0x100>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d003      	beq.n	80082dc <TIM_OC2_SetConfig+0x68>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a28      	ldr	r2, [pc, #160]	; (8008378 <TIM_OC2_SetConfig+0x104>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d10d      	bne.n	80082f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1e      	ldr	r2, [pc, #120]	; (8008374 <TIM_OC2_SetConfig+0x100>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00f      	beq.n	8008320 <TIM_OC2_SetConfig+0xac>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1d      	ldr	r2, [pc, #116]	; (8008378 <TIM_OC2_SetConfig+0x104>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00b      	beq.n	8008320 <TIM_OC2_SetConfig+0xac>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a1c      	ldr	r2, [pc, #112]	; (800837c <TIM_OC2_SetConfig+0x108>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d007      	beq.n	8008320 <TIM_OC2_SetConfig+0xac>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a1b      	ldr	r2, [pc, #108]	; (8008380 <TIM_OC2_SetConfig+0x10c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC2_SetConfig+0xac>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <TIM_OC2_SetConfig+0x110>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d113      	bne.n	8008348 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800832e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	621a      	str	r2, [r3, #32]
}
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	feff8fff 	.word	0xfeff8fff
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40014400 	.word	0x40014400
 8008384:	40014800 	.word	0x40014800

08008388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b33      	ldr	r3, [pc, #204]	; (8008480 <TIM_OC3_SetConfig+0xf8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <TIM_OC3_SetConfig+0xfc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d003      	beq.n	80083ee <TIM_OC3_SetConfig+0x66>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a27      	ldr	r2, [pc, #156]	; (8008488 <TIM_OC3_SetConfig+0x100>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d10d      	bne.n	800840a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <TIM_OC3_SetConfig+0xfc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_OC3_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a1c      	ldr	r2, [pc, #112]	; (8008488 <TIM_OC3_SetConfig+0x100>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_OC3_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a1b      	ldr	r2, [pc, #108]	; (800848c <TIM_OC3_SetConfig+0x104>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_OC3_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <TIM_OC3_SetConfig+0x108>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_OC3_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a19      	ldr	r2, [pc, #100]	; (8008494 <TIM_OC3_SetConfig+0x10c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d113      	bne.n	800845a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	fffeff8f 	.word	0xfffeff8f
 8008484:	40010000 	.word	0x40010000
 8008488:	40010400 	.word	0x40010400
 800848c:	40014000 	.word	0x40014000
 8008490:	40014400 	.word	0x40014400
 8008494:	40014800 	.word	0x40014800

08008498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4b24      	ldr	r3, [pc, #144]	; (8008554 <TIM_OC4_SetConfig+0xbc>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	031b      	lsls	r3, r3, #12
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a19      	ldr	r2, [pc, #100]	; (8008558 <TIM_OC4_SetConfig+0xc0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00f      	beq.n	8008518 <TIM_OC4_SetConfig+0x80>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a18      	ldr	r2, [pc, #96]	; (800855c <TIM_OC4_SetConfig+0xc4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00b      	beq.n	8008518 <TIM_OC4_SetConfig+0x80>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a17      	ldr	r2, [pc, #92]	; (8008560 <TIM_OC4_SetConfig+0xc8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d007      	beq.n	8008518 <TIM_OC4_SetConfig+0x80>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a16      	ldr	r2, [pc, #88]	; (8008564 <TIM_OC4_SetConfig+0xcc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d003      	beq.n	8008518 <TIM_OC4_SetConfig+0x80>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a15      	ldr	r2, [pc, #84]	; (8008568 <TIM_OC4_SetConfig+0xd0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d109      	bne.n	800852c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	019b      	lsls	r3, r3, #6
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	4313      	orrs	r3, r2
 800852a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	621a      	str	r2, [r3, #32]
}
 8008546:	bf00      	nop
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	feff8fff 	.word	0xfeff8fff
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <TIM_OC5_SetConfig+0xb0>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a18      	ldr	r2, [pc, #96]	; (8008620 <TIM_OC5_SetConfig+0xb4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00f      	beq.n	80085e2 <TIM_OC5_SetConfig+0x76>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a17      	ldr	r2, [pc, #92]	; (8008624 <TIM_OC5_SetConfig+0xb8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <TIM_OC5_SetConfig+0x76>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a16      	ldr	r2, [pc, #88]	; (8008628 <TIM_OC5_SetConfig+0xbc>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d007      	beq.n	80085e2 <TIM_OC5_SetConfig+0x76>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a15      	ldr	r2, [pc, #84]	; (800862c <TIM_OC5_SetConfig+0xc0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <TIM_OC5_SetConfig+0x76>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a14      	ldr	r2, [pc, #80]	; (8008630 <TIM_OC5_SetConfig+0xc4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d109      	bne.n	80085f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	621a      	str	r2, [r3, #32]
}
 8008610:	bf00      	nop
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	fffeff8f 	.word	0xfffeff8f
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4b22      	ldr	r3, [pc, #136]	; (80086e8 <TIM_OC6_SetConfig+0xb4>)
 8008660:	4013      	ands	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	051b      	lsls	r3, r3, #20
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a19      	ldr	r2, [pc, #100]	; (80086ec <TIM_OC6_SetConfig+0xb8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00f      	beq.n	80086ac <TIM_OC6_SetConfig+0x78>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <TIM_OC6_SetConfig+0xbc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_OC6_SetConfig+0x78>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <TIM_OC6_SetConfig+0xc0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_OC6_SetConfig+0x78>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a16      	ldr	r2, [pc, #88]	; (80086f8 <TIM_OC6_SetConfig+0xc4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_OC6_SetConfig+0x78>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a15      	ldr	r2, [pc, #84]	; (80086fc <TIM_OC6_SetConfig+0xc8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d109      	bne.n	80086c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	029b      	lsls	r3, r3, #10
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	feff8fff 	.word	0xfeff8fff
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800

08008700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	2201      	movs	r2, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1a      	ldr	r2, [r3, #32]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	43db      	mvns	r3, r3
 8008722:	401a      	ands	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1a      	ldr	r2, [r3, #32]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	fa01 f303 	lsl.w	r3, r1, r3
 8008738:	431a      	orrs	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	621a      	str	r2, [r3, #32]
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008764:	2302      	movs	r3, #2
 8008766:	e065      	b.n	8008834 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d004      	beq.n	80087f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a14      	ldr	r2, [pc, #80]	; (8008844 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d115      	bne.n	8008822 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	051b      	lsls	r3, r3, #20
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40010000 	.word	0x40010000
 8008844:	40010400 	.word	0x40010400

08008848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e042      	b.n	80088e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fa f961 	bl	8002b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2224      	movs	r2, #36	; 0x24
 8008876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0201 	bic.w	r2, r2, #1
 8008888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8c2 	bl	8008a14 <UART_SetConfig>
 8008890:	4603      	mov	r3, r0
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e022      	b.n	80088e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fe1e 	bl	80094e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fea5 	bl	8009628 <UART_CheckIdleState>
 80088de:	4603      	mov	r3, r0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088fe:	2b20      	cmp	r3, #32
 8008900:	f040 8083 	bne.w	8008a0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HAL_UART_Transmit+0x28>
 800890a:	88fb      	ldrh	r3, [r7, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e07b      	b.n	8008a0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <HAL_UART_Transmit+0x3a>
 800891e:	2302      	movs	r3, #2
 8008920:	e074      	b.n	8008a0c <HAL_UART_Transmit+0x124>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2221      	movs	r2, #33	; 0x21
 8008936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800893a:	f7fa fb01 	bl	8002f40 <HAL_GetTick>
 800893e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008958:	d108      	bne.n	800896c <HAL_UART_Transmit+0x84>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	e003      	b.n	8008974 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800897c:	e02c      	b.n	80089d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2200      	movs	r2, #0
 8008986:	2180      	movs	r1, #128	; 0x80
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fe98 	bl	80096be <UART_WaitOnFlagUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e039      	b.n	8008a0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	3302      	adds	r3, #2
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e007      	b.n	80089c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	3301      	adds	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1cc      	bne.n	800897e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2200      	movs	r2, #0
 80089ec:	2140      	movs	r1, #64	; 0x40
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fe65 	bl	80096be <UART_WaitOnFlagUntilTimeout>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e006      	b.n	8008a0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e000      	b.n	8008a0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a0a:	2302      	movs	r3, #2
  }
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a18:	b092      	sub	sp, #72	; 0x48
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4bbe      	ldr	r3, [pc, #760]	; (8008d3c <UART_SetConfig+0x328>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a4c:	430b      	orrs	r3, r1
 8008a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4ab3      	ldr	r2, [pc, #716]	; (8008d40 <UART_SetConfig+0x32c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	4baf      	ldr	r3, [pc, #700]	; (8008d44 <UART_SetConfig+0x330>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	f023 010f 	bic.w	r1, r3, #15
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4aa6      	ldr	r2, [pc, #664]	; (8008d48 <UART_SetConfig+0x334>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d177      	bne.n	8008ba4 <UART_SetConfig+0x190>
 8008ab4:	4ba5      	ldr	r3, [pc, #660]	; (8008d4c <UART_SetConfig+0x338>)
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008abc:	2b28      	cmp	r3, #40	; 0x28
 8008abe:	d86d      	bhi.n	8008b9c <UART_SetConfig+0x188>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <UART_SetConfig+0xb4>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b9d 	.word	0x08008b9d
 8008ad0:	08008b9d 	.word	0x08008b9d
 8008ad4:	08008b9d 	.word	0x08008b9d
 8008ad8:	08008b9d 	.word	0x08008b9d
 8008adc:	08008b9d 	.word	0x08008b9d
 8008ae0:	08008b9d 	.word	0x08008b9d
 8008ae4:	08008b9d 	.word	0x08008b9d
 8008ae8:	08008b75 	.word	0x08008b75
 8008aec:	08008b9d 	.word	0x08008b9d
 8008af0:	08008b9d 	.word	0x08008b9d
 8008af4:	08008b9d 	.word	0x08008b9d
 8008af8:	08008b9d 	.word	0x08008b9d
 8008afc:	08008b9d 	.word	0x08008b9d
 8008b00:	08008b9d 	.word	0x08008b9d
 8008b04:	08008b9d 	.word	0x08008b9d
 8008b08:	08008b7d 	.word	0x08008b7d
 8008b0c:	08008b9d 	.word	0x08008b9d
 8008b10:	08008b9d 	.word	0x08008b9d
 8008b14:	08008b9d 	.word	0x08008b9d
 8008b18:	08008b9d 	.word	0x08008b9d
 8008b1c:	08008b9d 	.word	0x08008b9d
 8008b20:	08008b9d 	.word	0x08008b9d
 8008b24:	08008b9d 	.word	0x08008b9d
 8008b28:	08008b85 	.word	0x08008b85
 8008b2c:	08008b9d 	.word	0x08008b9d
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008b9d 	.word	0x08008b9d
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008b9d 	.word	0x08008b9d
 8008b40:	08008b9d 	.word	0x08008b9d
 8008b44:	08008b9d 	.word	0x08008b9d
 8008b48:	08008b8d 	.word	0x08008b8d
 8008b4c:	08008b9d 	.word	0x08008b9d
 8008b50:	08008b9d 	.word	0x08008b9d
 8008b54:	08008b9d 	.word	0x08008b9d
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008b9d 	.word	0x08008b9d
 8008b64:	08008b9d 	.word	0x08008b9d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e222      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e21e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e21a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8a:	e216      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b92:	e212      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b94:	2340      	movs	r3, #64	; 0x40
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9a:	e20e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b9c:	2380      	movs	r3, #128	; 0x80
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba2:	e20a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a69      	ldr	r2, [pc, #420]	; (8008d50 <UART_SetConfig+0x33c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d130      	bne.n	8008c10 <UART_SetConfig+0x1fc>
 8008bae:	4b67      	ldr	r3, [pc, #412]	; (8008d4c <UART_SetConfig+0x338>)
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d826      	bhi.n	8008c08 <UART_SetConfig+0x1f4>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x1ac>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bd9 	.word	0x08008bd9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be9 	.word	0x08008be9
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e1ec      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e1e8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e1e4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e1e0      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfe:	e1dc      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c06:	e1d8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e1d4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a4f      	ldr	r2, [pc, #316]	; (8008d54 <UART_SetConfig+0x340>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d130      	bne.n	8008c7c <UART_SetConfig+0x268>
 8008c1a:	4b4c      	ldr	r3, [pc, #304]	; (8008d4c <UART_SetConfig+0x338>)
 8008c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	d826      	bhi.n	8008c74 <UART_SetConfig+0x260>
 8008c26:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <UART_SetConfig+0x218>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c45 	.word	0x08008c45
 8008c30:	08008c4d 	.word	0x08008c4d
 8008c34:	08008c55 	.word	0x08008c55
 8008c38:	08008c5d 	.word	0x08008c5d
 8008c3c:	08008c65 	.word	0x08008c65
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e1b6      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e1b2      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e1ae      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e1aa      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c64:	2320      	movs	r3, #32
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6a:	e1a6      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c6c:	2340      	movs	r3, #64	; 0x40
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c72:	e1a2      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e19e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a35      	ldr	r2, [pc, #212]	; (8008d58 <UART_SetConfig+0x344>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d130      	bne.n	8008ce8 <UART_SetConfig+0x2d4>
 8008c86:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <UART_SetConfig+0x338>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	2b05      	cmp	r3, #5
 8008c90:	d826      	bhi.n	8008ce0 <UART_SetConfig+0x2cc>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x284>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cb1 	.word	0x08008cb1
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cc1 	.word	0x08008cc1
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cd1 	.word	0x08008cd1
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e180      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e17c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e178      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e174      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e170      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e16c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e168      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1b      	ldr	r2, [pc, #108]	; (8008d5c <UART_SetConfig+0x348>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d142      	bne.n	8008d78 <UART_SetConfig+0x364>
 8008cf2:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <UART_SetConfig+0x338>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	d838      	bhi.n	8008d70 <UART_SetConfig+0x35c>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <UART_SetConfig+0x2f0>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d61 	.word	0x08008d61
 8008d18:	08008d69 	.word	0x08008d69
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d22:	e14a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d24:	2304      	movs	r3, #4
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2a:	e146      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d32:	e142      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d34:	2310      	movs	r3, #16
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e13e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d3c:	cfff69f3 	.word	0xcfff69f3
 8008d40:	58000c00 	.word	0x58000c00
 8008d44:	11fff4ff 	.word	0x11fff4ff
 8008d48:	40011000 	.word	0x40011000
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40004800 	.word	0x40004800
 8008d58:	40004c00 	.word	0x40004c00
 8008d5c:	40005000 	.word	0x40005000
 8008d60:	2320      	movs	r3, #32
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d66:	e128      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6e:	e124      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d70:	2380      	movs	r3, #128	; 0x80
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d76:	e120      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4acb      	ldr	r2, [pc, #812]	; (80090ac <UART_SetConfig+0x698>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d176      	bne.n	8008e70 <UART_SetConfig+0x45c>
 8008d82:	4bcb      	ldr	r3, [pc, #812]	; (80090b0 <UART_SetConfig+0x69c>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d8a:	2b28      	cmp	r3, #40	; 0x28
 8008d8c:	d86c      	bhi.n	8008e68 <UART_SetConfig+0x454>
 8008d8e:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <UART_SetConfig+0x380>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008e39 	.word	0x08008e39
 8008d98:	08008e69 	.word	0x08008e69
 8008d9c:	08008e69 	.word	0x08008e69
 8008da0:	08008e69 	.word	0x08008e69
 8008da4:	08008e69 	.word	0x08008e69
 8008da8:	08008e69 	.word	0x08008e69
 8008dac:	08008e69 	.word	0x08008e69
 8008db0:	08008e69 	.word	0x08008e69
 8008db4:	08008e41 	.word	0x08008e41
 8008db8:	08008e69 	.word	0x08008e69
 8008dbc:	08008e69 	.word	0x08008e69
 8008dc0:	08008e69 	.word	0x08008e69
 8008dc4:	08008e69 	.word	0x08008e69
 8008dc8:	08008e69 	.word	0x08008e69
 8008dcc:	08008e69 	.word	0x08008e69
 8008dd0:	08008e69 	.word	0x08008e69
 8008dd4:	08008e49 	.word	0x08008e49
 8008dd8:	08008e69 	.word	0x08008e69
 8008ddc:	08008e69 	.word	0x08008e69
 8008de0:	08008e69 	.word	0x08008e69
 8008de4:	08008e69 	.word	0x08008e69
 8008de8:	08008e69 	.word	0x08008e69
 8008dec:	08008e69 	.word	0x08008e69
 8008df0:	08008e69 	.word	0x08008e69
 8008df4:	08008e51 	.word	0x08008e51
 8008df8:	08008e69 	.word	0x08008e69
 8008dfc:	08008e69 	.word	0x08008e69
 8008e00:	08008e69 	.word	0x08008e69
 8008e04:	08008e69 	.word	0x08008e69
 8008e08:	08008e69 	.word	0x08008e69
 8008e0c:	08008e69 	.word	0x08008e69
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e59 	.word	0x08008e59
 8008e18:	08008e69 	.word	0x08008e69
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e69 	.word	0x08008e69
 8008e28:	08008e69 	.word	0x08008e69
 8008e2c:	08008e69 	.word	0x08008e69
 8008e30:	08008e69 	.word	0x08008e69
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3e:	e0bc      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e40:	2304      	movs	r3, #4
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e46:	e0b8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4e:	e0b4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e56:	e0b0      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5e:	e0ac      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e60:	2340      	movs	r3, #64	; 0x40
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e66:	e0a8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e68:	2380      	movs	r3, #128	; 0x80
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6e:	e0a4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a8f      	ldr	r2, [pc, #572]	; (80090b4 <UART_SetConfig+0x6a0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d130      	bne.n	8008edc <UART_SetConfig+0x4c8>
 8008e7a:	4b8d      	ldr	r3, [pc, #564]	; (80090b0 <UART_SetConfig+0x69c>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d826      	bhi.n	8008ed4 <UART_SetConfig+0x4c0>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0x478>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ea5 	.word	0x08008ea5
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008ec5 	.word	0x08008ec5
 8008ea0:	08008ecd 	.word	0x08008ecd
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e086      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb2:	e082      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eba:	e07e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec2:	e07a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ec4:	2320      	movs	r3, #32
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eca:	e076      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed2:	e072      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ed4:	2380      	movs	r3, #128	; 0x80
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eda:	e06e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a75      	ldr	r2, [pc, #468]	; (80090b8 <UART_SetConfig+0x6a4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d130      	bne.n	8008f48 <UART_SetConfig+0x534>
 8008ee6:	4b72      	ldr	r3, [pc, #456]	; (80090b0 <UART_SetConfig+0x69c>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d826      	bhi.n	8008f40 <UART_SetConfig+0x52c>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <UART_SetConfig+0x4e4>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f19 	.word	0x08008f19
 8008f00:	08008f21 	.word	0x08008f21
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f31 	.word	0x08008f31
 8008f0c:	08008f39 	.word	0x08008f39
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e050      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1e:	e04c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f20:	2308      	movs	r3, #8
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f26:	e048      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e044      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f30:	2320      	movs	r3, #32
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e040      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f38:	2340      	movs	r3, #64	; 0x40
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e03c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e038      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a5b      	ldr	r2, [pc, #364]	; (80090bc <UART_SetConfig+0x6a8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d130      	bne.n	8008fb4 <UART_SetConfig+0x5a0>
 8008f52:	4b57      	ldr	r3, [pc, #348]	; (80090b0 <UART_SetConfig+0x69c>)
 8008f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b05      	cmp	r3, #5
 8008f5c:	d826      	bhi.n	8008fac <UART_SetConfig+0x598>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0x550>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f85 	.word	0x08008f85
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	08008f95 	.word	0x08008f95
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e01a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e016      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e012      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e00e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e00a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e006      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fac:	2380      	movs	r3, #128	; 0x80
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e002      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a3f      	ldr	r2, [pc, #252]	; (80090bc <UART_SetConfig+0x6a8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	f040 80f8 	bne.w	80091b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	dc46      	bgt.n	800905c <UART_SetConfig+0x648>
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f2c0 8082 	blt.w	80090d8 <UART_SetConfig+0x6c4>
 8008fd4:	3b02      	subs	r3, #2
 8008fd6:	2b1e      	cmp	r3, #30
 8008fd8:	d87e      	bhi.n	80090d8 <UART_SetConfig+0x6c4>
 8008fda:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <UART_SetConfig+0x5cc>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	080090d9 	.word	0x080090d9
 8008fe8:	0800906b 	.word	0x0800906b
 8008fec:	080090d9 	.word	0x080090d9
 8008ff0:	080090d9 	.word	0x080090d9
 8008ff4:	080090d9 	.word	0x080090d9
 8008ff8:	0800907b 	.word	0x0800907b
 8008ffc:	080090d9 	.word	0x080090d9
 8009000:	080090d9 	.word	0x080090d9
 8009004:	080090d9 	.word	0x080090d9
 8009008:	080090d9 	.word	0x080090d9
 800900c:	080090d9 	.word	0x080090d9
 8009010:	080090d9 	.word	0x080090d9
 8009014:	080090d9 	.word	0x080090d9
 8009018:	0800908b 	.word	0x0800908b
 800901c:	080090d9 	.word	0x080090d9
 8009020:	080090d9 	.word	0x080090d9
 8009024:	080090d9 	.word	0x080090d9
 8009028:	080090d9 	.word	0x080090d9
 800902c:	080090d9 	.word	0x080090d9
 8009030:	080090d9 	.word	0x080090d9
 8009034:	080090d9 	.word	0x080090d9
 8009038:	080090d9 	.word	0x080090d9
 800903c:	080090d9 	.word	0x080090d9
 8009040:	080090d9 	.word	0x080090d9
 8009044:	080090d9 	.word	0x080090d9
 8009048:	080090d9 	.word	0x080090d9
 800904c:	080090d9 	.word	0x080090d9
 8009050:	080090d9 	.word	0x080090d9
 8009054:	080090d9 	.word	0x080090d9
 8009058:	080090cb 	.word	0x080090cb
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d037      	beq.n	80090d0 <UART_SetConfig+0x6bc>
 8009060:	e03a      	b.n	80090d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009062:	f7fd f93b 	bl	80062dc <HAL_RCCEx_GetD3PCLK1Freq>
 8009066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009068:	e03c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f7fd f94a 	bl	8006308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009078:	e034      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907a:	f107 0318 	add.w	r3, r7, #24
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd fa96 	bl	80065b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009088:	e02c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <UART_SetConfig+0x69c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009096:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <UART_SetConfig+0x69c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	4a07      	ldr	r2, [pc, #28]	; (80090c0 <UART_SetConfig+0x6ac>)
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a8:	e01c      	b.n	80090e4 <UART_SetConfig+0x6d0>
 80090aa:	bf00      	nop
 80090ac:	40011400 	.word	0x40011400
 80090b0:	58024400 	.word	0x58024400
 80090b4:	40007800 	.word	0x40007800
 80090b8:	40007c00 	.word	0x40007c00
 80090bc:	58000c00 	.word	0x58000c00
 80090c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b9d      	ldr	r3, [pc, #628]	; (800933c <UART_SetConfig+0x928>)
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c8:	e00c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090ca:	4b9d      	ldr	r3, [pc, #628]	; (8009340 <UART_SetConfig+0x92c>)
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ce:	e009      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d6:	e005      	b.n	80090e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 81de 	beq.w	80094a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	4a94      	ldr	r2, [pc, #592]	; (8009344 <UART_SetConfig+0x930>)
 80090f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80090fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910c:	429a      	cmp	r2, r3
 800910e:	d305      	bcc.n	800911c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009118:	429a      	cmp	r2, r3
 800911a:	d903      	bls.n	8009124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009122:	e1c1      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	2200      	movs	r2, #0
 8009128:	60bb      	str	r3, [r7, #8]
 800912a:	60fa      	str	r2, [r7, #12]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	4a84      	ldr	r2, [pc, #528]	; (8009344 <UART_SetConfig+0x930>)
 8009132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009136:	b29b      	uxth	r3, r3
 8009138:	2200      	movs	r2, #0
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	607a      	str	r2, [r7, #4]
 800913e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009146:	f7f7 f923 	bl	8000390 <__aeabi_uldivmod>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	020b      	lsls	r3, r1, #8
 800915c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009160:	0202      	lsls	r2, r0, #8
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	6849      	ldr	r1, [r1, #4]
 8009166:	0849      	lsrs	r1, r1, #1
 8009168:	2000      	movs	r0, #0
 800916a:	460c      	mov	r4, r1
 800916c:	4605      	mov	r5, r0
 800916e:	eb12 0804 	adds.w	r8, r2, r4
 8009172:	eb43 0905 	adc.w	r9, r3, r5
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	469a      	mov	sl, r3
 800917e:	4693      	mov	fp, r2
 8009180:	4652      	mov	r2, sl
 8009182:	465b      	mov	r3, fp
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 f902 	bl	8000390 <__aeabi_uldivmod>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4613      	mov	r3, r2
 8009192:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800919a:	d308      	bcc.n	80091ae <UART_SetConfig+0x79a>
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a2:	d204      	bcs.n	80091ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091aa:	60da      	str	r2, [r3, #12]
 80091ac:	e17c      	b.n	80094a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091b4:	e178      	b.n	80094a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091be:	f040 80c5 	bne.w	800934c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80091c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	dc48      	bgt.n	800925c <UART_SetConfig+0x848>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db7b      	blt.n	80092c6 <UART_SetConfig+0x8b2>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d879      	bhi.n	80092c6 <UART_SetConfig+0x8b2>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <UART_SetConfig+0x7c4>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	08009263 	.word	0x08009263
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	080092c7 	.word	0x080092c7
 80091e4:	080092c7 	.word	0x080092c7
 80091e8:	08009273 	.word	0x08009273
 80091ec:	080092c7 	.word	0x080092c7
 80091f0:	080092c7 	.word	0x080092c7
 80091f4:	080092c7 	.word	0x080092c7
 80091f8:	08009283 	.word	0x08009283
 80091fc:	080092c7 	.word	0x080092c7
 8009200:	080092c7 	.word	0x080092c7
 8009204:	080092c7 	.word	0x080092c7
 8009208:	080092c7 	.word	0x080092c7
 800920c:	080092c7 	.word	0x080092c7
 8009210:	080092c7 	.word	0x080092c7
 8009214:	080092c7 	.word	0x080092c7
 8009218:	08009293 	.word	0x08009293
 800921c:	080092c7 	.word	0x080092c7
 8009220:	080092c7 	.word	0x080092c7
 8009224:	080092c7 	.word	0x080092c7
 8009228:	080092c7 	.word	0x080092c7
 800922c:	080092c7 	.word	0x080092c7
 8009230:	080092c7 	.word	0x080092c7
 8009234:	080092c7 	.word	0x080092c7
 8009238:	080092c7 	.word	0x080092c7
 800923c:	080092c7 	.word	0x080092c7
 8009240:	080092c7 	.word	0x080092c7
 8009244:	080092c7 	.word	0x080092c7
 8009248:	080092c7 	.word	0x080092c7
 800924c:	080092c7 	.word	0x080092c7
 8009250:	080092c7 	.word	0x080092c7
 8009254:	080092c7 	.word	0x080092c7
 8009258:	080092b9 	.word	0x080092b9
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d02e      	beq.n	80092be <UART_SetConfig+0x8aa>
 8009260:	e031      	b.n	80092c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009262:	f7fc f8c9 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8009266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009268:	e033      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800926a:	f7fc f8db 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 800926e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009270:	e02f      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009276:	4618      	mov	r0, r3
 8009278:	f7fd f846 	bl	8006308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009280:	e027      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009282:	f107 0318 	add.w	r3, r7, #24
 8009286:	4618      	mov	r0, r3
 8009288:	f7fd f992 	bl	80065b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009290:	e01f      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009292:	4b2d      	ldr	r3, [pc, #180]	; (8009348 <UART_SetConfig+0x934>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800929e:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <UART_SetConfig+0x934>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	08db      	lsrs	r3, r3, #3
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	4a24      	ldr	r2, [pc, #144]	; (800933c <UART_SetConfig+0x928>)
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b0:	e00f      	b.n	80092d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <UART_SetConfig+0x928>)
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b6:	e00c      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092b8:	4b21      	ldr	r3, [pc, #132]	; (8009340 <UART_SetConfig+0x92c>)
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c4:	e005      	b.n	80092d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80092d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80e7 	beq.w	80094a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	4a19      	ldr	r2, [pc, #100]	; (8009344 <UART_SetConfig+0x930>)
 80092e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	005a      	lsls	r2, r3, #1
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	441a      	add	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	2b0f      	cmp	r3, #15
 8009304:	d916      	bls.n	8009334 <UART_SetConfig+0x920>
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930c:	d212      	bcs.n	8009334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	b29b      	uxth	r3, r3
 8009312:	f023 030f 	bic.w	r3, r3, #15
 8009316:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	b29b      	uxth	r3, r3
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	b29a      	uxth	r2, r3
 8009324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009326:	4313      	orrs	r3, r2
 8009328:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009330:	60da      	str	r2, [r3, #12]
 8009332:	e0b9      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800933a:	e0b5      	b.n	80094a8 <UART_SetConfig+0xa94>
 800933c:	03d09000 	.word	0x03d09000
 8009340:	003d0900 	.word	0x003d0900
 8009344:	0800cf78 	.word	0x0800cf78
 8009348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800934c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009350:	2b20      	cmp	r3, #32
 8009352:	dc49      	bgt.n	80093e8 <UART_SetConfig+0x9d4>
 8009354:	2b00      	cmp	r3, #0
 8009356:	db7c      	blt.n	8009452 <UART_SetConfig+0xa3e>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d87a      	bhi.n	8009452 <UART_SetConfig+0xa3e>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <UART_SetConfig+0x950>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	080093ef 	.word	0x080093ef
 8009368:	080093f7 	.word	0x080093f7
 800936c:	08009453 	.word	0x08009453
 8009370:	08009453 	.word	0x08009453
 8009374:	080093ff 	.word	0x080093ff
 8009378:	08009453 	.word	0x08009453
 800937c:	08009453 	.word	0x08009453
 8009380:	08009453 	.word	0x08009453
 8009384:	0800940f 	.word	0x0800940f
 8009388:	08009453 	.word	0x08009453
 800938c:	08009453 	.word	0x08009453
 8009390:	08009453 	.word	0x08009453
 8009394:	08009453 	.word	0x08009453
 8009398:	08009453 	.word	0x08009453
 800939c:	08009453 	.word	0x08009453
 80093a0:	08009453 	.word	0x08009453
 80093a4:	0800941f 	.word	0x0800941f
 80093a8:	08009453 	.word	0x08009453
 80093ac:	08009453 	.word	0x08009453
 80093b0:	08009453 	.word	0x08009453
 80093b4:	08009453 	.word	0x08009453
 80093b8:	08009453 	.word	0x08009453
 80093bc:	08009453 	.word	0x08009453
 80093c0:	08009453 	.word	0x08009453
 80093c4:	08009453 	.word	0x08009453
 80093c8:	08009453 	.word	0x08009453
 80093cc:	08009453 	.word	0x08009453
 80093d0:	08009453 	.word	0x08009453
 80093d4:	08009453 	.word	0x08009453
 80093d8:	08009453 	.word	0x08009453
 80093dc:	08009453 	.word	0x08009453
 80093e0:	08009453 	.word	0x08009453
 80093e4:	08009445 	.word	0x08009445
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d02e      	beq.n	800944a <UART_SetConfig+0xa36>
 80093ec:	e031      	b.n	8009452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fc f803 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80093f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093f4:	e033      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f6:	f7fc f815 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 80093fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093fc:	e02f      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fc ff80 	bl	8006308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940c:	e027      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f7fd f8cc 	bl	80065b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941c:	e01f      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941e:	4b2d      	ldr	r3, [pc, #180]	; (80094d4 <UART_SetConfig+0xac0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942a:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <UART_SetConfig+0xac0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	4a28      	ldr	r2, [pc, #160]	; (80094d8 <UART_SetConfig+0xac4>)
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800943c:	e00f      	b.n	800945e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <UART_SetConfig+0xac4>)
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009442:	e00c      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <UART_SetConfig+0xac8>)
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	e009      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009450:	e005      	b.n	800945e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800945c:	bf00      	nop
    }

    if (pclk != 0U)
 800945e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d021      	beq.n	80094a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	4a1d      	ldr	r2, [pc, #116]	; (80094e0 <UART_SetConfig+0xacc>)
 800946a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800946e:	461a      	mov	r2, r3
 8009470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009472:	fbb3 f2f2 	udiv	r2, r3, r2
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	441a      	add	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	fbb2 f3f3 	udiv	r3, r2, r3
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d909      	bls.n	80094a2 <UART_SetConfig+0xa8e>
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009494:	d205      	bcs.n	80094a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	b29a      	uxth	r2, r3
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	e002      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2200      	movs	r2, #0
 80094bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80094c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3748      	adds	r7, #72	; 0x48
 80094cc:	46bd      	mov	sp, r7
 80094ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094d2:	bf00      	nop
 80094d4:	58024400 	.word	0x58024400
 80094d8:	03d09000 	.word	0x03d09000
 80094dc:	003d0900 	.word	0x003d0900
 80094e0:	0800cf78 	.word	0x0800cf78

080094e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01a      	beq.n	80095fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e2:	d10a      	bne.n	80095fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	605a      	str	r2, [r3, #4]
  }
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af02      	add	r7, sp, #8
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009638:	f7f9 fc82 	bl	8002f40 <HAL_GetTick>
 800963c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b08      	cmp	r3, #8
 800964a:	d10e      	bne.n	800966a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f82f 	bl	80096be <UART_WaitOnFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e025      	b.n	80096b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b04      	cmp	r3, #4
 8009676:	d10e      	bne.n	8009696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f819 	bl	80096be <UART_WaitOnFlagUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e00f      	b.n	80096b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ce:	e0a9      	b.n	8009824 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	f000 80a5 	beq.w	8009824 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096da:	f7f9 fc31 	bl	8002f40 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d302      	bcc.n	80096f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80096ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d140      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009704:	667b      	str	r3, [r7, #100]	; 0x64
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009710:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800971c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e6      	bne.n	80096f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	663b      	str	r3, [r7, #96]	; 0x60
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009742:	64ba      	str	r2, [r7, #72]	; 0x48
 8009744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e5      	bne.n	8009722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e069      	b.n	8009846 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d051      	beq.n	8009824 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800978a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800978e:	d149      	bne.n	8009824 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	e853 3f00 	ldrex	r3, [r3]
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097c0:	e841 2300 	strex	r3, r2, [r1]
 80097c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e6      	bne.n	800979a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	e853 3f00 	ldrex	r3, [r3]
 80097da:	613b      	str	r3, [r7, #16]
   return(result);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f023 0301 	bic.w	r3, r3, #1
 80097e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3308      	adds	r3, #8
 80097ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097ec:	623a      	str	r2, [r7, #32]
 80097ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	69f9      	ldr	r1, [r7, #28]
 80097f2:	6a3a      	ldr	r2, [r7, #32]
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e5      	bne.n	80097cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2220      	movs	r2, #32
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e010      	b.n	8009846 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	69da      	ldr	r2, [r3, #28]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4013      	ands	r3, r2
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	bf0c      	ite	eq
 8009834:	2301      	moveq	r3, #1
 8009836:	2300      	movne	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	461a      	mov	r2, r3
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	429a      	cmp	r2, r3
 8009840:	f43f af46 	beq.w	80096d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3770      	adds	r7, #112	; 0x70
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_UARTEx_DisableFifoMode+0x16>
 8009860:	2302      	movs	r3, #2
 8009862:	e027      	b.n	80098b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2224      	movs	r2, #36	; 0x24
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009892:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098d4:	2302      	movs	r3, #2
 80098d6:	e02d      	b.n	8009934 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2224      	movs	r2, #36	; 0x24
 80098e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0201 	bic.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f84f 	bl	80099b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009950:	2302      	movs	r3, #2
 8009952:	e02d      	b.n	80099b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2224      	movs	r2, #36	; 0x24
 8009960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0201 	bic.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f811 	bl	80099b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d108      	bne.n	80099da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099d8:	e031      	b.n	8009a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099da:	2310      	movs	r3, #16
 80099dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099de:	2310      	movs	r3, #16
 80099e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	0e5b      	lsrs	r3, r3, #25
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	0f5b      	lsrs	r3, r3, #29
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f003 0307 	and.w	r3, r3, #7
 8009a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	7b3a      	ldrb	r2, [r7, #12]
 8009a06:	4911      	ldr	r1, [pc, #68]	; (8009a4c <UARTEx_SetNbDataToProcess+0x94>)
 8009a08:	5c8a      	ldrb	r2, [r1, r2]
 8009a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a0e:	7b3a      	ldrb	r2, [r7, #12]
 8009a10:	490f      	ldr	r1, [pc, #60]	; (8009a50 <UARTEx_SetNbDataToProcess+0x98>)
 8009a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	7b7a      	ldrb	r2, [r7, #13]
 8009a24:	4909      	ldr	r1, [pc, #36]	; (8009a4c <UARTEx_SetNbDataToProcess+0x94>)
 8009a26:	5c8a      	ldrb	r2, [r1, r2]
 8009a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a2c:	7b7a      	ldrb	r2, [r7, #13]
 8009a2e:	4908      	ldr	r1, [pc, #32]	; (8009a50 <UARTEx_SetNbDataToProcess+0x98>)
 8009a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	0800cf90 	.word	0x0800cf90
 8009a50:	0800cf98 	.word	0x0800cf98

08009a54 <__errno>:
 8009a54:	4b01      	ldr	r3, [pc, #4]	; (8009a5c <__errno+0x8>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	24000038 	.word	0x24000038

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4d0d      	ldr	r5, [pc, #52]	; (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	; (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1b64      	subs	r4, r4, r5
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4d0b      	ldr	r5, [pc, #44]	; (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	; (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f002 ff1e 	bl	800c8b4 <_init>
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	42a6      	cmp	r6, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a88:	4798      	blx	r3
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a92:	4798      	blx	r3
 8009a94:	3601      	adds	r6, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	0800d384 	.word	0x0800d384
 8009a9c:	0800d384 	.word	0x0800d384
 8009aa0:	0800d384 	.word	0x0800d384
 8009aa4:	0800d388 	.word	0x0800d388

08009aa8 <memcpy>:
 8009aa8:	440a      	add	r2, r1
 8009aaa:	4291      	cmp	r1, r2
 8009aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ab0:	d100      	bne.n	8009ab4 <memcpy+0xc>
 8009ab2:	4770      	bx	lr
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009abe:	4291      	cmp	r1, r2
 8009ac0:	d1f9      	bne.n	8009ab6 <memcpy+0xe>
 8009ac2:	bd10      	pop	{r4, pc}

08009ac4 <memset>:
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d100      	bne.n	8009ace <memset+0xa>
 8009acc:	4770      	bx	lr
 8009ace:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad2:	e7f9      	b.n	8009ac8 <memset+0x4>

08009ad4 <__cvt>:
 8009ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad6:	ed2d 8b02 	vpush	{d8}
 8009ada:	eeb0 8b40 	vmov.f64	d8, d0
 8009ade:	b085      	sub	sp, #20
 8009ae0:	4617      	mov	r7, r2
 8009ae2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009ae4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009ae6:	ee18 2a90 	vmov	r2, s17
 8009aea:	f025 0520 	bic.w	r5, r5, #32
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	bfb6      	itet	lt
 8009af2:	222d      	movlt	r2, #45	; 0x2d
 8009af4:	2200      	movge	r2, #0
 8009af6:	eeb1 8b40 	vneglt.f64	d8, d0
 8009afa:	2d46      	cmp	r5, #70	; 0x46
 8009afc:	460c      	mov	r4, r1
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	d004      	beq.n	8009b0c <__cvt+0x38>
 8009b02:	2d45      	cmp	r5, #69	; 0x45
 8009b04:	d100      	bne.n	8009b08 <__cvt+0x34>
 8009b06:	3401      	adds	r4, #1
 8009b08:	2102      	movs	r1, #2
 8009b0a:	e000      	b.n	8009b0e <__cvt+0x3a>
 8009b0c:	2103      	movs	r1, #3
 8009b0e:	ab03      	add	r3, sp, #12
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	ab02      	add	r3, sp, #8
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	4622      	mov	r2, r4
 8009b18:	4633      	mov	r3, r6
 8009b1a:	eeb0 0b48 	vmov.f64	d0, d8
 8009b1e:	f000 fe4b 	bl	800a7b8 <_dtoa_r>
 8009b22:	2d47      	cmp	r5, #71	; 0x47
 8009b24:	d101      	bne.n	8009b2a <__cvt+0x56>
 8009b26:	07fb      	lsls	r3, r7, #31
 8009b28:	d51a      	bpl.n	8009b60 <__cvt+0x8c>
 8009b2a:	2d46      	cmp	r5, #70	; 0x46
 8009b2c:	eb00 0204 	add.w	r2, r0, r4
 8009b30:	d10c      	bne.n	8009b4c <__cvt+0x78>
 8009b32:	7803      	ldrb	r3, [r0, #0]
 8009b34:	2b30      	cmp	r3, #48	; 0x30
 8009b36:	d107      	bne.n	8009b48 <__cvt+0x74>
 8009b38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	bf1c      	itt	ne
 8009b42:	f1c4 0401 	rsbne	r4, r4, #1
 8009b46:	6034      	strne	r4, [r6, #0]
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	441a      	add	r2, r3
 8009b4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b54:	bf08      	it	eq
 8009b56:	9203      	streq	r2, [sp, #12]
 8009b58:	2130      	movs	r1, #48	; 0x30
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d307      	bcc.n	8009b70 <__cvt+0x9c>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b64:	1a1b      	subs	r3, r3, r0
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	b005      	add	sp, #20
 8009b6a:	ecbd 8b02 	vpop	{d8}
 8009b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b70:	1c5c      	adds	r4, r3, #1
 8009b72:	9403      	str	r4, [sp, #12]
 8009b74:	7019      	strb	r1, [r3, #0]
 8009b76:	e7f0      	b.n	8009b5a <__cvt+0x86>

08009b78 <__exponent>:
 8009b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	bfb8      	it	lt
 8009b80:	4249      	neglt	r1, r1
 8009b82:	f803 2b02 	strb.w	r2, [r3], #2
 8009b86:	bfb4      	ite	lt
 8009b88:	222d      	movlt	r2, #45	; 0x2d
 8009b8a:	222b      	movge	r2, #43	; 0x2b
 8009b8c:	2909      	cmp	r1, #9
 8009b8e:	7042      	strb	r2, [r0, #1]
 8009b90:	dd2a      	ble.n	8009be8 <__exponent+0x70>
 8009b92:	f10d 0407 	add.w	r4, sp, #7
 8009b96:	46a4      	mov	ip, r4
 8009b98:	270a      	movs	r7, #10
 8009b9a:	46a6      	mov	lr, r4
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ba2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ba6:	3530      	adds	r5, #48	; 0x30
 8009ba8:	2a63      	cmp	r2, #99	; 0x63
 8009baa:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	dcf1      	bgt.n	8009b9a <__exponent+0x22>
 8009bb6:	3130      	adds	r1, #48	; 0x30
 8009bb8:	f1ae 0502 	sub.w	r5, lr, #2
 8009bbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009bc0:	1c44      	adds	r4, r0, #1
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4561      	cmp	r1, ip
 8009bc6:	d30a      	bcc.n	8009bde <__exponent+0x66>
 8009bc8:	f10d 0209 	add.w	r2, sp, #9
 8009bcc:	eba2 020e 	sub.w	r2, r2, lr
 8009bd0:	4565      	cmp	r5, ip
 8009bd2:	bf88      	it	hi
 8009bd4:	2200      	movhi	r2, #0
 8009bd6:	4413      	add	r3, r2
 8009bd8:	1a18      	subs	r0, r3, r0
 8009bda:	b003      	add	sp, #12
 8009bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009be2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009be6:	e7ed      	b.n	8009bc4 <__exponent+0x4c>
 8009be8:	2330      	movs	r3, #48	; 0x30
 8009bea:	3130      	adds	r1, #48	; 0x30
 8009bec:	7083      	strb	r3, [r0, #2]
 8009bee:	70c1      	strb	r1, [r0, #3]
 8009bf0:	1d03      	adds	r3, r0, #4
 8009bf2:	e7f1      	b.n	8009bd8 <__exponent+0x60>
 8009bf4:	0000      	movs	r0, r0
	...

08009bf8 <_printf_float>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b08b      	sub	sp, #44	; 0x2c
 8009bfe:	460c      	mov	r4, r1
 8009c00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009c04:	4616      	mov	r6, r2
 8009c06:	461f      	mov	r7, r3
 8009c08:	4605      	mov	r5, r0
 8009c0a:	f001 fcfb 	bl	800b604 <_localeconv_r>
 8009c0e:	f8d0 b000 	ldr.w	fp, [r0]
 8009c12:	4658      	mov	r0, fp
 8009c14:	f7f6 fb64 	bl	80002e0 <strlen>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9308      	str	r3, [sp, #32]
 8009c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009c24:	6822      	ldr	r2, [r4, #0]
 8009c26:	3307      	adds	r3, #7
 8009c28:	f023 0307 	bic.w	r3, r3, #7
 8009c2c:	f103 0108 	add.w	r1, r3, #8
 8009c30:	f8c8 1000 	str.w	r1, [r8]
 8009c34:	4682      	mov	sl, r0
 8009c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009c3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009ea0 <_printf_float+0x2a8>
 8009c42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009c46:	eeb0 6bc0 	vabs.f64	d6, d0
 8009c4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8009c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c52:	dd24      	ble.n	8009c9e <_printf_float+0xa6>
 8009c54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5c:	d502      	bpl.n	8009c64 <_printf_float+0x6c>
 8009c5e:	232d      	movs	r3, #45	; 0x2d
 8009c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c64:	4b90      	ldr	r3, [pc, #576]	; (8009ea8 <_printf_float+0x2b0>)
 8009c66:	4891      	ldr	r0, [pc, #580]	; (8009eac <_printf_float+0x2b4>)
 8009c68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009c6c:	bf94      	ite	ls
 8009c6e:	4698      	movls	r8, r3
 8009c70:	4680      	movhi	r8, r0
 8009c72:	2303      	movs	r3, #3
 8009c74:	6123      	str	r3, [r4, #16]
 8009c76:	f022 0204 	bic.w	r2, r2, #4
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6022      	str	r2, [r4, #0]
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	9700      	str	r7, [sp, #0]
 8009c82:	4633      	mov	r3, r6
 8009c84:	aa09      	add	r2, sp, #36	; 0x24
 8009c86:	4621      	mov	r1, r4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 f9d3 	bl	800a034 <_printf_common>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f040 808a 	bne.w	8009da8 <_printf_float+0x1b0>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b00b      	add	sp, #44	; 0x2c
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca6:	d709      	bvc.n	8009cbc <_printf_float+0xc4>
 8009ca8:	ee10 3a90 	vmov	r3, s1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfbc      	itt	lt
 8009cb0:	232d      	movlt	r3, #45	; 0x2d
 8009cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cb6:	487e      	ldr	r0, [pc, #504]	; (8009eb0 <_printf_float+0x2b8>)
 8009cb8:	4b7e      	ldr	r3, [pc, #504]	; (8009eb4 <_printf_float+0x2bc>)
 8009cba:	e7d5      	b.n	8009c68 <_printf_float+0x70>
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009cc2:	9104      	str	r1, [sp, #16]
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	d13c      	bne.n	8009d42 <_printf_float+0x14a>
 8009cc8:	2306      	movs	r3, #6
 8009cca:	6063      	str	r3, [r4, #4]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	ab08      	add	r3, sp, #32
 8009cd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009cd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cda:	ab07      	add	r3, sp, #28
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	6022      	str	r2, [r4, #0]
 8009ce2:	f10d 031b 	add.w	r3, sp, #27
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f7ff fef4 	bl	8009ad4 <__cvt>
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	9907      	ldr	r1, [sp, #28]
 8009cf0:	2b47      	cmp	r3, #71	; 0x47
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	d108      	bne.n	8009d08 <_printf_float+0x110>
 8009cf6:	1cc8      	adds	r0, r1, #3
 8009cf8:	db02      	blt.n	8009d00 <_printf_float+0x108>
 8009cfa:	6863      	ldr	r3, [r4, #4]
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	dd41      	ble.n	8009d84 <_printf_float+0x18c>
 8009d00:	f1a9 0902 	sub.w	r9, r9, #2
 8009d04:	fa5f f989 	uxtb.w	r9, r9
 8009d08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d0c:	d820      	bhi.n	8009d50 <_printf_float+0x158>
 8009d0e:	3901      	subs	r1, #1
 8009d10:	464a      	mov	r2, r9
 8009d12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d16:	9107      	str	r1, [sp, #28]
 8009d18:	f7ff ff2e 	bl	8009b78 <__exponent>
 8009d1c:	9a08      	ldr	r2, [sp, #32]
 8009d1e:	9004      	str	r0, [sp, #16]
 8009d20:	1813      	adds	r3, r2, r0
 8009d22:	2a01      	cmp	r2, #1
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	dc02      	bgt.n	8009d2e <_printf_float+0x136>
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	07d2      	lsls	r2, r2, #31
 8009d2c:	d501      	bpl.n	8009d32 <_printf_float+0x13a>
 8009d2e:	3301      	adds	r3, #1
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0a2      	beq.n	8009c80 <_printf_float+0x88>
 8009d3a:	232d      	movs	r3, #45	; 0x2d
 8009d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d40:	e79e      	b.n	8009c80 <_printf_float+0x88>
 8009d42:	9904      	ldr	r1, [sp, #16]
 8009d44:	2947      	cmp	r1, #71	; 0x47
 8009d46:	d1c1      	bne.n	8009ccc <_printf_float+0xd4>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1bf      	bne.n	8009ccc <_printf_float+0xd4>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e7bc      	b.n	8009cca <_printf_float+0xd2>
 8009d50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009d54:	d118      	bne.n	8009d88 <_printf_float+0x190>
 8009d56:	2900      	cmp	r1, #0
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	dd0b      	ble.n	8009d74 <_printf_float+0x17c>
 8009d5c:	6121      	str	r1, [r4, #16]
 8009d5e:	b913      	cbnz	r3, 8009d66 <_printf_float+0x16e>
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	07d0      	lsls	r0, r2, #31
 8009d64:	d502      	bpl.n	8009d6c <_printf_float+0x174>
 8009d66:	3301      	adds	r3, #1
 8009d68:	440b      	add	r3, r1
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	e7de      	b.n	8009d32 <_printf_float+0x13a>
 8009d74:	b913      	cbnz	r3, 8009d7c <_printf_float+0x184>
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	07d2      	lsls	r2, r2, #31
 8009d7a:	d501      	bpl.n	8009d80 <_printf_float+0x188>
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	e7f4      	b.n	8009d6a <_printf_float+0x172>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e7f2      	b.n	8009d6a <_printf_float+0x172>
 8009d84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009d88:	9b08      	ldr	r3, [sp, #32]
 8009d8a:	4299      	cmp	r1, r3
 8009d8c:	db05      	blt.n	8009d9a <_printf_float+0x1a2>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	6121      	str	r1, [r4, #16]
 8009d92:	07d8      	lsls	r0, r3, #31
 8009d94:	d5ea      	bpl.n	8009d6c <_printf_float+0x174>
 8009d96:	1c4b      	adds	r3, r1, #1
 8009d98:	e7e7      	b.n	8009d6a <_printf_float+0x172>
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	bfd4      	ite	le
 8009d9e:	f1c1 0202 	rsble	r2, r1, #2
 8009da2:	2201      	movgt	r2, #1
 8009da4:	4413      	add	r3, r2
 8009da6:	e7e0      	b.n	8009d6a <_printf_float+0x172>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	055a      	lsls	r2, r3, #21
 8009dac:	d407      	bmi.n	8009dbe <_printf_float+0x1c6>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	4642      	mov	r2, r8
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d12a      	bne.n	8009e12 <_printf_float+0x21a>
 8009dbc:	e76a      	b.n	8009c94 <_printf_float+0x9c>
 8009dbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009dc2:	f240 80e2 	bls.w	8009f8a <_printf_float+0x392>
 8009dc6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009dca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	d133      	bne.n	8009e3c <_printf_float+0x244>
 8009dd4:	4a38      	ldr	r2, [pc, #224]	; (8009eb8 <_printf_float+0x2c0>)
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f af58 	beq.w	8009c94 <_printf_float+0x9c>
 8009de4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	db02      	blt.n	8009df2 <_printf_float+0x1fa>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	07d8      	lsls	r0, r3, #31
 8009df0:	d50f      	bpl.n	8009e12 <_printf_float+0x21a>
 8009df2:	4653      	mov	r3, sl
 8009df4:	465a      	mov	r2, fp
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b8      	blx	r7
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	f43f af49 	beq.w	8009c94 <_printf_float+0x9c>
 8009e02:	f04f 0800 	mov.w	r8, #0
 8009e06:	f104 091a 	add.w	r9, r4, #26
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4543      	cmp	r3, r8
 8009e10:	dc09      	bgt.n	8009e26 <_printf_float+0x22e>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	079b      	lsls	r3, r3, #30
 8009e16:	f100 8108 	bmi.w	800a02a <_printf_float+0x432>
 8009e1a:	68e0      	ldr	r0, [r4, #12]
 8009e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1e:	4298      	cmp	r0, r3
 8009e20:	bfb8      	it	lt
 8009e22:	4618      	movlt	r0, r3
 8009e24:	e738      	b.n	8009c98 <_printf_float+0xa0>
 8009e26:	2301      	movs	r3, #1
 8009e28:	464a      	mov	r2, r9
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	f43f af2f 	beq.w	8009c94 <_printf_float+0x9c>
 8009e36:	f108 0801 	add.w	r8, r8, #1
 8009e3a:	e7e6      	b.n	8009e0a <_printf_float+0x212>
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dc3c      	bgt.n	8009ebc <_printf_float+0x2c4>
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <_printf_float+0x2c0>)
 8009e44:	2301      	movs	r3, #1
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f43f af21 	beq.w	8009c94 <_printf_float+0x9c>
 8009e52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	d102      	bne.n	8009e60 <_printf_float+0x268>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	07d9      	lsls	r1, r3, #31
 8009e5e:	d5d8      	bpl.n	8009e12 <_printf_float+0x21a>
 8009e60:	4653      	mov	r3, sl
 8009e62:	465a      	mov	r2, fp
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f af12 	beq.w	8009c94 <_printf_float+0x9c>
 8009e70:	f04f 0900 	mov.w	r9, #0
 8009e74:	f104 0a1a 	add.w	sl, r4, #26
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	425b      	negs	r3, r3
 8009e7c:	454b      	cmp	r3, r9
 8009e7e:	dc01      	bgt.n	8009e84 <_printf_float+0x28c>
 8009e80:	9b08      	ldr	r3, [sp, #32]
 8009e82:	e795      	b.n	8009db0 <_printf_float+0x1b8>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4652      	mov	r2, sl
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f af00 	beq.w	8009c94 <_printf_float+0x9c>
 8009e94:	f109 0901 	add.w	r9, r9, #1
 8009e98:	e7ee      	b.n	8009e78 <_printf_float+0x280>
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	ffffffff 	.word	0xffffffff
 8009ea4:	7fefffff 	.word	0x7fefffff
 8009ea8:	0800cfa4 	.word	0x0800cfa4
 8009eac:	0800cfa8 	.word	0x0800cfa8
 8009eb0:	0800cfb0 	.word	0x0800cfb0
 8009eb4:	0800cfac 	.word	0x0800cfac
 8009eb8:	0800cfb4 	.word	0x0800cfb4
 8009ebc:	9a08      	ldr	r2, [sp, #32]
 8009ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	bfa8      	it	ge
 8009ec4:	461a      	movge	r2, r3
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	4691      	mov	r9, r2
 8009eca:	dc38      	bgt.n	8009f3e <_printf_float+0x346>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9305      	str	r3, [sp, #20]
 8009ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ed4:	f104 021a 	add.w	r2, r4, #26
 8009ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eda:	9905      	ldr	r1, [sp, #20]
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	eba3 0309 	sub.w	r3, r3, r9
 8009ee2:	428b      	cmp	r3, r1
 8009ee4:	dc33      	bgt.n	8009f4e <_printf_float+0x356>
 8009ee6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	db3c      	blt.n	8009f68 <_printf_float+0x370>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	07da      	lsls	r2, r3, #31
 8009ef2:	d439      	bmi.n	8009f68 <_printf_float+0x370>
 8009ef4:	9b08      	ldr	r3, [sp, #32]
 8009ef6:	9a04      	ldr	r2, [sp, #16]
 8009ef8:	9907      	ldr	r1, [sp, #28]
 8009efa:	1a9a      	subs	r2, r3, r2
 8009efc:	eba3 0901 	sub.w	r9, r3, r1
 8009f00:	4591      	cmp	r9, r2
 8009f02:	bfa8      	it	ge
 8009f04:	4691      	movge	r9, r2
 8009f06:	f1b9 0f00 	cmp.w	r9, #0
 8009f0a:	dc35      	bgt.n	8009f78 <_printf_float+0x380>
 8009f0c:	f04f 0800 	mov.w	r8, #0
 8009f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f14:	f104 0a1a 	add.w	sl, r4, #26
 8009f18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f1c:	1a9b      	subs	r3, r3, r2
 8009f1e:	eba3 0309 	sub.w	r3, r3, r9
 8009f22:	4543      	cmp	r3, r8
 8009f24:	f77f af75 	ble.w	8009e12 <_printf_float+0x21a>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f aeae 	beq.w	8009c94 <_printf_float+0x9c>
 8009f38:	f108 0801 	add.w	r8, r8, #1
 8009f3c:	e7ec      	b.n	8009f18 <_printf_float+0x320>
 8009f3e:	4613      	mov	r3, r2
 8009f40:	4631      	mov	r1, r6
 8009f42:	4642      	mov	r2, r8
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d1bf      	bne.n	8009ecc <_printf_float+0x2d4>
 8009f4c:	e6a2      	b.n	8009c94 <_printf_float+0x9c>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	9204      	str	r2, [sp, #16]
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae9b 	beq.w	8009c94 <_printf_float+0x9c>
 8009f5e:	9b05      	ldr	r3, [sp, #20]
 8009f60:	9a04      	ldr	r2, [sp, #16]
 8009f62:	3301      	adds	r3, #1
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	e7b7      	b.n	8009ed8 <_printf_float+0x2e0>
 8009f68:	4653      	mov	r3, sl
 8009f6a:	465a      	mov	r2, fp
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	d1be      	bne.n	8009ef4 <_printf_float+0x2fc>
 8009f76:	e68d      	b.n	8009c94 <_printf_float+0x9c>
 8009f78:	9a04      	ldr	r2, [sp, #16]
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	4442      	add	r2, r8
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	d1c1      	bne.n	8009f0c <_printf_float+0x314>
 8009f88:	e684      	b.n	8009c94 <_printf_float+0x9c>
 8009f8a:	9a08      	ldr	r2, [sp, #32]
 8009f8c:	2a01      	cmp	r2, #1
 8009f8e:	dc01      	bgt.n	8009f94 <_printf_float+0x39c>
 8009f90:	07db      	lsls	r3, r3, #31
 8009f92:	d537      	bpl.n	800a004 <_printf_float+0x40c>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4642      	mov	r2, r8
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f ae78 	beq.w	8009c94 <_printf_float+0x9c>
 8009fa4:	4653      	mov	r3, sl
 8009fa6:	465a      	mov	r2, fp
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f ae70 	beq.w	8009c94 <_printf_float+0x9c>
 8009fb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009fb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc0:	d01b      	beq.n	8009ffa <_printf_float+0x402>
 8009fc2:	9b08      	ldr	r3, [sp, #32]
 8009fc4:	f108 0201 	add.w	r2, r8, #1
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d10e      	bne.n	8009ff2 <_printf_float+0x3fa>
 8009fd4:	e65e      	b.n	8009c94 <_printf_float+0x9c>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	464a      	mov	r2, r9
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4628      	mov	r0, r5
 8009fde:	47b8      	blx	r7
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	f43f ae57 	beq.w	8009c94 <_printf_float+0x9c>
 8009fe6:	f108 0801 	add.w	r8, r8, #1
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	4543      	cmp	r3, r8
 8009ff0:	dcf1      	bgt.n	8009fd6 <_printf_float+0x3de>
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ff8:	e6db      	b.n	8009db2 <_printf_float+0x1ba>
 8009ffa:	f04f 0800 	mov.w	r8, #0
 8009ffe:	f104 091a 	add.w	r9, r4, #26
 800a002:	e7f2      	b.n	8009fea <_printf_float+0x3f2>
 800a004:	2301      	movs	r3, #1
 800a006:	4642      	mov	r2, r8
 800a008:	e7df      	b.n	8009fca <_printf_float+0x3d2>
 800a00a:	2301      	movs	r3, #1
 800a00c:	464a      	mov	r2, r9
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	f43f ae3d 	beq.w	8009c94 <_printf_float+0x9c>
 800a01a:	f108 0801 	add.w	r8, r8, #1
 800a01e:	68e3      	ldr	r3, [r4, #12]
 800a020:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a022:	1a5b      	subs	r3, r3, r1
 800a024:	4543      	cmp	r3, r8
 800a026:	dcf0      	bgt.n	800a00a <_printf_float+0x412>
 800a028:	e6f7      	b.n	8009e1a <_printf_float+0x222>
 800a02a:	f04f 0800 	mov.w	r8, #0
 800a02e:	f104 0919 	add.w	r9, r4, #25
 800a032:	e7f4      	b.n	800a01e <_printf_float+0x426>

0800a034 <_printf_common>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	4616      	mov	r6, r2
 800a03a:	4699      	mov	r9, r3
 800a03c:	688a      	ldr	r2, [r1, #8]
 800a03e:	690b      	ldr	r3, [r1, #16]
 800a040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a044:	4293      	cmp	r3, r2
 800a046:	bfb8      	it	lt
 800a048:	4613      	movlt	r3, r2
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a050:	4607      	mov	r7, r0
 800a052:	460c      	mov	r4, r1
 800a054:	b10a      	cbz	r2, 800a05a <_printf_common+0x26>
 800a056:	3301      	adds	r3, #1
 800a058:	6033      	str	r3, [r6, #0]
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	0699      	lsls	r1, r3, #26
 800a05e:	bf42      	ittt	mi
 800a060:	6833      	ldrmi	r3, [r6, #0]
 800a062:	3302      	addmi	r3, #2
 800a064:	6033      	strmi	r3, [r6, #0]
 800a066:	6825      	ldr	r5, [r4, #0]
 800a068:	f015 0506 	ands.w	r5, r5, #6
 800a06c:	d106      	bne.n	800a07c <_printf_common+0x48>
 800a06e:	f104 0a19 	add.w	sl, r4, #25
 800a072:	68e3      	ldr	r3, [r4, #12]
 800a074:	6832      	ldr	r2, [r6, #0]
 800a076:	1a9b      	subs	r3, r3, r2
 800a078:	42ab      	cmp	r3, r5
 800a07a:	dc26      	bgt.n	800a0ca <_printf_common+0x96>
 800a07c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a080:	1e13      	subs	r3, r2, #0
 800a082:	6822      	ldr	r2, [r4, #0]
 800a084:	bf18      	it	ne
 800a086:	2301      	movne	r3, #1
 800a088:	0692      	lsls	r2, r2, #26
 800a08a:	d42b      	bmi.n	800a0e4 <_printf_common+0xb0>
 800a08c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a090:	4649      	mov	r1, r9
 800a092:	4638      	mov	r0, r7
 800a094:	47c0      	blx	r8
 800a096:	3001      	adds	r0, #1
 800a098:	d01e      	beq.n	800a0d8 <_printf_common+0xa4>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	68e5      	ldr	r5, [r4, #12]
 800a09e:	6832      	ldr	r2, [r6, #0]
 800a0a0:	f003 0306 	and.w	r3, r3, #6
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	bf08      	it	eq
 800a0a8:	1aad      	subeq	r5, r5, r2
 800a0aa:	68a3      	ldr	r3, [r4, #8]
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	bf0c      	ite	eq
 800a0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0b4:	2500      	movne	r5, #0
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	bfc4      	itt	gt
 800a0ba:	1a9b      	subgt	r3, r3, r2
 800a0bc:	18ed      	addgt	r5, r5, r3
 800a0be:	2600      	movs	r6, #0
 800a0c0:	341a      	adds	r4, #26
 800a0c2:	42b5      	cmp	r5, r6
 800a0c4:	d11a      	bne.n	800a0fc <_printf_common+0xc8>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e008      	b.n	800a0dc <_printf_common+0xa8>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	47c0      	blx	r8
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d103      	bne.n	800a0e0 <_printf_common+0xac>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	e7c6      	b.n	800a072 <_printf_common+0x3e>
 800a0e4:	18e1      	adds	r1, r4, r3
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	2030      	movs	r0, #48	; 0x30
 800a0ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ee:	4422      	add	r2, r4
 800a0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	e7c7      	b.n	800a08c <_printf_common+0x58>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4622      	mov	r2, r4
 800a100:	4649      	mov	r1, r9
 800a102:	4638      	mov	r0, r7
 800a104:	47c0      	blx	r8
 800a106:	3001      	adds	r0, #1
 800a108:	d0e6      	beq.n	800a0d8 <_printf_common+0xa4>
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7d9      	b.n	800a0c2 <_printf_common+0x8e>
	...

0800a110 <_printf_i>:
 800a110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a114:	7e0f      	ldrb	r7, [r1, #24]
 800a116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a118:	2f78      	cmp	r7, #120	; 0x78
 800a11a:	4691      	mov	r9, r2
 800a11c:	4680      	mov	r8, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	469a      	mov	sl, r3
 800a122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a126:	d807      	bhi.n	800a138 <_printf_i+0x28>
 800a128:	2f62      	cmp	r7, #98	; 0x62
 800a12a:	d80a      	bhi.n	800a142 <_printf_i+0x32>
 800a12c:	2f00      	cmp	r7, #0
 800a12e:	f000 80d8 	beq.w	800a2e2 <_printf_i+0x1d2>
 800a132:	2f58      	cmp	r7, #88	; 0x58
 800a134:	f000 80a3 	beq.w	800a27e <_printf_i+0x16e>
 800a138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a13c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a140:	e03a      	b.n	800a1b8 <_printf_i+0xa8>
 800a142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a146:	2b15      	cmp	r3, #21
 800a148:	d8f6      	bhi.n	800a138 <_printf_i+0x28>
 800a14a:	a101      	add	r1, pc, #4	; (adr r1, 800a150 <_printf_i+0x40>)
 800a14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a150:	0800a1a9 	.word	0x0800a1a9
 800a154:	0800a1bd 	.word	0x0800a1bd
 800a158:	0800a139 	.word	0x0800a139
 800a15c:	0800a139 	.word	0x0800a139
 800a160:	0800a139 	.word	0x0800a139
 800a164:	0800a139 	.word	0x0800a139
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a139 	.word	0x0800a139
 800a170:	0800a139 	.word	0x0800a139
 800a174:	0800a139 	.word	0x0800a139
 800a178:	0800a139 	.word	0x0800a139
 800a17c:	0800a2c9 	.word	0x0800a2c9
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a2ab 	.word	0x0800a2ab
 800a188:	0800a139 	.word	0x0800a139
 800a18c:	0800a139 	.word	0x0800a139
 800a190:	0800a2eb 	.word	0x0800a2eb
 800a194:	0800a139 	.word	0x0800a139
 800a198:	0800a1ed 	.word	0x0800a1ed
 800a19c:	0800a139 	.word	0x0800a139
 800a1a0:	0800a139 	.word	0x0800a139
 800a1a4:	0800a2b3 	.word	0x0800a2b3
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	1d1a      	adds	r2, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	602a      	str	r2, [r5, #0]
 800a1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e0a3      	b.n	800a304 <_printf_i+0x1f4>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	6829      	ldr	r1, [r5, #0]
 800a1c0:	0606      	lsls	r6, r0, #24
 800a1c2:	f101 0304 	add.w	r3, r1, #4
 800a1c6:	d50a      	bpl.n	800a1de <_printf_i+0xce>
 800a1c8:	680e      	ldr	r6, [r1, #0]
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	da03      	bge.n	800a1d8 <_printf_i+0xc8>
 800a1d0:	232d      	movs	r3, #45	; 0x2d
 800a1d2:	4276      	negs	r6, r6
 800a1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d8:	485e      	ldr	r0, [pc, #376]	; (800a354 <_printf_i+0x244>)
 800a1da:	230a      	movs	r3, #10
 800a1dc:	e019      	b.n	800a212 <_printf_i+0x102>
 800a1de:	680e      	ldr	r6, [r1, #0]
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1e6:	bf18      	it	ne
 800a1e8:	b236      	sxthne	r6, r6
 800a1ea:	e7ef      	b.n	800a1cc <_printf_i+0xbc>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	6820      	ldr	r0, [r4, #0]
 800a1f0:	1d19      	adds	r1, r3, #4
 800a1f2:	6029      	str	r1, [r5, #0]
 800a1f4:	0601      	lsls	r1, r0, #24
 800a1f6:	d501      	bpl.n	800a1fc <_printf_i+0xec>
 800a1f8:	681e      	ldr	r6, [r3, #0]
 800a1fa:	e002      	b.n	800a202 <_printf_i+0xf2>
 800a1fc:	0646      	lsls	r6, r0, #25
 800a1fe:	d5fb      	bpl.n	800a1f8 <_printf_i+0xe8>
 800a200:	881e      	ldrh	r6, [r3, #0]
 800a202:	4854      	ldr	r0, [pc, #336]	; (800a354 <_printf_i+0x244>)
 800a204:	2f6f      	cmp	r7, #111	; 0x6f
 800a206:	bf0c      	ite	eq
 800a208:	2308      	moveq	r3, #8
 800a20a:	230a      	movne	r3, #10
 800a20c:	2100      	movs	r1, #0
 800a20e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a212:	6865      	ldr	r5, [r4, #4]
 800a214:	60a5      	str	r5, [r4, #8]
 800a216:	2d00      	cmp	r5, #0
 800a218:	bfa2      	ittt	ge
 800a21a:	6821      	ldrge	r1, [r4, #0]
 800a21c:	f021 0104 	bicge.w	r1, r1, #4
 800a220:	6021      	strge	r1, [r4, #0]
 800a222:	b90e      	cbnz	r6, 800a228 <_printf_i+0x118>
 800a224:	2d00      	cmp	r5, #0
 800a226:	d04d      	beq.n	800a2c4 <_printf_i+0x1b4>
 800a228:	4615      	mov	r5, r2
 800a22a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a22e:	fb03 6711 	mls	r7, r3, r1, r6
 800a232:	5dc7      	ldrb	r7, [r0, r7]
 800a234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a238:	4637      	mov	r7, r6
 800a23a:	42bb      	cmp	r3, r7
 800a23c:	460e      	mov	r6, r1
 800a23e:	d9f4      	bls.n	800a22a <_printf_i+0x11a>
 800a240:	2b08      	cmp	r3, #8
 800a242:	d10b      	bne.n	800a25c <_printf_i+0x14c>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	07de      	lsls	r6, r3, #31
 800a248:	d508      	bpl.n	800a25c <_printf_i+0x14c>
 800a24a:	6923      	ldr	r3, [r4, #16]
 800a24c:	6861      	ldr	r1, [r4, #4]
 800a24e:	4299      	cmp	r1, r3
 800a250:	bfde      	ittt	le
 800a252:	2330      	movle	r3, #48	; 0x30
 800a254:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a25c:	1b52      	subs	r2, r2, r5
 800a25e:	6122      	str	r2, [r4, #16]
 800a260:	f8cd a000 	str.w	sl, [sp]
 800a264:	464b      	mov	r3, r9
 800a266:	aa03      	add	r2, sp, #12
 800a268:	4621      	mov	r1, r4
 800a26a:	4640      	mov	r0, r8
 800a26c:	f7ff fee2 	bl	800a034 <_printf_common>
 800a270:	3001      	adds	r0, #1
 800a272:	d14c      	bne.n	800a30e <_printf_i+0x1fe>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b004      	add	sp, #16
 800a27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27e:	4835      	ldr	r0, [pc, #212]	; (800a354 <_printf_i+0x244>)
 800a280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a284:	6829      	ldr	r1, [r5, #0]
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f851 6b04 	ldr.w	r6, [r1], #4
 800a28c:	6029      	str	r1, [r5, #0]
 800a28e:	061d      	lsls	r5, r3, #24
 800a290:	d514      	bpl.n	800a2bc <_printf_i+0x1ac>
 800a292:	07df      	lsls	r7, r3, #31
 800a294:	bf44      	itt	mi
 800a296:	f043 0320 	orrmi.w	r3, r3, #32
 800a29a:	6023      	strmi	r3, [r4, #0]
 800a29c:	b91e      	cbnz	r6, 800a2a6 <_printf_i+0x196>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f023 0320 	bic.w	r3, r3, #32
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	e7b0      	b.n	800a20c <_printf_i+0xfc>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	f043 0320 	orr.w	r3, r3, #32
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	2378      	movs	r3, #120	; 0x78
 800a2b4:	4828      	ldr	r0, [pc, #160]	; (800a358 <_printf_i+0x248>)
 800a2b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ba:	e7e3      	b.n	800a284 <_printf_i+0x174>
 800a2bc:	0659      	lsls	r1, r3, #25
 800a2be:	bf48      	it	mi
 800a2c0:	b2b6      	uxthmi	r6, r6
 800a2c2:	e7e6      	b.n	800a292 <_printf_i+0x182>
 800a2c4:	4615      	mov	r5, r2
 800a2c6:	e7bb      	b.n	800a240 <_printf_i+0x130>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	6826      	ldr	r6, [r4, #0]
 800a2cc:	6961      	ldr	r1, [r4, #20]
 800a2ce:	1d18      	adds	r0, r3, #4
 800a2d0:	6028      	str	r0, [r5, #0]
 800a2d2:	0635      	lsls	r5, r6, #24
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	d501      	bpl.n	800a2dc <_printf_i+0x1cc>
 800a2d8:	6019      	str	r1, [r3, #0]
 800a2da:	e002      	b.n	800a2e2 <_printf_i+0x1d2>
 800a2dc:	0670      	lsls	r0, r6, #25
 800a2de:	d5fb      	bpl.n	800a2d8 <_printf_i+0x1c8>
 800a2e0:	8019      	strh	r1, [r3, #0]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6123      	str	r3, [r4, #16]
 800a2e6:	4615      	mov	r5, r2
 800a2e8:	e7ba      	b.n	800a260 <_printf_i+0x150>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	1d1a      	adds	r2, r3, #4
 800a2ee:	602a      	str	r2, [r5, #0]
 800a2f0:	681d      	ldr	r5, [r3, #0]
 800a2f2:	6862      	ldr	r2, [r4, #4]
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f7f5 fffa 	bl	80002f0 <memchr>
 800a2fc:	b108      	cbz	r0, 800a302 <_printf_i+0x1f2>
 800a2fe:	1b40      	subs	r0, r0, r5
 800a300:	6060      	str	r0, [r4, #4]
 800a302:	6863      	ldr	r3, [r4, #4]
 800a304:	6123      	str	r3, [r4, #16]
 800a306:	2300      	movs	r3, #0
 800a308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30c:	e7a8      	b.n	800a260 <_printf_i+0x150>
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	462a      	mov	r2, r5
 800a312:	4649      	mov	r1, r9
 800a314:	4640      	mov	r0, r8
 800a316:	47d0      	blx	sl
 800a318:	3001      	adds	r0, #1
 800a31a:	d0ab      	beq.n	800a274 <_printf_i+0x164>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	079b      	lsls	r3, r3, #30
 800a320:	d413      	bmi.n	800a34a <_printf_i+0x23a>
 800a322:	68e0      	ldr	r0, [r4, #12]
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	4298      	cmp	r0, r3
 800a328:	bfb8      	it	lt
 800a32a:	4618      	movlt	r0, r3
 800a32c:	e7a4      	b.n	800a278 <_printf_i+0x168>
 800a32e:	2301      	movs	r3, #1
 800a330:	4632      	mov	r2, r6
 800a332:	4649      	mov	r1, r9
 800a334:	4640      	mov	r0, r8
 800a336:	47d0      	blx	sl
 800a338:	3001      	adds	r0, #1
 800a33a:	d09b      	beq.n	800a274 <_printf_i+0x164>
 800a33c:	3501      	adds	r5, #1
 800a33e:	68e3      	ldr	r3, [r4, #12]
 800a340:	9903      	ldr	r1, [sp, #12]
 800a342:	1a5b      	subs	r3, r3, r1
 800a344:	42ab      	cmp	r3, r5
 800a346:	dcf2      	bgt.n	800a32e <_printf_i+0x21e>
 800a348:	e7eb      	b.n	800a322 <_printf_i+0x212>
 800a34a:	2500      	movs	r5, #0
 800a34c:	f104 0619 	add.w	r6, r4, #25
 800a350:	e7f5      	b.n	800a33e <_printf_i+0x22e>
 800a352:	bf00      	nop
 800a354:	0800cfb6 	.word	0x0800cfb6
 800a358:	0800cfc7 	.word	0x0800cfc7

0800a35c <iprintf>:
 800a35c:	b40f      	push	{r0, r1, r2, r3}
 800a35e:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <iprintf+0x2c>)
 800a360:	b513      	push	{r0, r1, r4, lr}
 800a362:	681c      	ldr	r4, [r3, #0]
 800a364:	b124      	cbz	r4, 800a370 <iprintf+0x14>
 800a366:	69a3      	ldr	r3, [r4, #24]
 800a368:	b913      	cbnz	r3, 800a370 <iprintf+0x14>
 800a36a:	4620      	mov	r0, r4
 800a36c:	f001 f8ac 	bl	800b4c8 <__sinit>
 800a370:	ab05      	add	r3, sp, #20
 800a372:	9a04      	ldr	r2, [sp, #16]
 800a374:	68a1      	ldr	r1, [r4, #8]
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	4620      	mov	r0, r4
 800a37a:	f001 ffb7 	bl	800c2ec <_vfiprintf_r>
 800a37e:	b002      	add	sp, #8
 800a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a384:	b004      	add	sp, #16
 800a386:	4770      	bx	lr
 800a388:	24000038 	.word	0x24000038

0800a38c <_puts_r>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	460e      	mov	r6, r1
 800a390:	4605      	mov	r5, r0
 800a392:	b118      	cbz	r0, 800a39c <_puts_r+0x10>
 800a394:	6983      	ldr	r3, [r0, #24]
 800a396:	b90b      	cbnz	r3, 800a39c <_puts_r+0x10>
 800a398:	f001 f896 	bl	800b4c8 <__sinit>
 800a39c:	69ab      	ldr	r3, [r5, #24]
 800a39e:	68ac      	ldr	r4, [r5, #8]
 800a3a0:	b913      	cbnz	r3, 800a3a8 <_puts_r+0x1c>
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f001 f890 	bl	800b4c8 <__sinit>
 800a3a8:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <_puts_r+0xd0>)
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d120      	bne.n	800a3f0 <_puts_r+0x64>
 800a3ae:	686c      	ldr	r4, [r5, #4]
 800a3b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3b2:	07db      	lsls	r3, r3, #31
 800a3b4:	d405      	bmi.n	800a3c2 <_puts_r+0x36>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	0598      	lsls	r0, r3, #22
 800a3ba:	d402      	bmi.n	800a3c2 <_puts_r+0x36>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3be:	f001 f926 	bl	800b60e <__retarget_lock_acquire_recursive>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	0719      	lsls	r1, r3, #28
 800a3c6:	d51d      	bpl.n	800a404 <_puts_r+0x78>
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	b1db      	cbz	r3, 800a404 <_puts_r+0x78>
 800a3cc:	3e01      	subs	r6, #1
 800a3ce:	68a3      	ldr	r3, [r4, #8]
 800a3d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	60a3      	str	r3, [r4, #8]
 800a3d8:	bb39      	cbnz	r1, 800a42a <_puts_r+0x9e>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da38      	bge.n	800a450 <_puts_r+0xc4>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	210a      	movs	r1, #10
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f000 f89c 	bl	800a520 <__swbuf_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d011      	beq.n	800a410 <_puts_r+0x84>
 800a3ec:	250a      	movs	r5, #10
 800a3ee:	e011      	b.n	800a414 <_puts_r+0x88>
 800a3f0:	4b1b      	ldr	r3, [pc, #108]	; (800a460 <_puts_r+0xd4>)
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	d101      	bne.n	800a3fa <_puts_r+0x6e>
 800a3f6:	68ac      	ldr	r4, [r5, #8]
 800a3f8:	e7da      	b.n	800a3b0 <_puts_r+0x24>
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <_puts_r+0xd8>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	bf08      	it	eq
 800a400:	68ec      	ldreq	r4, [r5, #12]
 800a402:	e7d5      	b.n	800a3b0 <_puts_r+0x24>
 800a404:	4621      	mov	r1, r4
 800a406:	4628      	mov	r0, r5
 800a408:	f000 f8dc 	bl	800a5c4 <__swsetup_r>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0dd      	beq.n	800a3cc <_puts_r+0x40>
 800a410:	f04f 35ff 	mov.w	r5, #4294967295
 800a414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a416:	07da      	lsls	r2, r3, #31
 800a418:	d405      	bmi.n	800a426 <_puts_r+0x9a>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	059b      	lsls	r3, r3, #22
 800a41e:	d402      	bmi.n	800a426 <_puts_r+0x9a>
 800a420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a422:	f001 f8f5 	bl	800b610 <__retarget_lock_release_recursive>
 800a426:	4628      	mov	r0, r5
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	da04      	bge.n	800a438 <_puts_r+0xac>
 800a42e:	69a2      	ldr	r2, [r4, #24]
 800a430:	429a      	cmp	r2, r3
 800a432:	dc06      	bgt.n	800a442 <_puts_r+0xb6>
 800a434:	290a      	cmp	r1, #10
 800a436:	d004      	beq.n	800a442 <_puts_r+0xb6>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6022      	str	r2, [r4, #0]
 800a43e:	7019      	strb	r1, [r3, #0]
 800a440:	e7c5      	b.n	800a3ce <_puts_r+0x42>
 800a442:	4622      	mov	r2, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f000 f86b 	bl	800a520 <__swbuf_r>
 800a44a:	3001      	adds	r0, #1
 800a44c:	d1bf      	bne.n	800a3ce <_puts_r+0x42>
 800a44e:	e7df      	b.n	800a410 <_puts_r+0x84>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	250a      	movs	r5, #10
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	701d      	strb	r5, [r3, #0]
 800a45a:	e7db      	b.n	800a414 <_puts_r+0x88>
 800a45c:	0800d088 	.word	0x0800d088
 800a460:	0800d0a8 	.word	0x0800d0a8
 800a464:	0800d068 	.word	0x0800d068

0800a468 <puts>:
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <puts+0xc>)
 800a46a:	4601      	mov	r1, r0
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f7ff bf8d 	b.w	800a38c <_puts_r>
 800a472:	bf00      	nop
 800a474:	24000038 	.word	0x24000038

0800a478 <sniprintf>:
 800a478:	b40c      	push	{r2, r3}
 800a47a:	b530      	push	{r4, r5, lr}
 800a47c:	4b17      	ldr	r3, [pc, #92]	; (800a4dc <sniprintf+0x64>)
 800a47e:	1e0c      	subs	r4, r1, #0
 800a480:	681d      	ldr	r5, [r3, #0]
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	da08      	bge.n	800a498 <sniprintf+0x20>
 800a486:	238b      	movs	r3, #139	; 0x8b
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	b01d      	add	sp, #116	; 0x74
 800a490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a494:	b002      	add	sp, #8
 800a496:	4770      	bx	lr
 800a498:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a49c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4a0:	bf14      	ite	ne
 800a4a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4a6:	4623      	moveq	r3, r4
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4b0:	9002      	str	r0, [sp, #8]
 800a4b2:	9006      	str	r0, [sp, #24]
 800a4b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4ba:	ab21      	add	r3, sp, #132	; 0x84
 800a4bc:	a902      	add	r1, sp, #8
 800a4be:	4628      	mov	r0, r5
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	f001 fde9 	bl	800c098 <_svfiprintf_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	bfbc      	itt	lt
 800a4ca:	238b      	movlt	r3, #139	; 0x8b
 800a4cc:	602b      	strlt	r3, [r5, #0]
 800a4ce:	2c00      	cmp	r4, #0
 800a4d0:	d0dd      	beq.n	800a48e <sniprintf+0x16>
 800a4d2:	9b02      	ldr	r3, [sp, #8]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	701a      	strb	r2, [r3, #0]
 800a4d8:	e7d9      	b.n	800a48e <sniprintf+0x16>
 800a4da:	bf00      	nop
 800a4dc:	24000038 	.word	0x24000038

0800a4e0 <siprintf>:
 800a4e0:	b40e      	push	{r1, r2, r3}
 800a4e2:	b500      	push	{lr}
 800a4e4:	b09c      	sub	sp, #112	; 0x70
 800a4e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4e8:	9002      	str	r0, [sp, #8]
 800a4ea:	9006      	str	r0, [sp, #24]
 800a4ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4f0:	4809      	ldr	r0, [pc, #36]	; (800a518 <siprintf+0x38>)
 800a4f2:	9107      	str	r1, [sp, #28]
 800a4f4:	9104      	str	r1, [sp, #16]
 800a4f6:	4909      	ldr	r1, [pc, #36]	; (800a51c <siprintf+0x3c>)
 800a4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fc:	9105      	str	r1, [sp, #20]
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	a902      	add	r1, sp, #8
 800a504:	f001 fdc8 	bl	800c098 <_svfiprintf_r>
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	b01c      	add	sp, #112	; 0x70
 800a510:	f85d eb04 	ldr.w	lr, [sp], #4
 800a514:	b003      	add	sp, #12
 800a516:	4770      	bx	lr
 800a518:	24000038 	.word	0x24000038
 800a51c:	ffff0208 	.word	0xffff0208

0800a520 <__swbuf_r>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	460e      	mov	r6, r1
 800a524:	4614      	mov	r4, r2
 800a526:	4605      	mov	r5, r0
 800a528:	b118      	cbz	r0, 800a532 <__swbuf_r+0x12>
 800a52a:	6983      	ldr	r3, [r0, #24]
 800a52c:	b90b      	cbnz	r3, 800a532 <__swbuf_r+0x12>
 800a52e:	f000 ffcb 	bl	800b4c8 <__sinit>
 800a532:	4b21      	ldr	r3, [pc, #132]	; (800a5b8 <__swbuf_r+0x98>)
 800a534:	429c      	cmp	r4, r3
 800a536:	d12b      	bne.n	800a590 <__swbuf_r+0x70>
 800a538:	686c      	ldr	r4, [r5, #4]
 800a53a:	69a3      	ldr	r3, [r4, #24]
 800a53c:	60a3      	str	r3, [r4, #8]
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	071a      	lsls	r2, r3, #28
 800a542:	d52f      	bpl.n	800a5a4 <__swbuf_r+0x84>
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	b36b      	cbz	r3, 800a5a4 <__swbuf_r+0x84>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	1ac0      	subs	r0, r0, r3
 800a54e:	6963      	ldr	r3, [r4, #20]
 800a550:	b2f6      	uxtb	r6, r6
 800a552:	4283      	cmp	r3, r0
 800a554:	4637      	mov	r7, r6
 800a556:	dc04      	bgt.n	800a562 <__swbuf_r+0x42>
 800a558:	4621      	mov	r1, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 ff20 	bl	800b3a0 <_fflush_r>
 800a560:	bb30      	cbnz	r0, 800a5b0 <__swbuf_r+0x90>
 800a562:	68a3      	ldr	r3, [r4, #8]
 800a564:	3b01      	subs	r3, #1
 800a566:	60a3      	str	r3, [r4, #8]
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	6022      	str	r2, [r4, #0]
 800a56e:	701e      	strb	r6, [r3, #0]
 800a570:	6963      	ldr	r3, [r4, #20]
 800a572:	3001      	adds	r0, #1
 800a574:	4283      	cmp	r3, r0
 800a576:	d004      	beq.n	800a582 <__swbuf_r+0x62>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	07db      	lsls	r3, r3, #31
 800a57c:	d506      	bpl.n	800a58c <__swbuf_r+0x6c>
 800a57e:	2e0a      	cmp	r6, #10
 800a580:	d104      	bne.n	800a58c <__swbuf_r+0x6c>
 800a582:	4621      	mov	r1, r4
 800a584:	4628      	mov	r0, r5
 800a586:	f000 ff0b 	bl	800b3a0 <_fflush_r>
 800a58a:	b988      	cbnz	r0, 800a5b0 <__swbuf_r+0x90>
 800a58c:	4638      	mov	r0, r7
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <__swbuf_r+0x9c>)
 800a592:	429c      	cmp	r4, r3
 800a594:	d101      	bne.n	800a59a <__swbuf_r+0x7a>
 800a596:	68ac      	ldr	r4, [r5, #8]
 800a598:	e7cf      	b.n	800a53a <__swbuf_r+0x1a>
 800a59a:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <__swbuf_r+0xa0>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	bf08      	it	eq
 800a5a0:	68ec      	ldreq	r4, [r5, #12]
 800a5a2:	e7ca      	b.n	800a53a <__swbuf_r+0x1a>
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 f80c 	bl	800a5c4 <__swsetup_r>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0cb      	beq.n	800a548 <__swbuf_r+0x28>
 800a5b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5b4:	e7ea      	b.n	800a58c <__swbuf_r+0x6c>
 800a5b6:	bf00      	nop
 800a5b8:	0800d088 	.word	0x0800d088
 800a5bc:	0800d0a8 	.word	0x0800d0a8
 800a5c0:	0800d068 	.word	0x0800d068

0800a5c4 <__swsetup_r>:
 800a5c4:	4b32      	ldr	r3, [pc, #200]	; (800a690 <__swsetup_r+0xcc>)
 800a5c6:	b570      	push	{r4, r5, r6, lr}
 800a5c8:	681d      	ldr	r5, [r3, #0]
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	b125      	cbz	r5, 800a5da <__swsetup_r+0x16>
 800a5d0:	69ab      	ldr	r3, [r5, #24]
 800a5d2:	b913      	cbnz	r3, 800a5da <__swsetup_r+0x16>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 ff77 	bl	800b4c8 <__sinit>
 800a5da:	4b2e      	ldr	r3, [pc, #184]	; (800a694 <__swsetup_r+0xd0>)
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	d10f      	bne.n	800a600 <__swsetup_r+0x3c>
 800a5e0:	686c      	ldr	r4, [r5, #4]
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5e8:	0719      	lsls	r1, r3, #28
 800a5ea:	d42c      	bmi.n	800a646 <__swsetup_r+0x82>
 800a5ec:	06dd      	lsls	r5, r3, #27
 800a5ee:	d411      	bmi.n	800a614 <__swsetup_r+0x50>
 800a5f0:	2309      	movs	r3, #9
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fe:	e03e      	b.n	800a67e <__swsetup_r+0xba>
 800a600:	4b25      	ldr	r3, [pc, #148]	; (800a698 <__swsetup_r+0xd4>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d101      	bne.n	800a60a <__swsetup_r+0x46>
 800a606:	68ac      	ldr	r4, [r5, #8]
 800a608:	e7eb      	b.n	800a5e2 <__swsetup_r+0x1e>
 800a60a:	4b24      	ldr	r3, [pc, #144]	; (800a69c <__swsetup_r+0xd8>)
 800a60c:	429c      	cmp	r4, r3
 800a60e:	bf08      	it	eq
 800a610:	68ec      	ldreq	r4, [r5, #12]
 800a612:	e7e6      	b.n	800a5e2 <__swsetup_r+0x1e>
 800a614:	0758      	lsls	r0, r3, #29
 800a616:	d512      	bpl.n	800a63e <__swsetup_r+0x7a>
 800a618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a61a:	b141      	cbz	r1, 800a62e <__swsetup_r+0x6a>
 800a61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a620:	4299      	cmp	r1, r3
 800a622:	d002      	beq.n	800a62a <__swsetup_r+0x66>
 800a624:	4630      	mov	r0, r6
 800a626:	f001 fbfb 	bl	800be20 <_free_r>
 800a62a:	2300      	movs	r3, #0
 800a62c:	6363      	str	r3, [r4, #52]	; 0x34
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	2300      	movs	r3, #0
 800a638:	6063      	str	r3, [r4, #4]
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	f043 0308 	orr.w	r3, r3, #8
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	b94b      	cbnz	r3, 800a65e <__swsetup_r+0x9a>
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a654:	d003      	beq.n	800a65e <__swsetup_r+0x9a>
 800a656:	4621      	mov	r1, r4
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 ffff 	bl	800b65c <__smakebuf_r>
 800a65e:	89a0      	ldrh	r0, [r4, #12]
 800a660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a664:	f010 0301 	ands.w	r3, r0, #1
 800a668:	d00a      	beq.n	800a680 <__swsetup_r+0xbc>
 800a66a:	2300      	movs	r3, #0
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	6963      	ldr	r3, [r4, #20]
 800a670:	425b      	negs	r3, r3
 800a672:	61a3      	str	r3, [r4, #24]
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	b943      	cbnz	r3, 800a68a <__swsetup_r+0xc6>
 800a678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a67c:	d1ba      	bne.n	800a5f4 <__swsetup_r+0x30>
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	0781      	lsls	r1, r0, #30
 800a682:	bf58      	it	pl
 800a684:	6963      	ldrpl	r3, [r4, #20]
 800a686:	60a3      	str	r3, [r4, #8]
 800a688:	e7f4      	b.n	800a674 <__swsetup_r+0xb0>
 800a68a:	2000      	movs	r0, #0
 800a68c:	e7f7      	b.n	800a67e <__swsetup_r+0xba>
 800a68e:	bf00      	nop
 800a690:	24000038 	.word	0x24000038
 800a694:	0800d088 	.word	0x0800d088
 800a698:	0800d0a8 	.word	0x0800d0a8
 800a69c:	0800d068 	.word	0x0800d068

0800a6a0 <quorem>:
 800a6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	6903      	ldr	r3, [r0, #16]
 800a6a6:	690c      	ldr	r4, [r1, #16]
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	f2c0 8081 	blt.w	800a7b2 <quorem+0x112>
 800a6b0:	3c01      	subs	r4, #1
 800a6b2:	f101 0814 	add.w	r8, r1, #20
 800a6b6:	f100 0514 	add.w	r5, r0, #20
 800a6ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6d8:	d331      	bcc.n	800a73e <quorem+0x9e>
 800a6da:	f04f 0e00 	mov.w	lr, #0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	46ac      	mov	ip, r5
 800a6e2:	46f2      	mov	sl, lr
 800a6e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6e8:	b293      	uxth	r3, r2
 800a6ea:	fb06 e303 	mla	r3, r6, r3, lr
 800a6ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a6f8:	f8dc a000 	ldr.w	sl, [ip]
 800a6fc:	0c12      	lsrs	r2, r2, #16
 800a6fe:	fa13 f38a 	uxtah	r3, r3, sl
 800a702:	fb06 e202 	mla	r2, r6, r2, lr
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a70e:	b292      	uxth	r2, r2
 800a710:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a718:	f8bd 3000 	ldrh.w	r3, [sp]
 800a71c:	4581      	cmp	r9, r0
 800a71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a722:	f84c 3b04 	str.w	r3, [ip], #4
 800a726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a72a:	d2db      	bcs.n	800a6e4 <quorem+0x44>
 800a72c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a730:	b92b      	cbnz	r3, 800a73e <quorem+0x9e>
 800a732:	9b01      	ldr	r3, [sp, #4]
 800a734:	3b04      	subs	r3, #4
 800a736:	429d      	cmp	r5, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	d32e      	bcc.n	800a79a <quorem+0xfa>
 800a73c:	613c      	str	r4, [r7, #16]
 800a73e:	4638      	mov	r0, r7
 800a740:	f001 fa56 	bl	800bbf0 <__mcmp>
 800a744:	2800      	cmp	r0, #0
 800a746:	db24      	blt.n	800a792 <quorem+0xf2>
 800a748:	3601      	adds	r6, #1
 800a74a:	4628      	mov	r0, r5
 800a74c:	f04f 0c00 	mov.w	ip, #0
 800a750:	f858 2b04 	ldr.w	r2, [r8], #4
 800a754:	f8d0 e000 	ldr.w	lr, [r0]
 800a758:	b293      	uxth	r3, r2
 800a75a:	ebac 0303 	sub.w	r3, ip, r3
 800a75e:	0c12      	lsrs	r2, r2, #16
 800a760:	fa13 f38e 	uxtah	r3, r3, lr
 800a764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a772:	45c1      	cmp	r9, r8
 800a774:	f840 3b04 	str.w	r3, [r0], #4
 800a778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a77c:	d2e8      	bcs.n	800a750 <quorem+0xb0>
 800a77e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a786:	b922      	cbnz	r2, 800a792 <quorem+0xf2>
 800a788:	3b04      	subs	r3, #4
 800a78a:	429d      	cmp	r5, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	d30a      	bcc.n	800a7a6 <quorem+0x106>
 800a790:	613c      	str	r4, [r7, #16]
 800a792:	4630      	mov	r0, r6
 800a794:	b003      	add	sp, #12
 800a796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	3b04      	subs	r3, #4
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	d1cc      	bne.n	800a73c <quorem+0x9c>
 800a7a2:	3c01      	subs	r4, #1
 800a7a4:	e7c7      	b.n	800a736 <quorem+0x96>
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	3b04      	subs	r3, #4
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d1f0      	bne.n	800a790 <quorem+0xf0>
 800a7ae:	3c01      	subs	r4, #1
 800a7b0:	e7eb      	b.n	800a78a <quorem+0xea>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e7ee      	b.n	800a794 <quorem+0xf4>
	...

0800a7b8 <_dtoa_r>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	ed2d 8b02 	vpush	{d8}
 800a7c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7c2:	b091      	sub	sp, #68	; 0x44
 800a7c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7c8:	ec59 8b10 	vmov	r8, r9, d0
 800a7cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a7ce:	9106      	str	r1, [sp, #24]
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	9208      	str	r2, [sp, #32]
 800a7d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d6:	b975      	cbnz	r5, 800a7f6 <_dtoa_r+0x3e>
 800a7d8:	2010      	movs	r0, #16
 800a7da:	f000 ff7f 	bl	800b6dc <malloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	6270      	str	r0, [r6, #36]	; 0x24
 800a7e2:	b920      	cbnz	r0, 800a7ee <_dtoa_r+0x36>
 800a7e4:	4baa      	ldr	r3, [pc, #680]	; (800aa90 <_dtoa_r+0x2d8>)
 800a7e6:	21ea      	movs	r1, #234	; 0xea
 800a7e8:	48aa      	ldr	r0, [pc, #680]	; (800aa94 <_dtoa_r+0x2dc>)
 800a7ea:	f001 ff15 	bl	800c618 <__assert_func>
 800a7ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7f2:	6005      	str	r5, [r0, #0]
 800a7f4:	60c5      	str	r5, [r0, #12]
 800a7f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	b151      	cbz	r1, 800a812 <_dtoa_r+0x5a>
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	604a      	str	r2, [r1, #4]
 800a800:	2301      	movs	r3, #1
 800a802:	4093      	lsls	r3, r2
 800a804:	608b      	str	r3, [r1, #8]
 800a806:	4630      	mov	r0, r6
 800a808:	f000 ffb0 	bl	800b76c <_Bfree>
 800a80c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f1b9 0300 	subs.w	r3, r9, #0
 800a816:	bfbb      	ittet	lt
 800a818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a81c:	9303      	strlt	r3, [sp, #12]
 800a81e:	2300      	movge	r3, #0
 800a820:	2201      	movlt	r2, #1
 800a822:	bfac      	ite	ge
 800a824:	6023      	strge	r3, [r4, #0]
 800a826:	6022      	strlt	r2, [r4, #0]
 800a828:	4b9b      	ldr	r3, [pc, #620]	; (800aa98 <_dtoa_r+0x2e0>)
 800a82a:	9c03      	ldr	r4, [sp, #12]
 800a82c:	43a3      	bics	r3, r4
 800a82e:	d11c      	bne.n	800a86a <_dtoa_r+0xb2>
 800a830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a832:	f242 730f 	movw	r3, #9999	; 0x270f
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a83c:	ea53 0308 	orrs.w	r3, r3, r8
 800a840:	f000 84fd 	beq.w	800b23e <_dtoa_r+0xa86>
 800a844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a846:	b963      	cbnz	r3, 800a862 <_dtoa_r+0xaa>
 800a848:	4b94      	ldr	r3, [pc, #592]	; (800aa9c <_dtoa_r+0x2e4>)
 800a84a:	e01f      	b.n	800a88c <_dtoa_r+0xd4>
 800a84c:	4b94      	ldr	r3, [pc, #592]	; (800aaa0 <_dtoa_r+0x2e8>)
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	3308      	adds	r3, #8
 800a852:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	9801      	ldr	r0, [sp, #4]
 800a858:	b011      	add	sp, #68	; 0x44
 800a85a:	ecbd 8b02 	vpop	{d8}
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	4b8e      	ldr	r3, [pc, #568]	; (800aa9c <_dtoa_r+0x2e4>)
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	3303      	adds	r3, #3
 800a868:	e7f3      	b.n	800a852 <_dtoa_r+0x9a>
 800a86a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a86e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	d10b      	bne.n	800a890 <_dtoa_r+0xd8>
 800a878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87a:	2301      	movs	r3, #1
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 84d9 	beq.w	800b238 <_dtoa_r+0xa80>
 800a886:	4887      	ldr	r0, [pc, #540]	; (800aaa4 <_dtoa_r+0x2ec>)
 800a888:	6018      	str	r0, [r3, #0]
 800a88a:	1e43      	subs	r3, r0, #1
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	e7e2      	b.n	800a856 <_dtoa_r+0x9e>
 800a890:	a90f      	add	r1, sp, #60	; 0x3c
 800a892:	aa0e      	add	r2, sp, #56	; 0x38
 800a894:	4630      	mov	r0, r6
 800a896:	eeb0 0b48 	vmov.f64	d0, d8
 800a89a:	f001 fa4f 	bl	800bd3c <__d2b>
 800a89e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a8a6:	2900      	cmp	r1, #0
 800a8a8:	d046      	beq.n	800a938 <_dtoa_r+0x180>
 800a8aa:	ee18 4a90 	vmov	r4, s17
 800a8ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a8b2:	ec53 2b18 	vmov	r2, r3, d8
 800a8b6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a8ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a8c2:	2400      	movs	r4, #0
 800a8c4:	ec43 2b16 	vmov	d6, r2, r3
 800a8c8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a8cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800aa78 <_dtoa_r+0x2c0>
 800a8d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a8d4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800aa80 <_dtoa_r+0x2c8>
 800a8d8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a8dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800aa88 <_dtoa_r+0x2d0>
 800a8e0:	ee07 1a90 	vmov	s15, r1
 800a8e4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a8e8:	eeb0 7b46 	vmov.f64	d7, d6
 800a8ec:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a8f0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a8f4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fc:	ee16 ba90 	vmov	fp, s13
 800a900:	940a      	str	r4, [sp, #40]	; 0x28
 800a902:	d508      	bpl.n	800a916 <_dtoa_r+0x15e>
 800a904:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a908:	eeb4 6b47 	vcmp.f64	d6, d7
 800a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a910:	bf18      	it	ne
 800a912:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a916:	f1bb 0f16 	cmp.w	fp, #22
 800a91a:	d82f      	bhi.n	800a97c <_dtoa_r+0x1c4>
 800a91c:	4b62      	ldr	r3, [pc, #392]	; (800aaa8 <_dtoa_r+0x2f0>)
 800a91e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a922:	ed93 7b00 	vldr	d7, [r3]
 800a926:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92e:	d501      	bpl.n	800a934 <_dtoa_r+0x17c>
 800a930:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a934:	2300      	movs	r3, #0
 800a936:	e022      	b.n	800a97e <_dtoa_r+0x1c6>
 800a938:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a93a:	4401      	add	r1, r0
 800a93c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a940:	2b20      	cmp	r3, #32
 800a942:	bfc1      	itttt	gt
 800a944:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a948:	fa04 f303 	lslgt.w	r3, r4, r3
 800a94c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a950:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a954:	bfd6      	itet	le
 800a956:	f1c3 0320 	rsble	r3, r3, #32
 800a95a:	ea43 0808 	orrgt.w	r8, r3, r8
 800a95e:	fa08 f803 	lslle.w	r8, r8, r3
 800a962:	ee07 8a90 	vmov	s15, r8
 800a966:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a96a:	3901      	subs	r1, #1
 800a96c:	ee17 4a90 	vmov	r4, s15
 800a970:	ec53 2b17 	vmov	r2, r3, d7
 800a974:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a978:	2401      	movs	r4, #1
 800a97a:	e7a3      	b.n	800a8c4 <_dtoa_r+0x10c>
 800a97c:	2301      	movs	r3, #1
 800a97e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a980:	1a43      	subs	r3, r0, r1
 800a982:	1e5a      	subs	r2, r3, #1
 800a984:	bf45      	ittet	mi
 800a986:	f1c3 0301 	rsbmi	r3, r3, #1
 800a98a:	9304      	strmi	r3, [sp, #16]
 800a98c:	2300      	movpl	r3, #0
 800a98e:	2300      	movmi	r3, #0
 800a990:	9205      	str	r2, [sp, #20]
 800a992:	bf54      	ite	pl
 800a994:	9304      	strpl	r3, [sp, #16]
 800a996:	9305      	strmi	r3, [sp, #20]
 800a998:	f1bb 0f00 	cmp.w	fp, #0
 800a99c:	db18      	blt.n	800a9d0 <_dtoa_r+0x218>
 800a99e:	9b05      	ldr	r3, [sp, #20]
 800a9a0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a9a4:	445b      	add	r3, fp
 800a9a6:	9305      	str	r3, [sp, #20]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9a06      	ldr	r2, [sp, #24]
 800a9ac:	2a09      	cmp	r2, #9
 800a9ae:	d849      	bhi.n	800aa44 <_dtoa_r+0x28c>
 800a9b0:	2a05      	cmp	r2, #5
 800a9b2:	bfc4      	itt	gt
 800a9b4:	3a04      	subgt	r2, #4
 800a9b6:	9206      	strgt	r2, [sp, #24]
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	f1a2 0202 	sub.w	r2, r2, #2
 800a9be:	bfcc      	ite	gt
 800a9c0:	2400      	movgt	r4, #0
 800a9c2:	2401      	movle	r4, #1
 800a9c4:	2a03      	cmp	r2, #3
 800a9c6:	d848      	bhi.n	800aa5a <_dtoa_r+0x2a2>
 800a9c8:	e8df f002 	tbb	[pc, r2]
 800a9cc:	3a2c2e0b 	.word	0x3a2c2e0b
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	eba3 030b 	sub.w	r3, r3, fp
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	9209      	str	r2, [sp, #36]	; 0x24
 800a9dc:	f1cb 0300 	rsb	r3, fp, #0
 800a9e0:	e7e3      	b.n	800a9aa <_dtoa_r+0x1f2>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	9207      	str	r2, [sp, #28]
 800a9e6:	9a08      	ldr	r2, [sp, #32]
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	dc39      	bgt.n	800aa60 <_dtoa_r+0x2a8>
 800a9ec:	f04f 0a01 	mov.w	sl, #1
 800a9f0:	46d1      	mov	r9, sl
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	f8cd a020 	str.w	sl, [sp, #32]
 800a9f8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	6079      	str	r1, [r7, #4]
 800a9fe:	2004      	movs	r0, #4
 800aa00:	f100 0c14 	add.w	ip, r0, #20
 800aa04:	4594      	cmp	ip, r2
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	d92f      	bls.n	800aa6a <_dtoa_r+0x2b2>
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	930d      	str	r3, [sp, #52]	; 0x34
 800aa0e:	f000 fe6d 	bl	800b6ec <_Balloc>
 800aa12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa14:	9001      	str	r0, [sp, #4]
 800aa16:	4602      	mov	r2, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d149      	bne.n	800aab0 <_dtoa_r+0x2f8>
 800aa1c:	4b23      	ldr	r3, [pc, #140]	; (800aaac <_dtoa_r+0x2f4>)
 800aa1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa22:	e6e1      	b.n	800a7e8 <_dtoa_r+0x30>
 800aa24:	2201      	movs	r2, #1
 800aa26:	e7dd      	b.n	800a9e4 <_dtoa_r+0x22c>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	9207      	str	r2, [sp, #28]
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	eb0b 0a02 	add.w	sl, fp, r2
 800aa32:	f10a 0901 	add.w	r9, sl, #1
 800aa36:	464a      	mov	r2, r9
 800aa38:	2a01      	cmp	r2, #1
 800aa3a:	bfb8      	it	lt
 800aa3c:	2201      	movlt	r2, #1
 800aa3e:	e7db      	b.n	800a9f8 <_dtoa_r+0x240>
 800aa40:	2201      	movs	r2, #1
 800aa42:	e7f2      	b.n	800aa2a <_dtoa_r+0x272>
 800aa44:	2401      	movs	r4, #1
 800aa46:	2200      	movs	r2, #0
 800aa48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aa4c:	f04f 3aff 	mov.w	sl, #4294967295
 800aa50:	2100      	movs	r1, #0
 800aa52:	46d1      	mov	r9, sl
 800aa54:	2212      	movs	r2, #18
 800aa56:	9108      	str	r1, [sp, #32]
 800aa58:	e7ce      	b.n	800a9f8 <_dtoa_r+0x240>
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	9207      	str	r2, [sp, #28]
 800aa5e:	e7f5      	b.n	800aa4c <_dtoa_r+0x294>
 800aa60:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa64:	46d1      	mov	r9, sl
 800aa66:	4652      	mov	r2, sl
 800aa68:	e7c6      	b.n	800a9f8 <_dtoa_r+0x240>
 800aa6a:	3101      	adds	r1, #1
 800aa6c:	6079      	str	r1, [r7, #4]
 800aa6e:	0040      	lsls	r0, r0, #1
 800aa70:	e7c6      	b.n	800aa00 <_dtoa_r+0x248>
 800aa72:	bf00      	nop
 800aa74:	f3af 8000 	nop.w
 800aa78:	636f4361 	.word	0x636f4361
 800aa7c:	3fd287a7 	.word	0x3fd287a7
 800aa80:	8b60c8b3 	.word	0x8b60c8b3
 800aa84:	3fc68a28 	.word	0x3fc68a28
 800aa88:	509f79fb 	.word	0x509f79fb
 800aa8c:	3fd34413 	.word	0x3fd34413
 800aa90:	0800cfe5 	.word	0x0800cfe5
 800aa94:	0800cffc 	.word	0x0800cffc
 800aa98:	7ff00000 	.word	0x7ff00000
 800aa9c:	0800cfe1 	.word	0x0800cfe1
 800aaa0:	0800cfd8 	.word	0x0800cfd8
 800aaa4:	0800cfb5 	.word	0x0800cfb5
 800aaa8:	0800d150 	.word	0x0800d150
 800aaac:	0800d057 	.word	0x0800d057
 800aab0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800aab2:	9901      	ldr	r1, [sp, #4]
 800aab4:	6011      	str	r1, [r2, #0]
 800aab6:	f1b9 0f0e 	cmp.w	r9, #14
 800aaba:	d86c      	bhi.n	800ab96 <_dtoa_r+0x3de>
 800aabc:	2c00      	cmp	r4, #0
 800aabe:	d06a      	beq.n	800ab96 <_dtoa_r+0x3de>
 800aac0:	f1bb 0f00 	cmp.w	fp, #0
 800aac4:	f340 80a0 	ble.w	800ac08 <_dtoa_r+0x450>
 800aac8:	49c1      	ldr	r1, [pc, #772]	; (800add0 <_dtoa_r+0x618>)
 800aaca:	f00b 020f 	and.w	r2, fp, #15
 800aace:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800aad2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aad6:	ed92 7b00 	vldr	d7, [r2]
 800aada:	ea4f 112b 	mov.w	r1, fp, asr #4
 800aade:	f000 8087 	beq.w	800abf0 <_dtoa_r+0x438>
 800aae2:	4abc      	ldr	r2, [pc, #752]	; (800add4 <_dtoa_r+0x61c>)
 800aae4:	ed92 6b08 	vldr	d6, [r2, #32]
 800aae8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800aaec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aaf0:	f001 010f 	and.w	r1, r1, #15
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	48b7      	ldr	r0, [pc, #732]	; (800add4 <_dtoa_r+0x61c>)
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	d17b      	bne.n	800abf4 <_dtoa_r+0x43c>
 800aafc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	f000 80a2 	beq.w	800ac54 <_dtoa_r+0x49c>
 800ab10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ab14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab20:	f140 8098 	bpl.w	800ac54 <_dtoa_r+0x49c>
 800ab24:	f1b9 0f00 	cmp.w	r9, #0
 800ab28:	f000 8094 	beq.w	800ac54 <_dtoa_r+0x49c>
 800ab2c:	f1ba 0f00 	cmp.w	sl, #0
 800ab30:	dd2f      	ble.n	800ab92 <_dtoa_r+0x3da>
 800ab32:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ab36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab3e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab42:	3201      	adds	r2, #1
 800ab44:	4650      	mov	r0, sl
 800ab46:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab4a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ab4e:	ee07 2a90 	vmov	s15, r2
 800ab52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab56:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ab5a:	ee15 4a90 	vmov	r4, s11
 800ab5e:	ec52 1b15 	vmov	r1, r2, d5
 800ab62:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d177      	bne.n	800ac5a <_dtoa_r+0x4a2>
 800ab6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab72:	ec42 1b17 	vmov	d7, r1, r2
 800ab76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	f300 8263 	bgt.w	800b048 <_dtoa_r+0x890>
 800ab82:	eeb1 7b47 	vneg.f64	d7, d7
 800ab86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	f100 8258 	bmi.w	800b042 <_dtoa_r+0x88a>
 800ab92:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	f2c0 811d 	blt.w	800add8 <_dtoa_r+0x620>
 800ab9e:	f1bb 0f0e 	cmp.w	fp, #14
 800aba2:	f300 8119 	bgt.w	800add8 <_dtoa_r+0x620>
 800aba6:	4b8a      	ldr	r3, [pc, #552]	; (800add0 <_dtoa_r+0x618>)
 800aba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abac:	ed93 6b00 	vldr	d6, [r3]
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f280 80b7 	bge.w	800ad26 <_dtoa_r+0x56e>
 800abb8:	f1b9 0f00 	cmp.w	r9, #0
 800abbc:	f300 80b3 	bgt.w	800ad26 <_dtoa_r+0x56e>
 800abc0:	f040 823f 	bne.w	800b042 <_dtoa_r+0x88a>
 800abc4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800abc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800abcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	464c      	mov	r4, r9
 800abda:	464f      	mov	r7, r9
 800abdc:	f280 8215 	bge.w	800b00a <_dtoa_r+0x852>
 800abe0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abe4:	2331      	movs	r3, #49	; 0x31
 800abe6:	f808 3b01 	strb.w	r3, [r8], #1
 800abea:	f10b 0b01 	add.w	fp, fp, #1
 800abee:	e211      	b.n	800b014 <_dtoa_r+0x85c>
 800abf0:	2202      	movs	r2, #2
 800abf2:	e780      	b.n	800aaf6 <_dtoa_r+0x33e>
 800abf4:	07cc      	lsls	r4, r1, #31
 800abf6:	d504      	bpl.n	800ac02 <_dtoa_r+0x44a>
 800abf8:	ed90 6b00 	vldr	d6, [r0]
 800abfc:	3201      	adds	r2, #1
 800abfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac02:	1049      	asrs	r1, r1, #1
 800ac04:	3008      	adds	r0, #8
 800ac06:	e777      	b.n	800aaf8 <_dtoa_r+0x340>
 800ac08:	d022      	beq.n	800ac50 <_dtoa_r+0x498>
 800ac0a:	f1cb 0100 	rsb	r1, fp, #0
 800ac0e:	4a70      	ldr	r2, [pc, #448]	; (800add0 <_dtoa_r+0x618>)
 800ac10:	f001 000f 	and.w	r0, r1, #15
 800ac14:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ac18:	ed92 7b00 	vldr	d7, [r2]
 800ac1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac24:	486b      	ldr	r0, [pc, #428]	; (800add4 <_dtoa_r+0x61c>)
 800ac26:	1109      	asrs	r1, r1, #4
 800ac28:	2400      	movs	r4, #0
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	b929      	cbnz	r1, 800ac3a <_dtoa_r+0x482>
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	f43f af6a 	beq.w	800ab08 <_dtoa_r+0x350>
 800ac34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac38:	e766      	b.n	800ab08 <_dtoa_r+0x350>
 800ac3a:	07cf      	lsls	r7, r1, #31
 800ac3c:	d505      	bpl.n	800ac4a <_dtoa_r+0x492>
 800ac3e:	ed90 6b00 	vldr	d6, [r0]
 800ac42:	3201      	adds	r2, #1
 800ac44:	2401      	movs	r4, #1
 800ac46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac4a:	1049      	asrs	r1, r1, #1
 800ac4c:	3008      	adds	r0, #8
 800ac4e:	e7ed      	b.n	800ac2c <_dtoa_r+0x474>
 800ac50:	2202      	movs	r2, #2
 800ac52:	e759      	b.n	800ab08 <_dtoa_r+0x350>
 800ac54:	465f      	mov	r7, fp
 800ac56:	4648      	mov	r0, r9
 800ac58:	e775      	b.n	800ab46 <_dtoa_r+0x38e>
 800ac5a:	ec42 1b17 	vmov	d7, r1, r2
 800ac5e:	4a5c      	ldr	r2, [pc, #368]	; (800add0 <_dtoa_r+0x618>)
 800ac60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ac64:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ac68:	9a01      	ldr	r2, [sp, #4]
 800ac6a:	1814      	adds	r4, r2, r0
 800ac6c:	9a07      	ldr	r2, [sp, #28]
 800ac6e:	b352      	cbz	r2, 800acc6 <_dtoa_r+0x50e>
 800ac70:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ac74:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ac78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac7c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ac80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac8c:	ee14 2a90 	vmov	r2, s9
 800ac90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac94:	3230      	adds	r2, #48	; 0x30
 800ac96:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca2:	f808 2b01 	strb.w	r2, [r8], #1
 800aca6:	d439      	bmi.n	800ad1c <_dtoa_r+0x564>
 800aca8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800acac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800acb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb4:	d472      	bmi.n	800ad9c <_dtoa_r+0x5e4>
 800acb6:	45a0      	cmp	r8, r4
 800acb8:	f43f af6b 	beq.w	800ab92 <_dtoa_r+0x3da>
 800acbc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800acc0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800acc4:	e7e0      	b.n	800ac88 <_dtoa_r+0x4d0>
 800acc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800acce:	4621      	mov	r1, r4
 800acd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800acd4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acd8:	ee14 2a90 	vmov	r2, s9
 800acdc:	3230      	adds	r2, #48	; 0x30
 800acde:	f808 2b01 	strb.w	r2, [r8], #1
 800ace2:	45a0      	cmp	r8, r4
 800ace4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ace8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800acec:	d118      	bne.n	800ad20 <_dtoa_r+0x568>
 800acee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800acf2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800acf6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	dc4d      	bgt.n	800ad9c <_dtoa_r+0x5e4>
 800ad00:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ad04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0c:	f57f af41 	bpl.w	800ab92 <_dtoa_r+0x3da>
 800ad10:	4688      	mov	r8, r1
 800ad12:	3901      	subs	r1, #1
 800ad14:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ad18:	2b30      	cmp	r3, #48	; 0x30
 800ad1a:	d0f9      	beq.n	800ad10 <_dtoa_r+0x558>
 800ad1c:	46bb      	mov	fp, r7
 800ad1e:	e02a      	b.n	800ad76 <_dtoa_r+0x5be>
 800ad20:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad24:	e7d6      	b.n	800acd4 <_dtoa_r+0x51c>
 800ad26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ad2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad32:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ad36:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ad3a:	ee15 3a10 	vmov	r3, s10
 800ad3e:	3330      	adds	r3, #48	; 0x30
 800ad40:	f808 3b01 	strb.w	r3, [r8], #1
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	eba8 0303 	sub.w	r3, r8, r3
 800ad4a:	4599      	cmp	r9, r3
 800ad4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ad50:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ad54:	d133      	bne.n	800adbe <_dtoa_r+0x606>
 800ad56:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad62:	dc1a      	bgt.n	800ad9a <_dtoa_r+0x5e2>
 800ad64:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6c:	d103      	bne.n	800ad76 <_dtoa_r+0x5be>
 800ad6e:	ee15 3a10 	vmov	r3, s10
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d411      	bmi.n	800ad9a <_dtoa_r+0x5e2>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 fcf7 	bl	800b76c <_Bfree>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	f888 3000 	strb.w	r3, [r8]
 800ad86:	f10b 0301 	add.w	r3, fp, #1
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f43f ad61 	beq.w	800a856 <_dtoa_r+0x9e>
 800ad94:	f8c3 8000 	str.w	r8, [r3]
 800ad98:	e55d      	b.n	800a856 <_dtoa_r+0x9e>
 800ad9a:	465f      	mov	r7, fp
 800ad9c:	4643      	mov	r3, r8
 800ad9e:	4698      	mov	r8, r3
 800ada0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ada4:	2a39      	cmp	r2, #57	; 0x39
 800ada6:	d106      	bne.n	800adb6 <_dtoa_r+0x5fe>
 800ada8:	9a01      	ldr	r2, [sp, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d1f7      	bne.n	800ad9e <_dtoa_r+0x5e6>
 800adae:	9901      	ldr	r1, [sp, #4]
 800adb0:	2230      	movs	r2, #48	; 0x30
 800adb2:	3701      	adds	r7, #1
 800adb4:	700a      	strb	r2, [r1, #0]
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	3201      	adds	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e7ae      	b.n	800ad1c <_dtoa_r+0x564>
 800adbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800adc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	d1b2      	bne.n	800ad32 <_dtoa_r+0x57a>
 800adcc:	e7d3      	b.n	800ad76 <_dtoa_r+0x5be>
 800adce:	bf00      	nop
 800add0:	0800d150 	.word	0x0800d150
 800add4:	0800d128 	.word	0x0800d128
 800add8:	9907      	ldr	r1, [sp, #28]
 800adda:	2900      	cmp	r1, #0
 800addc:	f000 80d0 	beq.w	800af80 <_dtoa_r+0x7c8>
 800ade0:	9906      	ldr	r1, [sp, #24]
 800ade2:	2901      	cmp	r1, #1
 800ade4:	f300 80b4 	bgt.w	800af50 <_dtoa_r+0x798>
 800ade8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adea:	2900      	cmp	r1, #0
 800adec:	f000 80ac 	beq.w	800af48 <_dtoa_r+0x790>
 800adf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800adf8:	461c      	mov	r4, r3
 800adfa:	930a      	str	r3, [sp, #40]	; 0x28
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	4413      	add	r3, r2
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	2101      	movs	r1, #1
 800ae06:	4413      	add	r3, r2
 800ae08:	4630      	mov	r0, r6
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	f000 fd66 	bl	800b8dc <__i2b>
 800ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae12:	4607      	mov	r7, r0
 800ae14:	f1b8 0f00 	cmp.w	r8, #0
 800ae18:	dd0d      	ble.n	800ae36 <_dtoa_r+0x67e>
 800ae1a:	9a05      	ldr	r2, [sp, #20]
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	dd0a      	ble.n	800ae36 <_dtoa_r+0x67e>
 800ae20:	4542      	cmp	r2, r8
 800ae22:	9904      	ldr	r1, [sp, #16]
 800ae24:	bfa8      	it	ge
 800ae26:	4642      	movge	r2, r8
 800ae28:	1a89      	subs	r1, r1, r2
 800ae2a:	9104      	str	r1, [sp, #16]
 800ae2c:	9905      	ldr	r1, [sp, #20]
 800ae2e:	eba8 0802 	sub.w	r8, r8, r2
 800ae32:	1a8a      	subs	r2, r1, r2
 800ae34:	9205      	str	r2, [sp, #20]
 800ae36:	b303      	cbz	r3, 800ae7a <_dtoa_r+0x6c2>
 800ae38:	9a07      	ldr	r2, [sp, #28]
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	f000 80a5 	beq.w	800af8a <_dtoa_r+0x7d2>
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	dd13      	ble.n	800ae6c <_dtoa_r+0x6b4>
 800ae44:	4639      	mov	r1, r7
 800ae46:	4622      	mov	r2, r4
 800ae48:	4630      	mov	r0, r6
 800ae4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae4c:	f000 fe06 	bl	800ba5c <__pow5mult>
 800ae50:	462a      	mov	r2, r5
 800ae52:	4601      	mov	r1, r0
 800ae54:	4607      	mov	r7, r0
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 fd56 	bl	800b908 <__multiply>
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	900a      	str	r0, [sp, #40]	; 0x28
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 fc83 	bl	800b76c <_Bfree>
 800ae66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6a:	4615      	mov	r5, r2
 800ae6c:	1b1a      	subs	r2, r3, r4
 800ae6e:	d004      	beq.n	800ae7a <_dtoa_r+0x6c2>
 800ae70:	4629      	mov	r1, r5
 800ae72:	4630      	mov	r0, r6
 800ae74:	f000 fdf2 	bl	800ba5c <__pow5mult>
 800ae78:	4605      	mov	r5, r0
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f000 fd2d 	bl	800b8dc <__i2b>
 800ae82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	f340 8081 	ble.w	800af8e <_dtoa_r+0x7d6>
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4601      	mov	r1, r0
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 fde3 	bl	800ba5c <__pow5mult>
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	dd7a      	ble.n	800af94 <_dtoa_r+0x7dc>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	930a      	str	r3, [sp, #40]	; 0x28
 800aea2:	6922      	ldr	r2, [r4, #16]
 800aea4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aea8:	6910      	ldr	r0, [r2, #16]
 800aeaa:	f000 fcc7 	bl	800b83c <__hi0bits>
 800aeae:	f1c0 0020 	rsb	r0, r0, #32
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	4418      	add	r0, r3
 800aeb6:	f010 001f 	ands.w	r0, r0, #31
 800aeba:	f000 808c 	beq.w	800afd6 <_dtoa_r+0x81e>
 800aebe:	f1c0 0220 	rsb	r2, r0, #32
 800aec2:	2a04      	cmp	r2, #4
 800aec4:	f340 8085 	ble.w	800afd2 <_dtoa_r+0x81a>
 800aec8:	f1c0 001c 	rsb	r0, r0, #28
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	4403      	add	r3, r0
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	4403      	add	r3, r0
 800aed6:	4480      	add	r8, r0
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	9b04      	ldr	r3, [sp, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dd05      	ble.n	800aeec <_dtoa_r+0x734>
 800aee0:	4629      	mov	r1, r5
 800aee2:	461a      	mov	r2, r3
 800aee4:	4630      	mov	r0, r6
 800aee6:	f000 fe13 	bl	800bb10 <__lshift>
 800aeea:	4605      	mov	r5, r0
 800aeec:	9b05      	ldr	r3, [sp, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dd05      	ble.n	800aefe <_dtoa_r+0x746>
 800aef2:	4621      	mov	r1, r4
 800aef4:	461a      	mov	r2, r3
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 fe0a 	bl	800bb10 <__lshift>
 800aefc:	4604      	mov	r4, r0
 800aefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d06a      	beq.n	800afda <_dtoa_r+0x822>
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 fe72 	bl	800bbf0 <__mcmp>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	da64      	bge.n	800afda <_dtoa_r+0x822>
 800af10:	2300      	movs	r3, #0
 800af12:	4629      	mov	r1, r5
 800af14:	220a      	movs	r2, #10
 800af16:	4630      	mov	r0, r6
 800af18:	f000 fc4a 	bl	800b7b0 <__multadd>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af22:	4605      	mov	r5, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 8191 	beq.w	800b24c <_dtoa_r+0xa94>
 800af2a:	4639      	mov	r1, r7
 800af2c:	2300      	movs	r3, #0
 800af2e:	220a      	movs	r2, #10
 800af30:	4630      	mov	r0, r6
 800af32:	f000 fc3d 	bl	800b7b0 <__multadd>
 800af36:	f1ba 0f00 	cmp.w	sl, #0
 800af3a:	4607      	mov	r7, r0
 800af3c:	f300 808d 	bgt.w	800b05a <_dtoa_r+0x8a2>
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	2b02      	cmp	r3, #2
 800af44:	dc50      	bgt.n	800afe8 <_dtoa_r+0x830>
 800af46:	e088      	b.n	800b05a <_dtoa_r+0x8a2>
 800af48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af4e:	e751      	b.n	800adf4 <_dtoa_r+0x63c>
 800af50:	f109 34ff 	add.w	r4, r9, #4294967295
 800af54:	42a3      	cmp	r3, r4
 800af56:	bfbf      	itttt	lt
 800af58:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800af5a:	1ae3      	sublt	r3, r4, r3
 800af5c:	18d2      	addlt	r2, r2, r3
 800af5e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800af60:	bfb6      	itet	lt
 800af62:	4623      	movlt	r3, r4
 800af64:	1b1c      	subge	r4, r3, r4
 800af66:	2400      	movlt	r4, #0
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	bfb5      	itete	lt
 800af6e:	9a04      	ldrlt	r2, [sp, #16]
 800af70:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800af74:	eba2 0809 	sublt.w	r8, r2, r9
 800af78:	464a      	movge	r2, r9
 800af7a:	bfb8      	it	lt
 800af7c:	2200      	movlt	r2, #0
 800af7e:	e73c      	b.n	800adfa <_dtoa_r+0x642>
 800af80:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af84:	9f07      	ldr	r7, [sp, #28]
 800af86:	461c      	mov	r4, r3
 800af88:	e744      	b.n	800ae14 <_dtoa_r+0x65c>
 800af8a:	461a      	mov	r2, r3
 800af8c:	e770      	b.n	800ae70 <_dtoa_r+0x6b8>
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	2b01      	cmp	r3, #1
 800af92:	dc18      	bgt.n	800afc6 <_dtoa_r+0x80e>
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	b9b3      	cbnz	r3, 800afc6 <_dtoa_r+0x80e>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800af9e:	b9a2      	cbnz	r2, 800afca <_dtoa_r+0x812>
 800afa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800afa4:	0d12      	lsrs	r2, r2, #20
 800afa6:	0512      	lsls	r2, r2, #20
 800afa8:	b18a      	cbz	r2, 800afce <_dtoa_r+0x816>
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	3301      	adds	r3, #1
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	9b05      	ldr	r3, [sp, #20]
 800afb2:	3301      	adds	r3, #1
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	2301      	movs	r3, #1
 800afb8:	930a      	str	r3, [sp, #40]	; 0x28
 800afba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f47f af70 	bne.w	800aea2 <_dtoa_r+0x6ea>
 800afc2:	2001      	movs	r0, #1
 800afc4:	e775      	b.n	800aeb2 <_dtoa_r+0x6fa>
 800afc6:	2300      	movs	r3, #0
 800afc8:	e7f6      	b.n	800afb8 <_dtoa_r+0x800>
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	e7f4      	b.n	800afb8 <_dtoa_r+0x800>
 800afce:	920a      	str	r2, [sp, #40]	; 0x28
 800afd0:	e7f3      	b.n	800afba <_dtoa_r+0x802>
 800afd2:	d082      	beq.n	800aeda <_dtoa_r+0x722>
 800afd4:	4610      	mov	r0, r2
 800afd6:	301c      	adds	r0, #28
 800afd8:	e778      	b.n	800aecc <_dtoa_r+0x714>
 800afda:	f1b9 0f00 	cmp.w	r9, #0
 800afde:	dc37      	bgt.n	800b050 <_dtoa_r+0x898>
 800afe0:	9b06      	ldr	r3, [sp, #24]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	dd34      	ble.n	800b050 <_dtoa_r+0x898>
 800afe6:	46ca      	mov	sl, r9
 800afe8:	f1ba 0f00 	cmp.w	sl, #0
 800afec:	d10d      	bne.n	800b00a <_dtoa_r+0x852>
 800afee:	4621      	mov	r1, r4
 800aff0:	4653      	mov	r3, sl
 800aff2:	2205      	movs	r2, #5
 800aff4:	4630      	mov	r0, r6
 800aff6:	f000 fbdb 	bl	800b7b0 <__multadd>
 800affa:	4601      	mov	r1, r0
 800affc:	4604      	mov	r4, r0
 800affe:	4628      	mov	r0, r5
 800b000:	f000 fdf6 	bl	800bbf0 <__mcmp>
 800b004:	2800      	cmp	r0, #0
 800b006:	f73f adeb 	bgt.w	800abe0 <_dtoa_r+0x428>
 800b00a:	9b08      	ldr	r3, [sp, #32]
 800b00c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b010:	ea6f 0b03 	mvn.w	fp, r3
 800b014:	f04f 0900 	mov.w	r9, #0
 800b018:	4621      	mov	r1, r4
 800b01a:	4630      	mov	r0, r6
 800b01c:	f000 fba6 	bl	800b76c <_Bfree>
 800b020:	2f00      	cmp	r7, #0
 800b022:	f43f aea8 	beq.w	800ad76 <_dtoa_r+0x5be>
 800b026:	f1b9 0f00 	cmp.w	r9, #0
 800b02a:	d005      	beq.n	800b038 <_dtoa_r+0x880>
 800b02c:	45b9      	cmp	r9, r7
 800b02e:	d003      	beq.n	800b038 <_dtoa_r+0x880>
 800b030:	4649      	mov	r1, r9
 800b032:	4630      	mov	r0, r6
 800b034:	f000 fb9a 	bl	800b76c <_Bfree>
 800b038:	4639      	mov	r1, r7
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 fb96 	bl	800b76c <_Bfree>
 800b040:	e699      	b.n	800ad76 <_dtoa_r+0x5be>
 800b042:	2400      	movs	r4, #0
 800b044:	4627      	mov	r7, r4
 800b046:	e7e0      	b.n	800b00a <_dtoa_r+0x852>
 800b048:	46bb      	mov	fp, r7
 800b04a:	4604      	mov	r4, r0
 800b04c:	4607      	mov	r7, r0
 800b04e:	e5c7      	b.n	800abe0 <_dtoa_r+0x428>
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	46ca      	mov	sl, r9
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8100 	beq.w	800b25a <_dtoa_r+0xaa2>
 800b05a:	f1b8 0f00 	cmp.w	r8, #0
 800b05e:	dd05      	ble.n	800b06c <_dtoa_r+0x8b4>
 800b060:	4639      	mov	r1, r7
 800b062:	4642      	mov	r2, r8
 800b064:	4630      	mov	r0, r6
 800b066:	f000 fd53 	bl	800bb10 <__lshift>
 800b06a:	4607      	mov	r7, r0
 800b06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d05d      	beq.n	800b12e <_dtoa_r+0x976>
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	4630      	mov	r0, r6
 800b076:	f000 fb39 	bl	800b6ec <_Balloc>
 800b07a:	4680      	mov	r8, r0
 800b07c:	b928      	cbnz	r0, 800b08a <_dtoa_r+0x8d2>
 800b07e:	4b82      	ldr	r3, [pc, #520]	; (800b288 <_dtoa_r+0xad0>)
 800b080:	4602      	mov	r2, r0
 800b082:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b086:	f7ff bbaf 	b.w	800a7e8 <_dtoa_r+0x30>
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	3202      	adds	r2, #2
 800b08e:	0092      	lsls	r2, r2, #2
 800b090:	f107 010c 	add.w	r1, r7, #12
 800b094:	300c      	adds	r0, #12
 800b096:	f7fe fd07 	bl	8009aa8 <memcpy>
 800b09a:	2201      	movs	r2, #1
 800b09c:	4641      	mov	r1, r8
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f000 fd36 	bl	800bb10 <__lshift>
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	4453      	add	r3, sl
 800b0ae:	9308      	str	r3, [sp, #32]
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	46b9      	mov	r9, r7
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	9302      	str	r3, [sp, #8]
 800b0c6:	f7ff faeb 	bl	800a6a0 <quorem>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	3330      	adds	r3, #48	; 0x30
 800b0ce:	9005      	str	r0, [sp, #20]
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d6:	f000 fd8b 	bl	800bbf0 <__mcmp>
 800b0da:	463a      	mov	r2, r7
 800b0dc:	4682      	mov	sl, r0
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 fda1 	bl	800bc28 <__mdiff>
 800b0e6:	68c2      	ldr	r2, [r0, #12]
 800b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ea:	4680      	mov	r8, r0
 800b0ec:	bb0a      	cbnz	r2, 800b132 <_dtoa_r+0x97a>
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 fd7d 	bl	800bbf0 <__mcmp>
 800b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	4641      	mov	r1, r8
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b102:	f000 fb33 	bl	800b76c <_Bfree>
 800b106:	9b06      	ldr	r3, [sp, #24]
 800b108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b10e:	ea43 0102 	orr.w	r1, r3, r2
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	430b      	orrs	r3, r1
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	d10d      	bne.n	800b136 <_dtoa_r+0x97e>
 800b11a:	2b39      	cmp	r3, #57	; 0x39
 800b11c:	d029      	beq.n	800b172 <_dtoa_r+0x9ba>
 800b11e:	f1ba 0f00 	cmp.w	sl, #0
 800b122:	dd01      	ble.n	800b128 <_dtoa_r+0x970>
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	3331      	adds	r3, #49	; 0x31
 800b128:	9a02      	ldr	r2, [sp, #8]
 800b12a:	7013      	strb	r3, [r2, #0]
 800b12c:	e774      	b.n	800b018 <_dtoa_r+0x860>
 800b12e:	4638      	mov	r0, r7
 800b130:	e7b8      	b.n	800b0a4 <_dtoa_r+0x8ec>
 800b132:	2201      	movs	r2, #1
 800b134:	e7e1      	b.n	800b0fa <_dtoa_r+0x942>
 800b136:	f1ba 0f00 	cmp.w	sl, #0
 800b13a:	db06      	blt.n	800b14a <_dtoa_r+0x992>
 800b13c:	9906      	ldr	r1, [sp, #24]
 800b13e:	ea41 0a0a 	orr.w	sl, r1, sl
 800b142:	9907      	ldr	r1, [sp, #28]
 800b144:	ea5a 0101 	orrs.w	r1, sl, r1
 800b148:	d120      	bne.n	800b18c <_dtoa_r+0x9d4>
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	ddec      	ble.n	800b128 <_dtoa_r+0x970>
 800b14e:	4629      	mov	r1, r5
 800b150:	2201      	movs	r2, #1
 800b152:	4630      	mov	r0, r6
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	f000 fcdb 	bl	800bb10 <__lshift>
 800b15a:	4621      	mov	r1, r4
 800b15c:	4605      	mov	r5, r0
 800b15e:	f000 fd47 	bl	800bbf0 <__mcmp>
 800b162:	2800      	cmp	r0, #0
 800b164:	9b04      	ldr	r3, [sp, #16]
 800b166:	dc02      	bgt.n	800b16e <_dtoa_r+0x9b6>
 800b168:	d1de      	bne.n	800b128 <_dtoa_r+0x970>
 800b16a:	07da      	lsls	r2, r3, #31
 800b16c:	d5dc      	bpl.n	800b128 <_dtoa_r+0x970>
 800b16e:	2b39      	cmp	r3, #57	; 0x39
 800b170:	d1d8      	bne.n	800b124 <_dtoa_r+0x96c>
 800b172:	9a02      	ldr	r2, [sp, #8]
 800b174:	2339      	movs	r3, #57	; 0x39
 800b176:	7013      	strb	r3, [r2, #0]
 800b178:	4643      	mov	r3, r8
 800b17a:	4698      	mov	r8, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b182:	2a39      	cmp	r2, #57	; 0x39
 800b184:	d051      	beq.n	800b22a <_dtoa_r+0xa72>
 800b186:	3201      	adds	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	e745      	b.n	800b018 <_dtoa_r+0x860>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	dd03      	ble.n	800b198 <_dtoa_r+0x9e0>
 800b190:	2b39      	cmp	r3, #57	; 0x39
 800b192:	d0ee      	beq.n	800b172 <_dtoa_r+0x9ba>
 800b194:	3301      	adds	r3, #1
 800b196:	e7c7      	b.n	800b128 <_dtoa_r+0x970>
 800b198:	9a04      	ldr	r2, [sp, #16]
 800b19a:	9908      	ldr	r1, [sp, #32]
 800b19c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	d02b      	beq.n	800b1fc <_dtoa_r+0xa44>
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 fb00 	bl	800b7b0 <__multadd>
 800b1b0:	45b9      	cmp	r9, r7
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	f04f 020a 	mov.w	r2, #10
 800b1bc:	4649      	mov	r1, r9
 800b1be:	4630      	mov	r0, r6
 800b1c0:	d107      	bne.n	800b1d2 <_dtoa_r+0xa1a>
 800b1c2:	f000 faf5 	bl	800b7b0 <__multadd>
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	e774      	b.n	800b0bc <_dtoa_r+0x904>
 800b1d2:	f000 faed 	bl	800b7b0 <__multadd>
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	4681      	mov	r9, r0
 800b1da:	2300      	movs	r3, #0
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 fae6 	bl	800b7b0 <__multadd>
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	e7f0      	b.n	800b1ca <_dtoa_r+0xa12>
 800b1e8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	bfcc      	ite	gt
 800b1f0:	46d0      	movgt	r8, sl
 800b1f2:	f04f 0801 	movle.w	r8, #1
 800b1f6:	4490      	add	r8, r2
 800b1f8:	f04f 0900 	mov.w	r9, #0
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	2201      	movs	r2, #1
 800b200:	4630      	mov	r0, r6
 800b202:	9302      	str	r3, [sp, #8]
 800b204:	f000 fc84 	bl	800bb10 <__lshift>
 800b208:	4621      	mov	r1, r4
 800b20a:	4605      	mov	r5, r0
 800b20c:	f000 fcf0 	bl	800bbf0 <__mcmp>
 800b210:	2800      	cmp	r0, #0
 800b212:	dcb1      	bgt.n	800b178 <_dtoa_r+0x9c0>
 800b214:	d102      	bne.n	800b21c <_dtoa_r+0xa64>
 800b216:	9b02      	ldr	r3, [sp, #8]
 800b218:	07db      	lsls	r3, r3, #31
 800b21a:	d4ad      	bmi.n	800b178 <_dtoa_r+0x9c0>
 800b21c:	4643      	mov	r3, r8
 800b21e:	4698      	mov	r8, r3
 800b220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b224:	2a30      	cmp	r2, #48	; 0x30
 800b226:	d0fa      	beq.n	800b21e <_dtoa_r+0xa66>
 800b228:	e6f6      	b.n	800b018 <_dtoa_r+0x860>
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d1a4      	bne.n	800b17a <_dtoa_r+0x9c2>
 800b230:	f10b 0b01 	add.w	fp, fp, #1
 800b234:	2331      	movs	r3, #49	; 0x31
 800b236:	e778      	b.n	800b12a <_dtoa_r+0x972>
 800b238:	4b14      	ldr	r3, [pc, #80]	; (800b28c <_dtoa_r+0xad4>)
 800b23a:	f7ff bb27 	b.w	800a88c <_dtoa_r+0xd4>
 800b23e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b240:	2b00      	cmp	r3, #0
 800b242:	f47f ab03 	bne.w	800a84c <_dtoa_r+0x94>
 800b246:	4b12      	ldr	r3, [pc, #72]	; (800b290 <_dtoa_r+0xad8>)
 800b248:	f7ff bb20 	b.w	800a88c <_dtoa_r+0xd4>
 800b24c:	f1ba 0f00 	cmp.w	sl, #0
 800b250:	dc03      	bgt.n	800b25a <_dtoa_r+0xaa2>
 800b252:	9b06      	ldr	r3, [sp, #24]
 800b254:	2b02      	cmp	r3, #2
 800b256:	f73f aec7 	bgt.w	800afe8 <_dtoa_r+0x830>
 800b25a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b25e:	4621      	mov	r1, r4
 800b260:	4628      	mov	r0, r5
 800b262:	f7ff fa1d 	bl	800a6a0 <quorem>
 800b266:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b26a:	f808 3b01 	strb.w	r3, [r8], #1
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	eba8 0202 	sub.w	r2, r8, r2
 800b274:	4592      	cmp	sl, r2
 800b276:	ddb7      	ble.n	800b1e8 <_dtoa_r+0xa30>
 800b278:	4629      	mov	r1, r5
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	4630      	mov	r0, r6
 800b280:	f000 fa96 	bl	800b7b0 <__multadd>
 800b284:	4605      	mov	r5, r0
 800b286:	e7ea      	b.n	800b25e <_dtoa_r+0xaa6>
 800b288:	0800d057 	.word	0x0800d057
 800b28c:	0800cfb4 	.word	0x0800cfb4
 800b290:	0800cfd8 	.word	0x0800cfd8

0800b294 <__sflush_r>:
 800b294:	898a      	ldrh	r2, [r1, #12]
 800b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	4605      	mov	r5, r0
 800b29c:	0710      	lsls	r0, r2, #28
 800b29e:	460c      	mov	r4, r1
 800b2a0:	d458      	bmi.n	800b354 <__sflush_r+0xc0>
 800b2a2:	684b      	ldr	r3, [r1, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dc05      	bgt.n	800b2b4 <__sflush_r+0x20>
 800b2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dc02      	bgt.n	800b2b4 <__sflush_r+0x20>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d0f9      	beq.n	800b2ae <__sflush_r+0x1a>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2c0:	682f      	ldr	r7, [r5, #0]
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	d032      	beq.n	800b32c <__sflush_r+0x98>
 800b2c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	075a      	lsls	r2, r3, #29
 800b2cc:	d505      	bpl.n	800b2da <__sflush_r+0x46>
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	1ac0      	subs	r0, r0, r3
 800b2d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2d4:	b10b      	cbz	r3, 800b2da <__sflush_r+0x46>
 800b2d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2d8:	1ac0      	subs	r0, r0, r3
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b0      	blx	r6
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	d106      	bne.n	800b2fa <__sflush_r+0x66>
 800b2ec:	6829      	ldr	r1, [r5, #0]
 800b2ee:	291d      	cmp	r1, #29
 800b2f0:	d82c      	bhi.n	800b34c <__sflush_r+0xb8>
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	; (800b39c <__sflush_r+0x108>)
 800b2f4:	40ca      	lsrs	r2, r1
 800b2f6:	07d6      	lsls	r6, r2, #31
 800b2f8:	d528      	bpl.n	800b34c <__sflush_r+0xb8>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	6062      	str	r2, [r4, #4]
 800b2fe:	04d9      	lsls	r1, r3, #19
 800b300:	6922      	ldr	r2, [r4, #16]
 800b302:	6022      	str	r2, [r4, #0]
 800b304:	d504      	bpl.n	800b310 <__sflush_r+0x7c>
 800b306:	1c42      	adds	r2, r0, #1
 800b308:	d101      	bne.n	800b30e <__sflush_r+0x7a>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	b903      	cbnz	r3, 800b310 <__sflush_r+0x7c>
 800b30e:	6560      	str	r0, [r4, #84]	; 0x54
 800b310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b312:	602f      	str	r7, [r5, #0]
 800b314:	2900      	cmp	r1, #0
 800b316:	d0ca      	beq.n	800b2ae <__sflush_r+0x1a>
 800b318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b31c:	4299      	cmp	r1, r3
 800b31e:	d002      	beq.n	800b326 <__sflush_r+0x92>
 800b320:	4628      	mov	r0, r5
 800b322:	f000 fd7d 	bl	800be20 <_free_r>
 800b326:	2000      	movs	r0, #0
 800b328:	6360      	str	r0, [r4, #52]	; 0x34
 800b32a:	e7c1      	b.n	800b2b0 <__sflush_r+0x1c>
 800b32c:	6a21      	ldr	r1, [r4, #32]
 800b32e:	2301      	movs	r3, #1
 800b330:	4628      	mov	r0, r5
 800b332:	47b0      	blx	r6
 800b334:	1c41      	adds	r1, r0, #1
 800b336:	d1c7      	bne.n	800b2c8 <__sflush_r+0x34>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0c4      	beq.n	800b2c8 <__sflush_r+0x34>
 800b33e:	2b1d      	cmp	r3, #29
 800b340:	d001      	beq.n	800b346 <__sflush_r+0xb2>
 800b342:	2b16      	cmp	r3, #22
 800b344:	d101      	bne.n	800b34a <__sflush_r+0xb6>
 800b346:	602f      	str	r7, [r5, #0]
 800b348:	e7b1      	b.n	800b2ae <__sflush_r+0x1a>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	e7ad      	b.n	800b2b0 <__sflush_r+0x1c>
 800b354:	690f      	ldr	r7, [r1, #16]
 800b356:	2f00      	cmp	r7, #0
 800b358:	d0a9      	beq.n	800b2ae <__sflush_r+0x1a>
 800b35a:	0793      	lsls	r3, r2, #30
 800b35c:	680e      	ldr	r6, [r1, #0]
 800b35e:	bf08      	it	eq
 800b360:	694b      	ldreq	r3, [r1, #20]
 800b362:	600f      	str	r7, [r1, #0]
 800b364:	bf18      	it	ne
 800b366:	2300      	movne	r3, #0
 800b368:	eba6 0807 	sub.w	r8, r6, r7
 800b36c:	608b      	str	r3, [r1, #8]
 800b36e:	f1b8 0f00 	cmp.w	r8, #0
 800b372:	dd9c      	ble.n	800b2ae <__sflush_r+0x1a>
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b378:	4643      	mov	r3, r8
 800b37a:	463a      	mov	r2, r7
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b0      	blx	r6
 800b380:	2800      	cmp	r0, #0
 800b382:	dc06      	bgt.n	800b392 <__sflush_r+0xfe>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	e78e      	b.n	800b2b0 <__sflush_r+0x1c>
 800b392:	4407      	add	r7, r0
 800b394:	eba8 0800 	sub.w	r8, r8, r0
 800b398:	e7e9      	b.n	800b36e <__sflush_r+0xda>
 800b39a:	bf00      	nop
 800b39c:	20400001 	.word	0x20400001

0800b3a0 <_fflush_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	b913      	cbnz	r3, 800b3b0 <_fflush_r+0x10>
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	b118      	cbz	r0, 800b3ba <_fflush_r+0x1a>
 800b3b2:	6983      	ldr	r3, [r0, #24]
 800b3b4:	b90b      	cbnz	r3, 800b3ba <_fflush_r+0x1a>
 800b3b6:	f000 f887 	bl	800b4c8 <__sinit>
 800b3ba:	4b14      	ldr	r3, [pc, #80]	; (800b40c <_fflush_r+0x6c>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	d11b      	bne.n	800b3f8 <_fflush_r+0x58>
 800b3c0:	686c      	ldr	r4, [r5, #4]
 800b3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ef      	beq.n	800b3aa <_fflush_r+0xa>
 800b3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3cc:	07d0      	lsls	r0, r2, #31
 800b3ce:	d404      	bmi.n	800b3da <_fflush_r+0x3a>
 800b3d0:	0599      	lsls	r1, r3, #22
 800b3d2:	d402      	bmi.n	800b3da <_fflush_r+0x3a>
 800b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d6:	f000 f91a 	bl	800b60e <__retarget_lock_acquire_recursive>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7ff ff59 	bl	800b294 <__sflush_r>
 800b3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3e4:	07da      	lsls	r2, r3, #31
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	d4e0      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	059b      	lsls	r3, r3, #22
 800b3ee:	d4dd      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f2:	f000 f90d 	bl	800b610 <__retarget_lock_release_recursive>
 800b3f6:	e7d9      	b.n	800b3ac <_fflush_r+0xc>
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <_fflush_r+0x70>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d101      	bne.n	800b402 <_fflush_r+0x62>
 800b3fe:	68ac      	ldr	r4, [r5, #8]
 800b400:	e7df      	b.n	800b3c2 <_fflush_r+0x22>
 800b402:	4b04      	ldr	r3, [pc, #16]	; (800b414 <_fflush_r+0x74>)
 800b404:	429c      	cmp	r4, r3
 800b406:	bf08      	it	eq
 800b408:	68ec      	ldreq	r4, [r5, #12]
 800b40a:	e7da      	b.n	800b3c2 <_fflush_r+0x22>
 800b40c:	0800d088 	.word	0x0800d088
 800b410:	0800d0a8 	.word	0x0800d0a8
 800b414:	0800d068 	.word	0x0800d068

0800b418 <std>:
 800b418:	2300      	movs	r3, #0
 800b41a:	b510      	push	{r4, lr}
 800b41c:	4604      	mov	r4, r0
 800b41e:	e9c0 3300 	strd	r3, r3, [r0]
 800b422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b426:	6083      	str	r3, [r0, #8]
 800b428:	8181      	strh	r1, [r0, #12]
 800b42a:	6643      	str	r3, [r0, #100]	; 0x64
 800b42c:	81c2      	strh	r2, [r0, #14]
 800b42e:	6183      	str	r3, [r0, #24]
 800b430:	4619      	mov	r1, r3
 800b432:	2208      	movs	r2, #8
 800b434:	305c      	adds	r0, #92	; 0x5c
 800b436:	f7fe fb45 	bl	8009ac4 <memset>
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <std+0x38>)
 800b43c:	6263      	str	r3, [r4, #36]	; 0x24
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <std+0x3c>)
 800b440:	62a3      	str	r3, [r4, #40]	; 0x28
 800b442:	4b05      	ldr	r3, [pc, #20]	; (800b458 <std+0x40>)
 800b444:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <std+0x44>)
 800b448:	6224      	str	r4, [r4, #32]
 800b44a:	6323      	str	r3, [r4, #48]	; 0x30
 800b44c:	bd10      	pop	{r4, pc}
 800b44e:	bf00      	nop
 800b450:	0800c56d 	.word	0x0800c56d
 800b454:	0800c58f 	.word	0x0800c58f
 800b458:	0800c5c7 	.word	0x0800c5c7
 800b45c:	0800c5eb 	.word	0x0800c5eb

0800b460 <_cleanup_r>:
 800b460:	4901      	ldr	r1, [pc, #4]	; (800b468 <_cleanup_r+0x8>)
 800b462:	f000 b8af 	b.w	800b5c4 <_fwalk_reent>
 800b466:	bf00      	nop
 800b468:	0800b3a1 	.word	0x0800b3a1

0800b46c <__sfmoreglue>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	2268      	movs	r2, #104	; 0x68
 800b470:	1e4d      	subs	r5, r1, #1
 800b472:	4355      	muls	r5, r2
 800b474:	460e      	mov	r6, r1
 800b476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b47a:	f000 fd3d 	bl	800bef8 <_malloc_r>
 800b47e:	4604      	mov	r4, r0
 800b480:	b140      	cbz	r0, 800b494 <__sfmoreglue+0x28>
 800b482:	2100      	movs	r1, #0
 800b484:	e9c0 1600 	strd	r1, r6, [r0]
 800b488:	300c      	adds	r0, #12
 800b48a:	60a0      	str	r0, [r4, #8]
 800b48c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b490:	f7fe fb18 	bl	8009ac4 <memset>
 800b494:	4620      	mov	r0, r4
 800b496:	bd70      	pop	{r4, r5, r6, pc}

0800b498 <__sfp_lock_acquire>:
 800b498:	4801      	ldr	r0, [pc, #4]	; (800b4a0 <__sfp_lock_acquire+0x8>)
 800b49a:	f000 b8b8 	b.w	800b60e <__retarget_lock_acquire_recursive>
 800b49e:	bf00      	nop
 800b4a0:	240006b1 	.word	0x240006b1

0800b4a4 <__sfp_lock_release>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	; (800b4ac <__sfp_lock_release+0x8>)
 800b4a6:	f000 b8b3 	b.w	800b610 <__retarget_lock_release_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	240006b1 	.word	0x240006b1

0800b4b0 <__sinit_lock_acquire>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__sinit_lock_acquire+0x8>)
 800b4b2:	f000 b8ac 	b.w	800b60e <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	240006b2 	.word	0x240006b2

0800b4bc <__sinit_lock_release>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__sinit_lock_release+0x8>)
 800b4be:	f000 b8a7 	b.w	800b610 <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	240006b2 	.word	0x240006b2

0800b4c8 <__sinit>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	f7ff fff0 	bl	800b4b0 <__sinit_lock_acquire>
 800b4d0:	69a3      	ldr	r3, [r4, #24]
 800b4d2:	b11b      	cbz	r3, 800b4dc <__sinit+0x14>
 800b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d8:	f7ff bff0 	b.w	800b4bc <__sinit_lock_release>
 800b4dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4e2:	4b13      	ldr	r3, [pc, #76]	; (800b530 <__sinit+0x68>)
 800b4e4:	4a13      	ldr	r2, [pc, #76]	; (800b534 <__sinit+0x6c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	bf04      	itt	eq
 800b4ee:	2301      	moveq	r3, #1
 800b4f0:	61a3      	streq	r3, [r4, #24]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 f820 	bl	800b538 <__sfp>
 800b4f8:	6060      	str	r0, [r4, #4]
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 f81c 	bl	800b538 <__sfp>
 800b500:	60a0      	str	r0, [r4, #8]
 800b502:	4620      	mov	r0, r4
 800b504:	f000 f818 	bl	800b538 <__sfp>
 800b508:	2200      	movs	r2, #0
 800b50a:	60e0      	str	r0, [r4, #12]
 800b50c:	2104      	movs	r1, #4
 800b50e:	6860      	ldr	r0, [r4, #4]
 800b510:	f7ff ff82 	bl	800b418 <std>
 800b514:	68a0      	ldr	r0, [r4, #8]
 800b516:	2201      	movs	r2, #1
 800b518:	2109      	movs	r1, #9
 800b51a:	f7ff ff7d 	bl	800b418 <std>
 800b51e:	68e0      	ldr	r0, [r4, #12]
 800b520:	2202      	movs	r2, #2
 800b522:	2112      	movs	r1, #18
 800b524:	f7ff ff78 	bl	800b418 <std>
 800b528:	2301      	movs	r3, #1
 800b52a:	61a3      	str	r3, [r4, #24]
 800b52c:	e7d2      	b.n	800b4d4 <__sinit+0xc>
 800b52e:	bf00      	nop
 800b530:	0800cfa0 	.word	0x0800cfa0
 800b534:	0800b461 	.word	0x0800b461

0800b538 <__sfp>:
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	4607      	mov	r7, r0
 800b53c:	f7ff ffac 	bl	800b498 <__sfp_lock_acquire>
 800b540:	4b1e      	ldr	r3, [pc, #120]	; (800b5bc <__sfp+0x84>)
 800b542:	681e      	ldr	r6, [r3, #0]
 800b544:	69b3      	ldr	r3, [r6, #24]
 800b546:	b913      	cbnz	r3, 800b54e <__sfp+0x16>
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ffbd 	bl	800b4c8 <__sinit>
 800b54e:	3648      	adds	r6, #72	; 0x48
 800b550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b554:	3b01      	subs	r3, #1
 800b556:	d503      	bpl.n	800b560 <__sfp+0x28>
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	b30b      	cbz	r3, 800b5a0 <__sfp+0x68>
 800b55c:	6836      	ldr	r6, [r6, #0]
 800b55e:	e7f7      	b.n	800b550 <__sfp+0x18>
 800b560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b564:	b9d5      	cbnz	r5, 800b59c <__sfp+0x64>
 800b566:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <__sfp+0x88>)
 800b568:	60e3      	str	r3, [r4, #12]
 800b56a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b56e:	6665      	str	r5, [r4, #100]	; 0x64
 800b570:	f000 f84c 	bl	800b60c <__retarget_lock_init_recursive>
 800b574:	f7ff ff96 	bl	800b4a4 <__sfp_lock_release>
 800b578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b57c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b580:	6025      	str	r5, [r4, #0]
 800b582:	61a5      	str	r5, [r4, #24]
 800b584:	2208      	movs	r2, #8
 800b586:	4629      	mov	r1, r5
 800b588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b58c:	f7fe fa9a 	bl	8009ac4 <memset>
 800b590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b598:	4620      	mov	r0, r4
 800b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b59c:	3468      	adds	r4, #104	; 0x68
 800b59e:	e7d9      	b.n	800b554 <__sfp+0x1c>
 800b5a0:	2104      	movs	r1, #4
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7ff ff62 	bl	800b46c <__sfmoreglue>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	6030      	str	r0, [r6, #0]
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d1d5      	bne.n	800b55c <__sfp+0x24>
 800b5b0:	f7ff ff78 	bl	800b4a4 <__sfp_lock_release>
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	e7ee      	b.n	800b598 <__sfp+0x60>
 800b5ba:	bf00      	nop
 800b5bc:	0800cfa0 	.word	0x0800cfa0
 800b5c0:	ffff0001 	.word	0xffff0001

0800b5c4 <_fwalk_reent>:
 800b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	4688      	mov	r8, r1
 800b5cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5d0:	2700      	movs	r7, #0
 800b5d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b5da:	d505      	bpl.n	800b5e8 <_fwalk_reent+0x24>
 800b5dc:	6824      	ldr	r4, [r4, #0]
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	d1f7      	bne.n	800b5d2 <_fwalk_reent+0xe>
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d907      	bls.n	800b5fe <_fwalk_reent+0x3a>
 800b5ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	d003      	beq.n	800b5fe <_fwalk_reent+0x3a>
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	47c0      	blx	r8
 800b5fc:	4307      	orrs	r7, r0
 800b5fe:	3568      	adds	r5, #104	; 0x68
 800b600:	e7e9      	b.n	800b5d6 <_fwalk_reent+0x12>
	...

0800b604 <_localeconv_r>:
 800b604:	4800      	ldr	r0, [pc, #0]	; (800b608 <_localeconv_r+0x4>)
 800b606:	4770      	bx	lr
 800b608:	2400018c 	.word	0x2400018c

0800b60c <__retarget_lock_init_recursive>:
 800b60c:	4770      	bx	lr

0800b60e <__retarget_lock_acquire_recursive>:
 800b60e:	4770      	bx	lr

0800b610 <__retarget_lock_release_recursive>:
 800b610:	4770      	bx	lr

0800b612 <__swhatbuf_r>:
 800b612:	b570      	push	{r4, r5, r6, lr}
 800b614:	460e      	mov	r6, r1
 800b616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61a:	2900      	cmp	r1, #0
 800b61c:	b096      	sub	sp, #88	; 0x58
 800b61e:	4614      	mov	r4, r2
 800b620:	461d      	mov	r5, r3
 800b622:	da08      	bge.n	800b636 <__swhatbuf_r+0x24>
 800b624:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	602a      	str	r2, [r5, #0]
 800b62c:	061a      	lsls	r2, r3, #24
 800b62e:	d410      	bmi.n	800b652 <__swhatbuf_r+0x40>
 800b630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b634:	e00e      	b.n	800b654 <__swhatbuf_r+0x42>
 800b636:	466a      	mov	r2, sp
 800b638:	f001 f82e 	bl	800c698 <_fstat_r>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	dbf1      	blt.n	800b624 <__swhatbuf_r+0x12>
 800b640:	9a01      	ldr	r2, [sp, #4]
 800b642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b64a:	425a      	negs	r2, r3
 800b64c:	415a      	adcs	r2, r3
 800b64e:	602a      	str	r2, [r5, #0]
 800b650:	e7ee      	b.n	800b630 <__swhatbuf_r+0x1e>
 800b652:	2340      	movs	r3, #64	; 0x40
 800b654:	2000      	movs	r0, #0
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	b016      	add	sp, #88	; 0x58
 800b65a:	bd70      	pop	{r4, r5, r6, pc}

0800b65c <__smakebuf_r>:
 800b65c:	898b      	ldrh	r3, [r1, #12]
 800b65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b660:	079d      	lsls	r5, r3, #30
 800b662:	4606      	mov	r6, r0
 800b664:	460c      	mov	r4, r1
 800b666:	d507      	bpl.n	800b678 <__smakebuf_r+0x1c>
 800b668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	6123      	str	r3, [r4, #16]
 800b670:	2301      	movs	r3, #1
 800b672:	6163      	str	r3, [r4, #20]
 800b674:	b002      	add	sp, #8
 800b676:	bd70      	pop	{r4, r5, r6, pc}
 800b678:	ab01      	add	r3, sp, #4
 800b67a:	466a      	mov	r2, sp
 800b67c:	f7ff ffc9 	bl	800b612 <__swhatbuf_r>
 800b680:	9900      	ldr	r1, [sp, #0]
 800b682:	4605      	mov	r5, r0
 800b684:	4630      	mov	r0, r6
 800b686:	f000 fc37 	bl	800bef8 <_malloc_r>
 800b68a:	b948      	cbnz	r0, 800b6a0 <__smakebuf_r+0x44>
 800b68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b690:	059a      	lsls	r2, r3, #22
 800b692:	d4ef      	bmi.n	800b674 <__smakebuf_r+0x18>
 800b694:	f023 0303 	bic.w	r3, r3, #3
 800b698:	f043 0302 	orr.w	r3, r3, #2
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	e7e3      	b.n	800b668 <__smakebuf_r+0xc>
 800b6a0:	4b0d      	ldr	r3, [pc, #52]	; (800b6d8 <__smakebuf_r+0x7c>)
 800b6a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	6020      	str	r0, [r4, #0]
 800b6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ac:	81a3      	strh	r3, [r4, #12]
 800b6ae:	9b00      	ldr	r3, [sp, #0]
 800b6b0:	6163      	str	r3, [r4, #20]
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	6120      	str	r0, [r4, #16]
 800b6b6:	b15b      	cbz	r3, 800b6d0 <__smakebuf_r+0x74>
 800b6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f000 fffd 	bl	800c6bc <_isatty_r>
 800b6c2:	b128      	cbz	r0, 800b6d0 <__smakebuf_r+0x74>
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	f023 0303 	bic.w	r3, r3, #3
 800b6ca:	f043 0301 	orr.w	r3, r3, #1
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	89a0      	ldrh	r0, [r4, #12]
 800b6d2:	4305      	orrs	r5, r0
 800b6d4:	81a5      	strh	r5, [r4, #12]
 800b6d6:	e7cd      	b.n	800b674 <__smakebuf_r+0x18>
 800b6d8:	0800b461 	.word	0x0800b461

0800b6dc <malloc>:
 800b6dc:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <malloc+0xc>)
 800b6de:	4601      	mov	r1, r0
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	f000 bc09 	b.w	800bef8 <_malloc_r>
 800b6e6:	bf00      	nop
 800b6e8:	24000038 	.word	0x24000038

0800b6ec <_Balloc>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	b976      	cbnz	r6, 800b714 <_Balloc+0x28>
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	f7ff fff0 	bl	800b6dc <malloc>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b700:	b920      	cbnz	r0, 800b70c <_Balloc+0x20>
 800b702:	4b18      	ldr	r3, [pc, #96]	; (800b764 <_Balloc+0x78>)
 800b704:	4818      	ldr	r0, [pc, #96]	; (800b768 <_Balloc+0x7c>)
 800b706:	2166      	movs	r1, #102	; 0x66
 800b708:	f000 ff86 	bl	800c618 <__assert_func>
 800b70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b710:	6006      	str	r6, [r0, #0]
 800b712:	60c6      	str	r6, [r0, #12]
 800b714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b716:	68f3      	ldr	r3, [r6, #12]
 800b718:	b183      	cbz	r3, 800b73c <_Balloc+0x50>
 800b71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b722:	b9b8      	cbnz	r0, 800b754 <_Balloc+0x68>
 800b724:	2101      	movs	r1, #1
 800b726:	fa01 f605 	lsl.w	r6, r1, r5
 800b72a:	1d72      	adds	r2, r6, #5
 800b72c:	0092      	lsls	r2, r2, #2
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 fb60 	bl	800bdf4 <_calloc_r>
 800b734:	b160      	cbz	r0, 800b750 <_Balloc+0x64>
 800b736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b73a:	e00e      	b.n	800b75a <_Balloc+0x6e>
 800b73c:	2221      	movs	r2, #33	; 0x21
 800b73e:	2104      	movs	r1, #4
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fb57 	bl	800bdf4 <_calloc_r>
 800b746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b748:	60f0      	str	r0, [r6, #12]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e4      	bne.n	800b71a <_Balloc+0x2e>
 800b750:	2000      	movs	r0, #0
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	6802      	ldr	r2, [r0, #0]
 800b756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b75a:	2300      	movs	r3, #0
 800b75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b760:	e7f7      	b.n	800b752 <_Balloc+0x66>
 800b762:	bf00      	nop
 800b764:	0800cfe5 	.word	0x0800cfe5
 800b768:	0800d0c8 	.word	0x0800d0c8

0800b76c <_Bfree>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b976      	cbnz	r6, 800b794 <_Bfree+0x28>
 800b776:	2010      	movs	r0, #16
 800b778:	f7ff ffb0 	bl	800b6dc <malloc>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6268      	str	r0, [r5, #36]	; 0x24
 800b780:	b920      	cbnz	r0, 800b78c <_Bfree+0x20>
 800b782:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <_Bfree+0x3c>)
 800b784:	4809      	ldr	r0, [pc, #36]	; (800b7ac <_Bfree+0x40>)
 800b786:	218a      	movs	r1, #138	; 0x8a
 800b788:	f000 ff46 	bl	800c618 <__assert_func>
 800b78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b790:	6006      	str	r6, [r0, #0]
 800b792:	60c6      	str	r6, [r0, #12]
 800b794:	b13c      	cbz	r4, 800b7a6 <_Bfree+0x3a>
 800b796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b798:	6862      	ldr	r2, [r4, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7a0:	6021      	str	r1, [r4, #0]
 800b7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	0800cfe5 	.word	0x0800cfe5
 800b7ac:	0800d0c8 	.word	0x0800d0c8

0800b7b0 <__multadd>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	690d      	ldr	r5, [r1, #16]
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	f101 0c14 	add.w	ip, r1, #20
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b7c6:	b299      	uxth	r1, r3
 800b7c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b7cc:	0c1e      	lsrs	r6, r3, #16
 800b7ce:	0c0b      	lsrs	r3, r1, #16
 800b7d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b7d4:	b289      	uxth	r1, r1
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7dc:	4285      	cmp	r5, r0
 800b7de:	f84c 1b04 	str.w	r1, [ip], #4
 800b7e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7e6:	dcec      	bgt.n	800b7c2 <__multadd+0x12>
 800b7e8:	b30e      	cbz	r6, 800b82e <__multadd+0x7e>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	42ab      	cmp	r3, r5
 800b7ee:	dc19      	bgt.n	800b824 <__multadd+0x74>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	3101      	adds	r1, #1
 800b7f6:	f7ff ff79 	bl	800b6ec <_Balloc>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	b928      	cbnz	r0, 800b80a <__multadd+0x5a>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <__multadd+0x84>)
 800b802:	480d      	ldr	r0, [pc, #52]	; (800b838 <__multadd+0x88>)
 800b804:	21b5      	movs	r1, #181	; 0xb5
 800b806:	f000 ff07 	bl	800c618 <__assert_func>
 800b80a:	6922      	ldr	r2, [r4, #16]
 800b80c:	3202      	adds	r2, #2
 800b80e:	f104 010c 	add.w	r1, r4, #12
 800b812:	0092      	lsls	r2, r2, #2
 800b814:	300c      	adds	r0, #12
 800b816:	f7fe f947 	bl	8009aa8 <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff ffa5 	bl	800b76c <_Bfree>
 800b822:	4644      	mov	r4, r8
 800b824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b828:	3501      	adds	r5, #1
 800b82a:	615e      	str	r6, [r3, #20]
 800b82c:	6125      	str	r5, [r4, #16]
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	0800d057 	.word	0x0800d057
 800b838:	0800d0c8 	.word	0x0800d0c8

0800b83c <__hi0bits>:
 800b83c:	0c03      	lsrs	r3, r0, #16
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	b9d3      	cbnz	r3, 800b878 <__hi0bits+0x3c>
 800b842:	0400      	lsls	r0, r0, #16
 800b844:	2310      	movs	r3, #16
 800b846:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b84a:	bf04      	itt	eq
 800b84c:	0200      	lsleq	r0, r0, #8
 800b84e:	3308      	addeq	r3, #8
 800b850:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b854:	bf04      	itt	eq
 800b856:	0100      	lsleq	r0, r0, #4
 800b858:	3304      	addeq	r3, #4
 800b85a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b85e:	bf04      	itt	eq
 800b860:	0080      	lsleq	r0, r0, #2
 800b862:	3302      	addeq	r3, #2
 800b864:	2800      	cmp	r0, #0
 800b866:	db05      	blt.n	800b874 <__hi0bits+0x38>
 800b868:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b86c:	f103 0301 	add.w	r3, r3, #1
 800b870:	bf08      	it	eq
 800b872:	2320      	moveq	r3, #32
 800b874:	4618      	mov	r0, r3
 800b876:	4770      	bx	lr
 800b878:	2300      	movs	r3, #0
 800b87a:	e7e4      	b.n	800b846 <__hi0bits+0xa>

0800b87c <__lo0bits>:
 800b87c:	6803      	ldr	r3, [r0, #0]
 800b87e:	f013 0207 	ands.w	r2, r3, #7
 800b882:	4601      	mov	r1, r0
 800b884:	d00b      	beq.n	800b89e <__lo0bits+0x22>
 800b886:	07da      	lsls	r2, r3, #31
 800b888:	d423      	bmi.n	800b8d2 <__lo0bits+0x56>
 800b88a:	0798      	lsls	r0, r3, #30
 800b88c:	bf49      	itett	mi
 800b88e:	085b      	lsrmi	r3, r3, #1
 800b890:	089b      	lsrpl	r3, r3, #2
 800b892:	2001      	movmi	r0, #1
 800b894:	600b      	strmi	r3, [r1, #0]
 800b896:	bf5c      	itt	pl
 800b898:	600b      	strpl	r3, [r1, #0]
 800b89a:	2002      	movpl	r0, #2
 800b89c:	4770      	bx	lr
 800b89e:	b298      	uxth	r0, r3
 800b8a0:	b9a8      	cbnz	r0, 800b8ce <__lo0bits+0x52>
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	2010      	movs	r0, #16
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	b90a      	cbnz	r2, 800b8ae <__lo0bits+0x32>
 800b8aa:	3008      	adds	r0, #8
 800b8ac:	0a1b      	lsrs	r3, r3, #8
 800b8ae:	071a      	lsls	r2, r3, #28
 800b8b0:	bf04      	itt	eq
 800b8b2:	091b      	lsreq	r3, r3, #4
 800b8b4:	3004      	addeq	r0, #4
 800b8b6:	079a      	lsls	r2, r3, #30
 800b8b8:	bf04      	itt	eq
 800b8ba:	089b      	lsreq	r3, r3, #2
 800b8bc:	3002      	addeq	r0, #2
 800b8be:	07da      	lsls	r2, r3, #31
 800b8c0:	d403      	bmi.n	800b8ca <__lo0bits+0x4e>
 800b8c2:	085b      	lsrs	r3, r3, #1
 800b8c4:	f100 0001 	add.w	r0, r0, #1
 800b8c8:	d005      	beq.n	800b8d6 <__lo0bits+0x5a>
 800b8ca:	600b      	str	r3, [r1, #0]
 800b8cc:	4770      	bx	lr
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	e7e9      	b.n	800b8a6 <__lo0bits+0x2a>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	4770      	bx	lr
 800b8d6:	2020      	movs	r0, #32
 800b8d8:	4770      	bx	lr
	...

0800b8dc <__i2b>:
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	460c      	mov	r4, r1
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	f7ff ff03 	bl	800b6ec <_Balloc>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	b928      	cbnz	r0, 800b8f6 <__i2b+0x1a>
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <__i2b+0x24>)
 800b8ec:	4805      	ldr	r0, [pc, #20]	; (800b904 <__i2b+0x28>)
 800b8ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8f2:	f000 fe91 	bl	800c618 <__assert_func>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	6144      	str	r4, [r0, #20]
 800b8fa:	6103      	str	r3, [r0, #16]
 800b8fc:	bd10      	pop	{r4, pc}
 800b8fe:	bf00      	nop
 800b900:	0800d057 	.word	0x0800d057
 800b904:	0800d0c8 	.word	0x0800d0c8

0800b908 <__multiply>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	4691      	mov	r9, r2
 800b90e:	690a      	ldr	r2, [r1, #16]
 800b910:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b914:	429a      	cmp	r2, r3
 800b916:	bfb8      	it	lt
 800b918:	460b      	movlt	r3, r1
 800b91a:	460c      	mov	r4, r1
 800b91c:	bfbc      	itt	lt
 800b91e:	464c      	movlt	r4, r9
 800b920:	4699      	movlt	r9, r3
 800b922:	6927      	ldr	r7, [r4, #16]
 800b924:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	6861      	ldr	r1, [r4, #4]
 800b92c:	eb07 060a 	add.w	r6, r7, sl
 800b930:	42b3      	cmp	r3, r6
 800b932:	b085      	sub	sp, #20
 800b934:	bfb8      	it	lt
 800b936:	3101      	addlt	r1, #1
 800b938:	f7ff fed8 	bl	800b6ec <_Balloc>
 800b93c:	b930      	cbnz	r0, 800b94c <__multiply+0x44>
 800b93e:	4602      	mov	r2, r0
 800b940:	4b44      	ldr	r3, [pc, #272]	; (800ba54 <__multiply+0x14c>)
 800b942:	4845      	ldr	r0, [pc, #276]	; (800ba58 <__multiply+0x150>)
 800b944:	f240 115d 	movw	r1, #349	; 0x15d
 800b948:	f000 fe66 	bl	800c618 <__assert_func>
 800b94c:	f100 0514 	add.w	r5, r0, #20
 800b950:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b954:	462b      	mov	r3, r5
 800b956:	2200      	movs	r2, #0
 800b958:	4543      	cmp	r3, r8
 800b95a:	d321      	bcc.n	800b9a0 <__multiply+0x98>
 800b95c:	f104 0314 	add.w	r3, r4, #20
 800b960:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b964:	f109 0314 	add.w	r3, r9, #20
 800b968:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b96c:	9202      	str	r2, [sp, #8]
 800b96e:	1b3a      	subs	r2, r7, r4
 800b970:	3a15      	subs	r2, #21
 800b972:	f022 0203 	bic.w	r2, r2, #3
 800b976:	3204      	adds	r2, #4
 800b978:	f104 0115 	add.w	r1, r4, #21
 800b97c:	428f      	cmp	r7, r1
 800b97e:	bf38      	it	cc
 800b980:	2204      	movcc	r2, #4
 800b982:	9201      	str	r2, [sp, #4]
 800b984:	9a02      	ldr	r2, [sp, #8]
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d80c      	bhi.n	800b9a6 <__multiply+0x9e>
 800b98c:	2e00      	cmp	r6, #0
 800b98e:	dd03      	ble.n	800b998 <__multiply+0x90>
 800b990:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b994:	2b00      	cmp	r3, #0
 800b996:	d05a      	beq.n	800ba4e <__multiply+0x146>
 800b998:	6106      	str	r6, [r0, #16]
 800b99a:	b005      	add	sp, #20
 800b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a0:	f843 2b04 	str.w	r2, [r3], #4
 800b9a4:	e7d8      	b.n	800b958 <__multiply+0x50>
 800b9a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9aa:	f1ba 0f00 	cmp.w	sl, #0
 800b9ae:	d024      	beq.n	800b9fa <__multiply+0xf2>
 800b9b0:	f104 0e14 	add.w	lr, r4, #20
 800b9b4:	46a9      	mov	r9, r5
 800b9b6:	f04f 0c00 	mov.w	ip, #0
 800b9ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9be:	f8d9 1000 	ldr.w	r1, [r9]
 800b9c2:	fa1f fb82 	uxth.w	fp, r2
 800b9c6:	b289      	uxth	r1, r1
 800b9c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b9d4:	4461      	add	r1, ip
 800b9d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9e2:	b289      	uxth	r1, r1
 800b9e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9e8:	4577      	cmp	r7, lr
 800b9ea:	f849 1b04 	str.w	r1, [r9], #4
 800b9ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9f2:	d8e2      	bhi.n	800b9ba <__multiply+0xb2>
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	f845 c002 	str.w	ip, [r5, r2]
 800b9fa:	9a03      	ldr	r2, [sp, #12]
 800b9fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba00:	3304      	adds	r3, #4
 800ba02:	f1b9 0f00 	cmp.w	r9, #0
 800ba06:	d020      	beq.n	800ba4a <__multiply+0x142>
 800ba08:	6829      	ldr	r1, [r5, #0]
 800ba0a:	f104 0c14 	add.w	ip, r4, #20
 800ba0e:	46ae      	mov	lr, r5
 800ba10:	f04f 0a00 	mov.w	sl, #0
 800ba14:	f8bc b000 	ldrh.w	fp, [ip]
 800ba18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba1c:	fb09 220b 	mla	r2, r9, fp, r2
 800ba20:	4492      	add	sl, r2
 800ba22:	b289      	uxth	r1, r1
 800ba24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba28:	f84e 1b04 	str.w	r1, [lr], #4
 800ba2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba30:	f8be 1000 	ldrh.w	r1, [lr]
 800ba34:	0c12      	lsrs	r2, r2, #16
 800ba36:	fb09 1102 	mla	r1, r9, r2, r1
 800ba3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba3e:	4567      	cmp	r7, ip
 800ba40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba44:	d8e6      	bhi.n	800ba14 <__multiply+0x10c>
 800ba46:	9a01      	ldr	r2, [sp, #4]
 800ba48:	50a9      	str	r1, [r5, r2]
 800ba4a:	3504      	adds	r5, #4
 800ba4c:	e79a      	b.n	800b984 <__multiply+0x7c>
 800ba4e:	3e01      	subs	r6, #1
 800ba50:	e79c      	b.n	800b98c <__multiply+0x84>
 800ba52:	bf00      	nop
 800ba54:	0800d057 	.word	0x0800d057
 800ba58:	0800d0c8 	.word	0x0800d0c8

0800ba5c <__pow5mult>:
 800ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba60:	4615      	mov	r5, r2
 800ba62:	f012 0203 	ands.w	r2, r2, #3
 800ba66:	4606      	mov	r6, r0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	d007      	beq.n	800ba7c <__pow5mult+0x20>
 800ba6c:	4c25      	ldr	r4, [pc, #148]	; (800bb04 <__pow5mult+0xa8>)
 800ba6e:	3a01      	subs	r2, #1
 800ba70:	2300      	movs	r3, #0
 800ba72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba76:	f7ff fe9b 	bl	800b7b0 <__multadd>
 800ba7a:	4607      	mov	r7, r0
 800ba7c:	10ad      	asrs	r5, r5, #2
 800ba7e:	d03d      	beq.n	800bafc <__pow5mult+0xa0>
 800ba80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba82:	b97c      	cbnz	r4, 800baa4 <__pow5mult+0x48>
 800ba84:	2010      	movs	r0, #16
 800ba86:	f7ff fe29 	bl	800b6dc <malloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	6270      	str	r0, [r6, #36]	; 0x24
 800ba8e:	b928      	cbnz	r0, 800ba9c <__pow5mult+0x40>
 800ba90:	4b1d      	ldr	r3, [pc, #116]	; (800bb08 <__pow5mult+0xac>)
 800ba92:	481e      	ldr	r0, [pc, #120]	; (800bb0c <__pow5mult+0xb0>)
 800ba94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba98:	f000 fdbe 	bl	800c618 <__assert_func>
 800ba9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baa0:	6004      	str	r4, [r0, #0]
 800baa2:	60c4      	str	r4, [r0, #12]
 800baa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800baa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baac:	b94c      	cbnz	r4, 800bac2 <__pow5mult+0x66>
 800baae:	f240 2171 	movw	r1, #625	; 0x271
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7ff ff12 	bl	800b8dc <__i2b>
 800bab8:	2300      	movs	r3, #0
 800baba:	f8c8 0008 	str.w	r0, [r8, #8]
 800babe:	4604      	mov	r4, r0
 800bac0:	6003      	str	r3, [r0, #0]
 800bac2:	f04f 0900 	mov.w	r9, #0
 800bac6:	07eb      	lsls	r3, r5, #31
 800bac8:	d50a      	bpl.n	800bae0 <__pow5mult+0x84>
 800baca:	4639      	mov	r1, r7
 800bacc:	4622      	mov	r2, r4
 800bace:	4630      	mov	r0, r6
 800bad0:	f7ff ff1a 	bl	800b908 <__multiply>
 800bad4:	4639      	mov	r1, r7
 800bad6:	4680      	mov	r8, r0
 800bad8:	4630      	mov	r0, r6
 800bada:	f7ff fe47 	bl	800b76c <_Bfree>
 800bade:	4647      	mov	r7, r8
 800bae0:	106d      	asrs	r5, r5, #1
 800bae2:	d00b      	beq.n	800bafc <__pow5mult+0xa0>
 800bae4:	6820      	ldr	r0, [r4, #0]
 800bae6:	b938      	cbnz	r0, 800baf8 <__pow5mult+0x9c>
 800bae8:	4622      	mov	r2, r4
 800baea:	4621      	mov	r1, r4
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ff0b 	bl	800b908 <__multiply>
 800baf2:	6020      	str	r0, [r4, #0]
 800baf4:	f8c0 9000 	str.w	r9, [r0]
 800baf8:	4604      	mov	r4, r0
 800bafa:	e7e4      	b.n	800bac6 <__pow5mult+0x6a>
 800bafc:	4638      	mov	r0, r7
 800bafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb02:	bf00      	nop
 800bb04:	0800d218 	.word	0x0800d218
 800bb08:	0800cfe5 	.word	0x0800cfe5
 800bb0c:	0800d0c8 	.word	0x0800d0c8

0800bb10 <__lshift>:
 800bb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	460c      	mov	r4, r1
 800bb16:	6849      	ldr	r1, [r1, #4]
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb1e:	68a3      	ldr	r3, [r4, #8]
 800bb20:	4607      	mov	r7, r0
 800bb22:	4691      	mov	r9, r2
 800bb24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb28:	f108 0601 	add.w	r6, r8, #1
 800bb2c:	42b3      	cmp	r3, r6
 800bb2e:	db0b      	blt.n	800bb48 <__lshift+0x38>
 800bb30:	4638      	mov	r0, r7
 800bb32:	f7ff fddb 	bl	800b6ec <_Balloc>
 800bb36:	4605      	mov	r5, r0
 800bb38:	b948      	cbnz	r0, 800bb4e <__lshift+0x3e>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	4b2a      	ldr	r3, [pc, #168]	; (800bbe8 <__lshift+0xd8>)
 800bb3e:	482b      	ldr	r0, [pc, #172]	; (800bbec <__lshift+0xdc>)
 800bb40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb44:	f000 fd68 	bl	800c618 <__assert_func>
 800bb48:	3101      	adds	r1, #1
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	e7ee      	b.n	800bb2c <__lshift+0x1c>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f100 0114 	add.w	r1, r0, #20
 800bb54:	f100 0210 	add.w	r2, r0, #16
 800bb58:	4618      	mov	r0, r3
 800bb5a:	4553      	cmp	r3, sl
 800bb5c:	db37      	blt.n	800bbce <__lshift+0xbe>
 800bb5e:	6920      	ldr	r0, [r4, #16]
 800bb60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb64:	f104 0314 	add.w	r3, r4, #20
 800bb68:	f019 091f 	ands.w	r9, r9, #31
 800bb6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb74:	d02f      	beq.n	800bbd6 <__lshift+0xc6>
 800bb76:	f1c9 0e20 	rsb	lr, r9, #32
 800bb7a:	468a      	mov	sl, r1
 800bb7c:	f04f 0c00 	mov.w	ip, #0
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	fa02 f209 	lsl.w	r2, r2, r9
 800bb86:	ea42 020c 	orr.w	r2, r2, ip
 800bb8a:	f84a 2b04 	str.w	r2, [sl], #4
 800bb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb92:	4298      	cmp	r0, r3
 800bb94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb98:	d8f2      	bhi.n	800bb80 <__lshift+0x70>
 800bb9a:	1b03      	subs	r3, r0, r4
 800bb9c:	3b15      	subs	r3, #21
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	3304      	adds	r3, #4
 800bba4:	f104 0215 	add.w	r2, r4, #21
 800bba8:	4290      	cmp	r0, r2
 800bbaa:	bf38      	it	cc
 800bbac:	2304      	movcc	r3, #4
 800bbae:	f841 c003 	str.w	ip, [r1, r3]
 800bbb2:	f1bc 0f00 	cmp.w	ip, #0
 800bbb6:	d001      	beq.n	800bbbc <__lshift+0xac>
 800bbb8:	f108 0602 	add.w	r6, r8, #2
 800bbbc:	3e01      	subs	r6, #1
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	612e      	str	r6, [r5, #16]
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	f7ff fdd2 	bl	800b76c <_Bfree>
 800bbc8:	4628      	mov	r0, r5
 800bbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbce:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	e7c1      	b.n	800bb5a <__lshift+0x4a>
 800bbd6:	3904      	subs	r1, #4
 800bbd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbe0:	4298      	cmp	r0, r3
 800bbe2:	d8f9      	bhi.n	800bbd8 <__lshift+0xc8>
 800bbe4:	e7ea      	b.n	800bbbc <__lshift+0xac>
 800bbe6:	bf00      	nop
 800bbe8:	0800d057 	.word	0x0800d057
 800bbec:	0800d0c8 	.word	0x0800d0c8

0800bbf0 <__mcmp>:
 800bbf0:	b530      	push	{r4, r5, lr}
 800bbf2:	6902      	ldr	r2, [r0, #16]
 800bbf4:	690c      	ldr	r4, [r1, #16]
 800bbf6:	1b12      	subs	r2, r2, r4
 800bbf8:	d10e      	bne.n	800bc18 <__mcmp+0x28>
 800bbfa:	f100 0314 	add.w	r3, r0, #20
 800bbfe:	3114      	adds	r1, #20
 800bc00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc10:	42a5      	cmp	r5, r4
 800bc12:	d003      	beq.n	800bc1c <__mcmp+0x2c>
 800bc14:	d305      	bcc.n	800bc22 <__mcmp+0x32>
 800bc16:	2201      	movs	r2, #1
 800bc18:	4610      	mov	r0, r2
 800bc1a:	bd30      	pop	{r4, r5, pc}
 800bc1c:	4283      	cmp	r3, r0
 800bc1e:	d3f3      	bcc.n	800bc08 <__mcmp+0x18>
 800bc20:	e7fa      	b.n	800bc18 <__mcmp+0x28>
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	e7f7      	b.n	800bc18 <__mcmp+0x28>

0800bc28 <__mdiff>:
 800bc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	4606      	mov	r6, r0
 800bc30:	4611      	mov	r1, r2
 800bc32:	4620      	mov	r0, r4
 800bc34:	4690      	mov	r8, r2
 800bc36:	f7ff ffdb 	bl	800bbf0 <__mcmp>
 800bc3a:	1e05      	subs	r5, r0, #0
 800bc3c:	d110      	bne.n	800bc60 <__mdiff+0x38>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7ff fd53 	bl	800b6ec <_Balloc>
 800bc46:	b930      	cbnz	r0, 800bc56 <__mdiff+0x2e>
 800bc48:	4b3a      	ldr	r3, [pc, #232]	; (800bd34 <__mdiff+0x10c>)
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	f240 2132 	movw	r1, #562	; 0x232
 800bc50:	4839      	ldr	r0, [pc, #228]	; (800bd38 <__mdiff+0x110>)
 800bc52:	f000 fce1 	bl	800c618 <__assert_func>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc60:	bfa4      	itt	ge
 800bc62:	4643      	movge	r3, r8
 800bc64:	46a0      	movge	r8, r4
 800bc66:	4630      	mov	r0, r6
 800bc68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc6c:	bfa6      	itte	ge
 800bc6e:	461c      	movge	r4, r3
 800bc70:	2500      	movge	r5, #0
 800bc72:	2501      	movlt	r5, #1
 800bc74:	f7ff fd3a 	bl	800b6ec <_Balloc>
 800bc78:	b920      	cbnz	r0, 800bc84 <__mdiff+0x5c>
 800bc7a:	4b2e      	ldr	r3, [pc, #184]	; (800bd34 <__mdiff+0x10c>)
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc82:	e7e5      	b.n	800bc50 <__mdiff+0x28>
 800bc84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc88:	6926      	ldr	r6, [r4, #16]
 800bc8a:	60c5      	str	r5, [r0, #12]
 800bc8c:	f104 0914 	add.w	r9, r4, #20
 800bc90:	f108 0514 	add.w	r5, r8, #20
 800bc94:	f100 0e14 	add.w	lr, r0, #20
 800bc98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bca0:	f108 0210 	add.w	r2, r8, #16
 800bca4:	46f2      	mov	sl, lr
 800bca6:	2100      	movs	r1, #0
 800bca8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcb0:	fa1f f883 	uxth.w	r8, r3
 800bcb4:	fa11 f18b 	uxtah	r1, r1, fp
 800bcb8:	0c1b      	lsrs	r3, r3, #16
 800bcba:	eba1 0808 	sub.w	r8, r1, r8
 800bcbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcc6:	fa1f f888 	uxth.w	r8, r8
 800bcca:	1419      	asrs	r1, r3, #16
 800bccc:	454e      	cmp	r6, r9
 800bcce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcd2:	f84a 3b04 	str.w	r3, [sl], #4
 800bcd6:	d8e7      	bhi.n	800bca8 <__mdiff+0x80>
 800bcd8:	1b33      	subs	r3, r6, r4
 800bcda:	3b15      	subs	r3, #21
 800bcdc:	f023 0303 	bic.w	r3, r3, #3
 800bce0:	3304      	adds	r3, #4
 800bce2:	3415      	adds	r4, #21
 800bce4:	42a6      	cmp	r6, r4
 800bce6:	bf38      	it	cc
 800bce8:	2304      	movcc	r3, #4
 800bcea:	441d      	add	r5, r3
 800bcec:	4473      	add	r3, lr
 800bcee:	469e      	mov	lr, r3
 800bcf0:	462e      	mov	r6, r5
 800bcf2:	4566      	cmp	r6, ip
 800bcf4:	d30e      	bcc.n	800bd14 <__mdiff+0xec>
 800bcf6:	f10c 0203 	add.w	r2, ip, #3
 800bcfa:	1b52      	subs	r2, r2, r5
 800bcfc:	f022 0203 	bic.w	r2, r2, #3
 800bd00:	3d03      	subs	r5, #3
 800bd02:	45ac      	cmp	ip, r5
 800bd04:	bf38      	it	cc
 800bd06:	2200      	movcc	r2, #0
 800bd08:	441a      	add	r2, r3
 800bd0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd0e:	b17b      	cbz	r3, 800bd30 <__mdiff+0x108>
 800bd10:	6107      	str	r7, [r0, #16]
 800bd12:	e7a3      	b.n	800bc5c <__mdiff+0x34>
 800bd14:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd18:	fa11 f288 	uxtah	r2, r1, r8
 800bd1c:	1414      	asrs	r4, r2, #16
 800bd1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd22:	b292      	uxth	r2, r2
 800bd24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd28:	f84e 2b04 	str.w	r2, [lr], #4
 800bd2c:	1421      	asrs	r1, r4, #16
 800bd2e:	e7e0      	b.n	800bcf2 <__mdiff+0xca>
 800bd30:	3f01      	subs	r7, #1
 800bd32:	e7ea      	b.n	800bd0a <__mdiff+0xe2>
 800bd34:	0800d057 	.word	0x0800d057
 800bd38:	0800d0c8 	.word	0x0800d0c8

0800bd3c <__d2b>:
 800bd3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd40:	4689      	mov	r9, r1
 800bd42:	2101      	movs	r1, #1
 800bd44:	ec57 6b10 	vmov	r6, r7, d0
 800bd48:	4690      	mov	r8, r2
 800bd4a:	f7ff fccf 	bl	800b6ec <_Balloc>
 800bd4e:	4604      	mov	r4, r0
 800bd50:	b930      	cbnz	r0, 800bd60 <__d2b+0x24>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b25      	ldr	r3, [pc, #148]	; (800bdec <__d2b+0xb0>)
 800bd56:	4826      	ldr	r0, [pc, #152]	; (800bdf0 <__d2b+0xb4>)
 800bd58:	f240 310a 	movw	r1, #778	; 0x30a
 800bd5c:	f000 fc5c 	bl	800c618 <__assert_func>
 800bd60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd68:	bb35      	cbnz	r5, 800bdb8 <__d2b+0x7c>
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	d028      	beq.n	800bdc2 <__d2b+0x86>
 800bd70:	4668      	mov	r0, sp
 800bd72:	9600      	str	r6, [sp, #0]
 800bd74:	f7ff fd82 	bl	800b87c <__lo0bits>
 800bd78:	9900      	ldr	r1, [sp, #0]
 800bd7a:	b300      	cbz	r0, 800bdbe <__d2b+0x82>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	f1c0 0320 	rsb	r3, r0, #32
 800bd82:	fa02 f303 	lsl.w	r3, r2, r3
 800bd86:	430b      	orrs	r3, r1
 800bd88:	40c2      	lsrs	r2, r0
 800bd8a:	6163      	str	r3, [r4, #20]
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	61a3      	str	r3, [r4, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	bf14      	ite	ne
 800bd96:	2202      	movne	r2, #2
 800bd98:	2201      	moveq	r2, #1
 800bd9a:	6122      	str	r2, [r4, #16]
 800bd9c:	b1d5      	cbz	r5, 800bdd4 <__d2b+0x98>
 800bd9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bda2:	4405      	add	r5, r0
 800bda4:	f8c9 5000 	str.w	r5, [r9]
 800bda8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bdac:	f8c8 0000 	str.w	r0, [r8]
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	b003      	add	sp, #12
 800bdb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdbc:	e7d5      	b.n	800bd6a <__d2b+0x2e>
 800bdbe:	6161      	str	r1, [r4, #20]
 800bdc0:	e7e5      	b.n	800bd8e <__d2b+0x52>
 800bdc2:	a801      	add	r0, sp, #4
 800bdc4:	f7ff fd5a 	bl	800b87c <__lo0bits>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	6163      	str	r3, [r4, #20]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	6122      	str	r2, [r4, #16]
 800bdd0:	3020      	adds	r0, #32
 800bdd2:	e7e3      	b.n	800bd9c <__d2b+0x60>
 800bdd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bddc:	f8c9 0000 	str.w	r0, [r9]
 800bde0:	6918      	ldr	r0, [r3, #16]
 800bde2:	f7ff fd2b 	bl	800b83c <__hi0bits>
 800bde6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdea:	e7df      	b.n	800bdac <__d2b+0x70>
 800bdec:	0800d057 	.word	0x0800d057
 800bdf0:	0800d0c8 	.word	0x0800d0c8

0800bdf4 <_calloc_r>:
 800bdf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdf6:	fba1 2402 	umull	r2, r4, r1, r2
 800bdfa:	b94c      	cbnz	r4, 800be10 <_calloc_r+0x1c>
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	9201      	str	r2, [sp, #4]
 800be00:	f000 f87a 	bl	800bef8 <_malloc_r>
 800be04:	9a01      	ldr	r2, [sp, #4]
 800be06:	4605      	mov	r5, r0
 800be08:	b930      	cbnz	r0, 800be18 <_calloc_r+0x24>
 800be0a:	4628      	mov	r0, r5
 800be0c:	b003      	add	sp, #12
 800be0e:	bd30      	pop	{r4, r5, pc}
 800be10:	220c      	movs	r2, #12
 800be12:	6002      	str	r2, [r0, #0]
 800be14:	2500      	movs	r5, #0
 800be16:	e7f8      	b.n	800be0a <_calloc_r+0x16>
 800be18:	4621      	mov	r1, r4
 800be1a:	f7fd fe53 	bl	8009ac4 <memset>
 800be1e:	e7f4      	b.n	800be0a <_calloc_r+0x16>

0800be20 <_free_r>:
 800be20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be22:	2900      	cmp	r1, #0
 800be24:	d044      	beq.n	800beb0 <_free_r+0x90>
 800be26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be2a:	9001      	str	r0, [sp, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f1a1 0404 	sub.w	r4, r1, #4
 800be32:	bfb8      	it	lt
 800be34:	18e4      	addlt	r4, r4, r3
 800be36:	f000 fc8f 	bl	800c758 <__malloc_lock>
 800be3a:	4a1e      	ldr	r2, [pc, #120]	; (800beb4 <_free_r+0x94>)
 800be3c:	9801      	ldr	r0, [sp, #4]
 800be3e:	6813      	ldr	r3, [r2, #0]
 800be40:	b933      	cbnz	r3, 800be50 <_free_r+0x30>
 800be42:	6063      	str	r3, [r4, #4]
 800be44:	6014      	str	r4, [r2, #0]
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be4c:	f000 bc8a 	b.w	800c764 <__malloc_unlock>
 800be50:	42a3      	cmp	r3, r4
 800be52:	d908      	bls.n	800be66 <_free_r+0x46>
 800be54:	6825      	ldr	r5, [r4, #0]
 800be56:	1961      	adds	r1, r4, r5
 800be58:	428b      	cmp	r3, r1
 800be5a:	bf01      	itttt	eq
 800be5c:	6819      	ldreq	r1, [r3, #0]
 800be5e:	685b      	ldreq	r3, [r3, #4]
 800be60:	1949      	addeq	r1, r1, r5
 800be62:	6021      	streq	r1, [r4, #0]
 800be64:	e7ed      	b.n	800be42 <_free_r+0x22>
 800be66:	461a      	mov	r2, r3
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	b10b      	cbz	r3, 800be70 <_free_r+0x50>
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	d9fa      	bls.n	800be66 <_free_r+0x46>
 800be70:	6811      	ldr	r1, [r2, #0]
 800be72:	1855      	adds	r5, r2, r1
 800be74:	42a5      	cmp	r5, r4
 800be76:	d10b      	bne.n	800be90 <_free_r+0x70>
 800be78:	6824      	ldr	r4, [r4, #0]
 800be7a:	4421      	add	r1, r4
 800be7c:	1854      	adds	r4, r2, r1
 800be7e:	42a3      	cmp	r3, r4
 800be80:	6011      	str	r1, [r2, #0]
 800be82:	d1e0      	bne.n	800be46 <_free_r+0x26>
 800be84:	681c      	ldr	r4, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	6053      	str	r3, [r2, #4]
 800be8a:	4421      	add	r1, r4
 800be8c:	6011      	str	r1, [r2, #0]
 800be8e:	e7da      	b.n	800be46 <_free_r+0x26>
 800be90:	d902      	bls.n	800be98 <_free_r+0x78>
 800be92:	230c      	movs	r3, #12
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	e7d6      	b.n	800be46 <_free_r+0x26>
 800be98:	6825      	ldr	r5, [r4, #0]
 800be9a:	1961      	adds	r1, r4, r5
 800be9c:	428b      	cmp	r3, r1
 800be9e:	bf04      	itt	eq
 800bea0:	6819      	ldreq	r1, [r3, #0]
 800bea2:	685b      	ldreq	r3, [r3, #4]
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	bf04      	itt	eq
 800bea8:	1949      	addeq	r1, r1, r5
 800beaa:	6021      	streq	r1, [r4, #0]
 800beac:	6054      	str	r4, [r2, #4]
 800beae:	e7ca      	b.n	800be46 <_free_r+0x26>
 800beb0:	b003      	add	sp, #12
 800beb2:	bd30      	pop	{r4, r5, pc}
 800beb4:	240006b4 	.word	0x240006b4

0800beb8 <sbrk_aligned>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	4e0e      	ldr	r6, [pc, #56]	; (800bef4 <sbrk_aligned+0x3c>)
 800bebc:	460c      	mov	r4, r1
 800bebe:	6831      	ldr	r1, [r6, #0]
 800bec0:	4605      	mov	r5, r0
 800bec2:	b911      	cbnz	r1, 800beca <sbrk_aligned+0x12>
 800bec4:	f000 fb42 	bl	800c54c <_sbrk_r>
 800bec8:	6030      	str	r0, [r6, #0]
 800beca:	4621      	mov	r1, r4
 800becc:	4628      	mov	r0, r5
 800bece:	f000 fb3d 	bl	800c54c <_sbrk_r>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d00a      	beq.n	800beec <sbrk_aligned+0x34>
 800bed6:	1cc4      	adds	r4, r0, #3
 800bed8:	f024 0403 	bic.w	r4, r4, #3
 800bedc:	42a0      	cmp	r0, r4
 800bede:	d007      	beq.n	800bef0 <sbrk_aligned+0x38>
 800bee0:	1a21      	subs	r1, r4, r0
 800bee2:	4628      	mov	r0, r5
 800bee4:	f000 fb32 	bl	800c54c <_sbrk_r>
 800bee8:	3001      	adds	r0, #1
 800beea:	d101      	bne.n	800bef0 <sbrk_aligned+0x38>
 800beec:	f04f 34ff 	mov.w	r4, #4294967295
 800bef0:	4620      	mov	r0, r4
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	240006b8 	.word	0x240006b8

0800bef8 <_malloc_r>:
 800bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befc:	1ccd      	adds	r5, r1, #3
 800befe:	f025 0503 	bic.w	r5, r5, #3
 800bf02:	3508      	adds	r5, #8
 800bf04:	2d0c      	cmp	r5, #12
 800bf06:	bf38      	it	cc
 800bf08:	250c      	movcc	r5, #12
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	4607      	mov	r7, r0
 800bf0e:	db01      	blt.n	800bf14 <_malloc_r+0x1c>
 800bf10:	42a9      	cmp	r1, r5
 800bf12:	d905      	bls.n	800bf20 <_malloc_r+0x28>
 800bf14:	230c      	movs	r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	2600      	movs	r6, #0
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf20:	4e2e      	ldr	r6, [pc, #184]	; (800bfdc <_malloc_r+0xe4>)
 800bf22:	f000 fc19 	bl	800c758 <__malloc_lock>
 800bf26:	6833      	ldr	r3, [r6, #0]
 800bf28:	461c      	mov	r4, r3
 800bf2a:	bb34      	cbnz	r4, 800bf7a <_malloc_r+0x82>
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f7ff ffc2 	bl	800beb8 <sbrk_aligned>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	4604      	mov	r4, r0
 800bf38:	d14d      	bne.n	800bfd6 <_malloc_r+0xde>
 800bf3a:	6834      	ldr	r4, [r6, #0]
 800bf3c:	4626      	mov	r6, r4
 800bf3e:	2e00      	cmp	r6, #0
 800bf40:	d140      	bne.n	800bfc4 <_malloc_r+0xcc>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	4631      	mov	r1, r6
 800bf46:	4638      	mov	r0, r7
 800bf48:	eb04 0803 	add.w	r8, r4, r3
 800bf4c:	f000 fafe 	bl	800c54c <_sbrk_r>
 800bf50:	4580      	cmp	r8, r0
 800bf52:	d13a      	bne.n	800bfca <_malloc_r+0xd2>
 800bf54:	6821      	ldr	r1, [r4, #0]
 800bf56:	3503      	adds	r5, #3
 800bf58:	1a6d      	subs	r5, r5, r1
 800bf5a:	f025 0503 	bic.w	r5, r5, #3
 800bf5e:	3508      	adds	r5, #8
 800bf60:	2d0c      	cmp	r5, #12
 800bf62:	bf38      	it	cc
 800bf64:	250c      	movcc	r5, #12
 800bf66:	4629      	mov	r1, r5
 800bf68:	4638      	mov	r0, r7
 800bf6a:	f7ff ffa5 	bl	800beb8 <sbrk_aligned>
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d02b      	beq.n	800bfca <_malloc_r+0xd2>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	442b      	add	r3, r5
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	e00e      	b.n	800bf98 <_malloc_r+0xa0>
 800bf7a:	6822      	ldr	r2, [r4, #0]
 800bf7c:	1b52      	subs	r2, r2, r5
 800bf7e:	d41e      	bmi.n	800bfbe <_malloc_r+0xc6>
 800bf80:	2a0b      	cmp	r2, #11
 800bf82:	d916      	bls.n	800bfb2 <_malloc_r+0xba>
 800bf84:	1961      	adds	r1, r4, r5
 800bf86:	42a3      	cmp	r3, r4
 800bf88:	6025      	str	r5, [r4, #0]
 800bf8a:	bf18      	it	ne
 800bf8c:	6059      	strne	r1, [r3, #4]
 800bf8e:	6863      	ldr	r3, [r4, #4]
 800bf90:	bf08      	it	eq
 800bf92:	6031      	streq	r1, [r6, #0]
 800bf94:	5162      	str	r2, [r4, r5]
 800bf96:	604b      	str	r3, [r1, #4]
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f104 060b 	add.w	r6, r4, #11
 800bf9e:	f000 fbe1 	bl	800c764 <__malloc_unlock>
 800bfa2:	f026 0607 	bic.w	r6, r6, #7
 800bfa6:	1d23      	adds	r3, r4, #4
 800bfa8:	1af2      	subs	r2, r6, r3
 800bfaa:	d0b6      	beq.n	800bf1a <_malloc_r+0x22>
 800bfac:	1b9b      	subs	r3, r3, r6
 800bfae:	50a3      	str	r3, [r4, r2]
 800bfb0:	e7b3      	b.n	800bf1a <_malloc_r+0x22>
 800bfb2:	6862      	ldr	r2, [r4, #4]
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	bf0c      	ite	eq
 800bfb8:	6032      	streq	r2, [r6, #0]
 800bfba:	605a      	strne	r2, [r3, #4]
 800bfbc:	e7ec      	b.n	800bf98 <_malloc_r+0xa0>
 800bfbe:	4623      	mov	r3, r4
 800bfc0:	6864      	ldr	r4, [r4, #4]
 800bfc2:	e7b2      	b.n	800bf2a <_malloc_r+0x32>
 800bfc4:	4634      	mov	r4, r6
 800bfc6:	6876      	ldr	r6, [r6, #4]
 800bfc8:	e7b9      	b.n	800bf3e <_malloc_r+0x46>
 800bfca:	230c      	movs	r3, #12
 800bfcc:	603b      	str	r3, [r7, #0]
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f000 fbc8 	bl	800c764 <__malloc_unlock>
 800bfd4:	e7a1      	b.n	800bf1a <_malloc_r+0x22>
 800bfd6:	6025      	str	r5, [r4, #0]
 800bfd8:	e7de      	b.n	800bf98 <_malloc_r+0xa0>
 800bfda:	bf00      	nop
 800bfdc:	240006b4 	.word	0x240006b4

0800bfe0 <__ssputs_r>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	688e      	ldr	r6, [r1, #8]
 800bfe6:	429e      	cmp	r6, r3
 800bfe8:	4682      	mov	sl, r0
 800bfea:	460c      	mov	r4, r1
 800bfec:	4690      	mov	r8, r2
 800bfee:	461f      	mov	r7, r3
 800bff0:	d838      	bhi.n	800c064 <__ssputs_r+0x84>
 800bff2:	898a      	ldrh	r2, [r1, #12]
 800bff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bff8:	d032      	beq.n	800c060 <__ssputs_r+0x80>
 800bffa:	6825      	ldr	r5, [r4, #0]
 800bffc:	6909      	ldr	r1, [r1, #16]
 800bffe:	eba5 0901 	sub.w	r9, r5, r1
 800c002:	6965      	ldr	r5, [r4, #20]
 800c004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c00c:	3301      	adds	r3, #1
 800c00e:	444b      	add	r3, r9
 800c010:	106d      	asrs	r5, r5, #1
 800c012:	429d      	cmp	r5, r3
 800c014:	bf38      	it	cc
 800c016:	461d      	movcc	r5, r3
 800c018:	0553      	lsls	r3, r2, #21
 800c01a:	d531      	bpl.n	800c080 <__ssputs_r+0xa0>
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7ff ff6b 	bl	800bef8 <_malloc_r>
 800c022:	4606      	mov	r6, r0
 800c024:	b950      	cbnz	r0, 800c03c <__ssputs_r+0x5c>
 800c026:	230c      	movs	r3, #12
 800c028:	f8ca 3000 	str.w	r3, [sl]
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c032:	81a3      	strh	r3, [r4, #12]
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	6921      	ldr	r1, [r4, #16]
 800c03e:	464a      	mov	r2, r9
 800c040:	f7fd fd32 	bl	8009aa8 <memcpy>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c04e:	81a3      	strh	r3, [r4, #12]
 800c050:	6126      	str	r6, [r4, #16]
 800c052:	6165      	str	r5, [r4, #20]
 800c054:	444e      	add	r6, r9
 800c056:	eba5 0509 	sub.w	r5, r5, r9
 800c05a:	6026      	str	r6, [r4, #0]
 800c05c:	60a5      	str	r5, [r4, #8]
 800c05e:	463e      	mov	r6, r7
 800c060:	42be      	cmp	r6, r7
 800c062:	d900      	bls.n	800c066 <__ssputs_r+0x86>
 800c064:	463e      	mov	r6, r7
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	4632      	mov	r2, r6
 800c06a:	4641      	mov	r1, r8
 800c06c:	f000 fb5a 	bl	800c724 <memmove>
 800c070:	68a3      	ldr	r3, [r4, #8]
 800c072:	1b9b      	subs	r3, r3, r6
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	4433      	add	r3, r6
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	2000      	movs	r0, #0
 800c07e:	e7db      	b.n	800c038 <__ssputs_r+0x58>
 800c080:	462a      	mov	r2, r5
 800c082:	f000 fb75 	bl	800c770 <_realloc_r>
 800c086:	4606      	mov	r6, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	d1e1      	bne.n	800c050 <__ssputs_r+0x70>
 800c08c:	6921      	ldr	r1, [r4, #16]
 800c08e:	4650      	mov	r0, sl
 800c090:	f7ff fec6 	bl	800be20 <_free_r>
 800c094:	e7c7      	b.n	800c026 <__ssputs_r+0x46>
	...

0800c098 <_svfiprintf_r>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	4698      	mov	r8, r3
 800c09e:	898b      	ldrh	r3, [r1, #12]
 800c0a0:	061b      	lsls	r3, r3, #24
 800c0a2:	b09d      	sub	sp, #116	; 0x74
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	d50e      	bpl.n	800c0ca <_svfiprintf_r+0x32>
 800c0ac:	690b      	ldr	r3, [r1, #16]
 800c0ae:	b963      	cbnz	r3, 800c0ca <_svfiprintf_r+0x32>
 800c0b0:	2140      	movs	r1, #64	; 0x40
 800c0b2:	f7ff ff21 	bl	800bef8 <_malloc_r>
 800c0b6:	6028      	str	r0, [r5, #0]
 800c0b8:	6128      	str	r0, [r5, #16]
 800c0ba:	b920      	cbnz	r0, 800c0c6 <_svfiprintf_r+0x2e>
 800c0bc:	230c      	movs	r3, #12
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	e0d1      	b.n	800c26a <_svfiprintf_r+0x1d2>
 800c0c6:	2340      	movs	r3, #64	; 0x40
 800c0c8:	616b      	str	r3, [r5, #20]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ce:	2320      	movs	r3, #32
 800c0d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0d8:	2330      	movs	r3, #48	; 0x30
 800c0da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c284 <_svfiprintf_r+0x1ec>
 800c0de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e2:	f04f 0901 	mov.w	r9, #1
 800c0e6:	4623      	mov	r3, r4
 800c0e8:	469a      	mov	sl, r3
 800c0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ee:	b10a      	cbz	r2, 800c0f4 <_svfiprintf_r+0x5c>
 800c0f0:	2a25      	cmp	r2, #37	; 0x25
 800c0f2:	d1f9      	bne.n	800c0e8 <_svfiprintf_r+0x50>
 800c0f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0f8:	d00b      	beq.n	800c112 <_svfiprintf_r+0x7a>
 800c0fa:	465b      	mov	r3, fp
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	4638      	mov	r0, r7
 800c102:	f7ff ff6d 	bl	800bfe0 <__ssputs_r>
 800c106:	3001      	adds	r0, #1
 800c108:	f000 80aa 	beq.w	800c260 <_svfiprintf_r+0x1c8>
 800c10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c10e:	445a      	add	r2, fp
 800c110:	9209      	str	r2, [sp, #36]	; 0x24
 800c112:	f89a 3000 	ldrb.w	r3, [sl]
 800c116:	2b00      	cmp	r3, #0
 800c118:	f000 80a2 	beq.w	800c260 <_svfiprintf_r+0x1c8>
 800c11c:	2300      	movs	r3, #0
 800c11e:	f04f 32ff 	mov.w	r2, #4294967295
 800c122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c126:	f10a 0a01 	add.w	sl, sl, #1
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	9307      	str	r3, [sp, #28]
 800c12e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c132:	931a      	str	r3, [sp, #104]	; 0x68
 800c134:	4654      	mov	r4, sl
 800c136:	2205      	movs	r2, #5
 800c138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13c:	4851      	ldr	r0, [pc, #324]	; (800c284 <_svfiprintf_r+0x1ec>)
 800c13e:	f7f4 f8d7 	bl	80002f0 <memchr>
 800c142:	9a04      	ldr	r2, [sp, #16]
 800c144:	b9d8      	cbnz	r0, 800c17e <_svfiprintf_r+0xe6>
 800c146:	06d0      	lsls	r0, r2, #27
 800c148:	bf44      	itt	mi
 800c14a:	2320      	movmi	r3, #32
 800c14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c150:	0711      	lsls	r1, r2, #28
 800c152:	bf44      	itt	mi
 800c154:	232b      	movmi	r3, #43	; 0x2b
 800c156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c15a:	f89a 3000 	ldrb.w	r3, [sl]
 800c15e:	2b2a      	cmp	r3, #42	; 0x2a
 800c160:	d015      	beq.n	800c18e <_svfiprintf_r+0xf6>
 800c162:	9a07      	ldr	r2, [sp, #28]
 800c164:	4654      	mov	r4, sl
 800c166:	2000      	movs	r0, #0
 800c168:	f04f 0c0a 	mov.w	ip, #10
 800c16c:	4621      	mov	r1, r4
 800c16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c172:	3b30      	subs	r3, #48	; 0x30
 800c174:	2b09      	cmp	r3, #9
 800c176:	d94e      	bls.n	800c216 <_svfiprintf_r+0x17e>
 800c178:	b1b0      	cbz	r0, 800c1a8 <_svfiprintf_r+0x110>
 800c17a:	9207      	str	r2, [sp, #28]
 800c17c:	e014      	b.n	800c1a8 <_svfiprintf_r+0x110>
 800c17e:	eba0 0308 	sub.w	r3, r0, r8
 800c182:	fa09 f303 	lsl.w	r3, r9, r3
 800c186:	4313      	orrs	r3, r2
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	46a2      	mov	sl, r4
 800c18c:	e7d2      	b.n	800c134 <_svfiprintf_r+0x9c>
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	1d19      	adds	r1, r3, #4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	9103      	str	r1, [sp, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfbb      	ittet	lt
 800c19a:	425b      	neglt	r3, r3
 800c19c:	f042 0202 	orrlt.w	r2, r2, #2
 800c1a0:	9307      	strge	r3, [sp, #28]
 800c1a2:	9307      	strlt	r3, [sp, #28]
 800c1a4:	bfb8      	it	lt
 800c1a6:	9204      	strlt	r2, [sp, #16]
 800c1a8:	7823      	ldrb	r3, [r4, #0]
 800c1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ac:	d10c      	bne.n	800c1c8 <_svfiprintf_r+0x130>
 800c1ae:	7863      	ldrb	r3, [r4, #1]
 800c1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b2:	d135      	bne.n	800c220 <_svfiprintf_r+0x188>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	1d1a      	adds	r2, r3, #4
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	9203      	str	r2, [sp, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bfb8      	it	lt
 800c1c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1c4:	3402      	adds	r4, #2
 800c1c6:	9305      	str	r3, [sp, #20]
 800c1c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c294 <_svfiprintf_r+0x1fc>
 800c1cc:	7821      	ldrb	r1, [r4, #0]
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	4650      	mov	r0, sl
 800c1d2:	f7f4 f88d 	bl	80002f0 <memchr>
 800c1d6:	b140      	cbz	r0, 800c1ea <_svfiprintf_r+0x152>
 800c1d8:	2340      	movs	r3, #64	; 0x40
 800c1da:	eba0 000a 	sub.w	r0, r0, sl
 800c1de:	fa03 f000 	lsl.w	r0, r3, r0
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	4303      	orrs	r3, r0
 800c1e6:	3401      	adds	r4, #1
 800c1e8:	9304      	str	r3, [sp, #16]
 800c1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ee:	4826      	ldr	r0, [pc, #152]	; (800c288 <_svfiprintf_r+0x1f0>)
 800c1f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1f4:	2206      	movs	r2, #6
 800c1f6:	f7f4 f87b 	bl	80002f0 <memchr>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d038      	beq.n	800c270 <_svfiprintf_r+0x1d8>
 800c1fe:	4b23      	ldr	r3, [pc, #140]	; (800c28c <_svfiprintf_r+0x1f4>)
 800c200:	bb1b      	cbnz	r3, 800c24a <_svfiprintf_r+0x1b2>
 800c202:	9b03      	ldr	r3, [sp, #12]
 800c204:	3307      	adds	r3, #7
 800c206:	f023 0307 	bic.w	r3, r3, #7
 800c20a:	3308      	adds	r3, #8
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c210:	4433      	add	r3, r6
 800c212:	9309      	str	r3, [sp, #36]	; 0x24
 800c214:	e767      	b.n	800c0e6 <_svfiprintf_r+0x4e>
 800c216:	fb0c 3202 	mla	r2, ip, r2, r3
 800c21a:	460c      	mov	r4, r1
 800c21c:	2001      	movs	r0, #1
 800c21e:	e7a5      	b.n	800c16c <_svfiprintf_r+0xd4>
 800c220:	2300      	movs	r3, #0
 800c222:	3401      	adds	r4, #1
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	4619      	mov	r1, r3
 800c228:	f04f 0c0a 	mov.w	ip, #10
 800c22c:	4620      	mov	r0, r4
 800c22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c232:	3a30      	subs	r2, #48	; 0x30
 800c234:	2a09      	cmp	r2, #9
 800c236:	d903      	bls.n	800c240 <_svfiprintf_r+0x1a8>
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0c5      	beq.n	800c1c8 <_svfiprintf_r+0x130>
 800c23c:	9105      	str	r1, [sp, #20]
 800c23e:	e7c3      	b.n	800c1c8 <_svfiprintf_r+0x130>
 800c240:	fb0c 2101 	mla	r1, ip, r1, r2
 800c244:	4604      	mov	r4, r0
 800c246:	2301      	movs	r3, #1
 800c248:	e7f0      	b.n	800c22c <_svfiprintf_r+0x194>
 800c24a:	ab03      	add	r3, sp, #12
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	462a      	mov	r2, r5
 800c250:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <_svfiprintf_r+0x1f8>)
 800c252:	a904      	add	r1, sp, #16
 800c254:	4638      	mov	r0, r7
 800c256:	f7fd fccf 	bl	8009bf8 <_printf_float>
 800c25a:	1c42      	adds	r2, r0, #1
 800c25c:	4606      	mov	r6, r0
 800c25e:	d1d6      	bne.n	800c20e <_svfiprintf_r+0x176>
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	065b      	lsls	r3, r3, #25
 800c264:	f53f af2c 	bmi.w	800c0c0 <_svfiprintf_r+0x28>
 800c268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c26a:	b01d      	add	sp, #116	; 0x74
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c270:	ab03      	add	r3, sp, #12
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	462a      	mov	r2, r5
 800c276:	4b06      	ldr	r3, [pc, #24]	; (800c290 <_svfiprintf_r+0x1f8>)
 800c278:	a904      	add	r1, sp, #16
 800c27a:	4638      	mov	r0, r7
 800c27c:	f7fd ff48 	bl	800a110 <_printf_i>
 800c280:	e7eb      	b.n	800c25a <_svfiprintf_r+0x1c2>
 800c282:	bf00      	nop
 800c284:	0800d224 	.word	0x0800d224
 800c288:	0800d22e 	.word	0x0800d22e
 800c28c:	08009bf9 	.word	0x08009bf9
 800c290:	0800bfe1 	.word	0x0800bfe1
 800c294:	0800d22a 	.word	0x0800d22a

0800c298 <__sfputc_r>:
 800c298:	6893      	ldr	r3, [r2, #8]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	b410      	push	{r4}
 800c2a0:	6093      	str	r3, [r2, #8]
 800c2a2:	da08      	bge.n	800c2b6 <__sfputc_r+0x1e>
 800c2a4:	6994      	ldr	r4, [r2, #24]
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	db01      	blt.n	800c2ae <__sfputc_r+0x16>
 800c2aa:	290a      	cmp	r1, #10
 800c2ac:	d103      	bne.n	800c2b6 <__sfputc_r+0x1e>
 800c2ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2b2:	f7fe b935 	b.w	800a520 <__swbuf_r>
 800c2b6:	6813      	ldr	r3, [r2, #0]
 800c2b8:	1c58      	adds	r0, r3, #1
 800c2ba:	6010      	str	r0, [r2, #0]
 800c2bc:	7019      	strb	r1, [r3, #0]
 800c2be:	4608      	mov	r0, r1
 800c2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <__sfputs_r>:
 800c2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	460f      	mov	r7, r1
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	18d5      	adds	r5, r2, r3
 800c2d0:	42ac      	cmp	r4, r5
 800c2d2:	d101      	bne.n	800c2d8 <__sfputs_r+0x12>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e007      	b.n	800c2e8 <__sfputs_r+0x22>
 800c2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2dc:	463a      	mov	r2, r7
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f7ff ffda 	bl	800c298 <__sfputc_r>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	d1f3      	bne.n	800c2d0 <__sfputs_r+0xa>
 800c2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2ec <_vfiprintf_r>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	b09d      	sub	sp, #116	; 0x74
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	4698      	mov	r8, r3
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	b118      	cbz	r0, 800c304 <_vfiprintf_r+0x18>
 800c2fc:	6983      	ldr	r3, [r0, #24]
 800c2fe:	b90b      	cbnz	r3, 800c304 <_vfiprintf_r+0x18>
 800c300:	f7ff f8e2 	bl	800b4c8 <__sinit>
 800c304:	4b89      	ldr	r3, [pc, #548]	; (800c52c <_vfiprintf_r+0x240>)
 800c306:	429d      	cmp	r5, r3
 800c308:	d11b      	bne.n	800c342 <_vfiprintf_r+0x56>
 800c30a:	6875      	ldr	r5, [r6, #4]
 800c30c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c30e:	07d9      	lsls	r1, r3, #31
 800c310:	d405      	bmi.n	800c31e <_vfiprintf_r+0x32>
 800c312:	89ab      	ldrh	r3, [r5, #12]
 800c314:	059a      	lsls	r2, r3, #22
 800c316:	d402      	bmi.n	800c31e <_vfiprintf_r+0x32>
 800c318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c31a:	f7ff f978 	bl	800b60e <__retarget_lock_acquire_recursive>
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	071b      	lsls	r3, r3, #28
 800c322:	d501      	bpl.n	800c328 <_vfiprintf_r+0x3c>
 800c324:	692b      	ldr	r3, [r5, #16]
 800c326:	b9eb      	cbnz	r3, 800c364 <_vfiprintf_r+0x78>
 800c328:	4629      	mov	r1, r5
 800c32a:	4630      	mov	r0, r6
 800c32c:	f7fe f94a 	bl	800a5c4 <__swsetup_r>
 800c330:	b1c0      	cbz	r0, 800c364 <_vfiprintf_r+0x78>
 800c332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c334:	07dc      	lsls	r4, r3, #31
 800c336:	d50e      	bpl.n	800c356 <_vfiprintf_r+0x6a>
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	b01d      	add	sp, #116	; 0x74
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	4b7b      	ldr	r3, [pc, #492]	; (800c530 <_vfiprintf_r+0x244>)
 800c344:	429d      	cmp	r5, r3
 800c346:	d101      	bne.n	800c34c <_vfiprintf_r+0x60>
 800c348:	68b5      	ldr	r5, [r6, #8]
 800c34a:	e7df      	b.n	800c30c <_vfiprintf_r+0x20>
 800c34c:	4b79      	ldr	r3, [pc, #484]	; (800c534 <_vfiprintf_r+0x248>)
 800c34e:	429d      	cmp	r5, r3
 800c350:	bf08      	it	eq
 800c352:	68f5      	ldreq	r5, [r6, #12]
 800c354:	e7da      	b.n	800c30c <_vfiprintf_r+0x20>
 800c356:	89ab      	ldrh	r3, [r5, #12]
 800c358:	0598      	lsls	r0, r3, #22
 800c35a:	d4ed      	bmi.n	800c338 <_vfiprintf_r+0x4c>
 800c35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c35e:	f7ff f957 	bl	800b610 <__retarget_lock_release_recursive>
 800c362:	e7e9      	b.n	800c338 <_vfiprintf_r+0x4c>
 800c364:	2300      	movs	r3, #0
 800c366:	9309      	str	r3, [sp, #36]	; 0x24
 800c368:	2320      	movs	r3, #32
 800c36a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c372:	2330      	movs	r3, #48	; 0x30
 800c374:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c538 <_vfiprintf_r+0x24c>
 800c378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c37c:	f04f 0901 	mov.w	r9, #1
 800c380:	4623      	mov	r3, r4
 800c382:	469a      	mov	sl, r3
 800c384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c388:	b10a      	cbz	r2, 800c38e <_vfiprintf_r+0xa2>
 800c38a:	2a25      	cmp	r2, #37	; 0x25
 800c38c:	d1f9      	bne.n	800c382 <_vfiprintf_r+0x96>
 800c38e:	ebba 0b04 	subs.w	fp, sl, r4
 800c392:	d00b      	beq.n	800c3ac <_vfiprintf_r+0xc0>
 800c394:	465b      	mov	r3, fp
 800c396:	4622      	mov	r2, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7ff ff93 	bl	800c2c6 <__sfputs_r>
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	f000 80aa 	beq.w	800c4fa <_vfiprintf_r+0x20e>
 800c3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a8:	445a      	add	r2, fp
 800c3aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 80a2 	beq.w	800c4fa <_vfiprintf_r+0x20e>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3c0:	f10a 0a01 	add.w	sl, sl, #1
 800c3c4:	9304      	str	r3, [sp, #16]
 800c3c6:	9307      	str	r3, [sp, #28]
 800c3c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c3ce:	4654      	mov	r4, sl
 800c3d0:	2205      	movs	r2, #5
 800c3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d6:	4858      	ldr	r0, [pc, #352]	; (800c538 <_vfiprintf_r+0x24c>)
 800c3d8:	f7f3 ff8a 	bl	80002f0 <memchr>
 800c3dc:	9a04      	ldr	r2, [sp, #16]
 800c3de:	b9d8      	cbnz	r0, 800c418 <_vfiprintf_r+0x12c>
 800c3e0:	06d1      	lsls	r1, r2, #27
 800c3e2:	bf44      	itt	mi
 800c3e4:	2320      	movmi	r3, #32
 800c3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ea:	0713      	lsls	r3, r2, #28
 800c3ec:	bf44      	itt	mi
 800c3ee:	232b      	movmi	r3, #43	; 0x2b
 800c3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3fa:	d015      	beq.n	800c428 <_vfiprintf_r+0x13c>
 800c3fc:	9a07      	ldr	r2, [sp, #28]
 800c3fe:	4654      	mov	r4, sl
 800c400:	2000      	movs	r0, #0
 800c402:	f04f 0c0a 	mov.w	ip, #10
 800c406:	4621      	mov	r1, r4
 800c408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c40c:	3b30      	subs	r3, #48	; 0x30
 800c40e:	2b09      	cmp	r3, #9
 800c410:	d94e      	bls.n	800c4b0 <_vfiprintf_r+0x1c4>
 800c412:	b1b0      	cbz	r0, 800c442 <_vfiprintf_r+0x156>
 800c414:	9207      	str	r2, [sp, #28]
 800c416:	e014      	b.n	800c442 <_vfiprintf_r+0x156>
 800c418:	eba0 0308 	sub.w	r3, r0, r8
 800c41c:	fa09 f303 	lsl.w	r3, r9, r3
 800c420:	4313      	orrs	r3, r2
 800c422:	9304      	str	r3, [sp, #16]
 800c424:	46a2      	mov	sl, r4
 800c426:	e7d2      	b.n	800c3ce <_vfiprintf_r+0xe2>
 800c428:	9b03      	ldr	r3, [sp, #12]
 800c42a:	1d19      	adds	r1, r3, #4
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	9103      	str	r1, [sp, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	bfbb      	ittet	lt
 800c434:	425b      	neglt	r3, r3
 800c436:	f042 0202 	orrlt.w	r2, r2, #2
 800c43a:	9307      	strge	r3, [sp, #28]
 800c43c:	9307      	strlt	r3, [sp, #28]
 800c43e:	bfb8      	it	lt
 800c440:	9204      	strlt	r2, [sp, #16]
 800c442:	7823      	ldrb	r3, [r4, #0]
 800c444:	2b2e      	cmp	r3, #46	; 0x2e
 800c446:	d10c      	bne.n	800c462 <_vfiprintf_r+0x176>
 800c448:	7863      	ldrb	r3, [r4, #1]
 800c44a:	2b2a      	cmp	r3, #42	; 0x2a
 800c44c:	d135      	bne.n	800c4ba <_vfiprintf_r+0x1ce>
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	1d1a      	adds	r2, r3, #4
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	9203      	str	r2, [sp, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfb8      	it	lt
 800c45a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c45e:	3402      	adds	r4, #2
 800c460:	9305      	str	r3, [sp, #20]
 800c462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c548 <_vfiprintf_r+0x25c>
 800c466:	7821      	ldrb	r1, [r4, #0]
 800c468:	2203      	movs	r2, #3
 800c46a:	4650      	mov	r0, sl
 800c46c:	f7f3 ff40 	bl	80002f0 <memchr>
 800c470:	b140      	cbz	r0, 800c484 <_vfiprintf_r+0x198>
 800c472:	2340      	movs	r3, #64	; 0x40
 800c474:	eba0 000a 	sub.w	r0, r0, sl
 800c478:	fa03 f000 	lsl.w	r0, r3, r0
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	4303      	orrs	r3, r0
 800c480:	3401      	adds	r4, #1
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c488:	482c      	ldr	r0, [pc, #176]	; (800c53c <_vfiprintf_r+0x250>)
 800c48a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c48e:	2206      	movs	r2, #6
 800c490:	f7f3 ff2e 	bl	80002f0 <memchr>
 800c494:	2800      	cmp	r0, #0
 800c496:	d03f      	beq.n	800c518 <_vfiprintf_r+0x22c>
 800c498:	4b29      	ldr	r3, [pc, #164]	; (800c540 <_vfiprintf_r+0x254>)
 800c49a:	bb1b      	cbnz	r3, 800c4e4 <_vfiprintf_r+0x1f8>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	3307      	adds	r3, #7
 800c4a0:	f023 0307 	bic.w	r3, r3, #7
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	9303      	str	r3, [sp, #12]
 800c4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4aa:	443b      	add	r3, r7
 800c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ae:	e767      	b.n	800c380 <_vfiprintf_r+0x94>
 800c4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	e7a5      	b.n	800c406 <_vfiprintf_r+0x11a>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	3401      	adds	r4, #1
 800c4be:	9305      	str	r3, [sp, #20]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f04f 0c0a 	mov.w	ip, #10
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4cc:	3a30      	subs	r2, #48	; 0x30
 800c4ce:	2a09      	cmp	r2, #9
 800c4d0:	d903      	bls.n	800c4da <_vfiprintf_r+0x1ee>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0c5      	beq.n	800c462 <_vfiprintf_r+0x176>
 800c4d6:	9105      	str	r1, [sp, #20]
 800c4d8:	e7c3      	b.n	800c462 <_vfiprintf_r+0x176>
 800c4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4de:	4604      	mov	r4, r0
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e7f0      	b.n	800c4c6 <_vfiprintf_r+0x1da>
 800c4e4:	ab03      	add	r3, sp, #12
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	4b16      	ldr	r3, [pc, #88]	; (800c544 <_vfiprintf_r+0x258>)
 800c4ec:	a904      	add	r1, sp, #16
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7fd fb82 	bl	8009bf8 <_printf_float>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	1c78      	adds	r0, r7, #1
 800c4f8:	d1d6      	bne.n	800c4a8 <_vfiprintf_r+0x1bc>
 800c4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4fc:	07d9      	lsls	r1, r3, #31
 800c4fe:	d405      	bmi.n	800c50c <_vfiprintf_r+0x220>
 800c500:	89ab      	ldrh	r3, [r5, #12]
 800c502:	059a      	lsls	r2, r3, #22
 800c504:	d402      	bmi.n	800c50c <_vfiprintf_r+0x220>
 800c506:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c508:	f7ff f882 	bl	800b610 <__retarget_lock_release_recursive>
 800c50c:	89ab      	ldrh	r3, [r5, #12]
 800c50e:	065b      	lsls	r3, r3, #25
 800c510:	f53f af12 	bmi.w	800c338 <_vfiprintf_r+0x4c>
 800c514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c516:	e711      	b.n	800c33c <_vfiprintf_r+0x50>
 800c518:	ab03      	add	r3, sp, #12
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <_vfiprintf_r+0x258>)
 800c520:	a904      	add	r1, sp, #16
 800c522:	4630      	mov	r0, r6
 800c524:	f7fd fdf4 	bl	800a110 <_printf_i>
 800c528:	e7e4      	b.n	800c4f4 <_vfiprintf_r+0x208>
 800c52a:	bf00      	nop
 800c52c:	0800d088 	.word	0x0800d088
 800c530:	0800d0a8 	.word	0x0800d0a8
 800c534:	0800d068 	.word	0x0800d068
 800c538:	0800d224 	.word	0x0800d224
 800c53c:	0800d22e 	.word	0x0800d22e
 800c540:	08009bf9 	.word	0x08009bf9
 800c544:	0800c2c7 	.word	0x0800c2c7
 800c548:	0800d22a 	.word	0x0800d22a

0800c54c <_sbrk_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	; (800c568 <_sbrk_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f7f6 fc0c 	bl	8002d74 <_sbrk>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_sbrk_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_sbrk_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	240006bc 	.word	0x240006bc

0800c56c <__sread>:
 800c56c:	b510      	push	{r4, lr}
 800c56e:	460c      	mov	r4, r1
 800c570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c574:	f000 f92c 	bl	800c7d0 <_read_r>
 800c578:	2800      	cmp	r0, #0
 800c57a:	bfab      	itete	ge
 800c57c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c57e:	89a3      	ldrhlt	r3, [r4, #12]
 800c580:	181b      	addge	r3, r3, r0
 800c582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c586:	bfac      	ite	ge
 800c588:	6563      	strge	r3, [r4, #84]	; 0x54
 800c58a:	81a3      	strhlt	r3, [r4, #12]
 800c58c:	bd10      	pop	{r4, pc}

0800c58e <__swrite>:
 800c58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	461f      	mov	r7, r3
 800c594:	898b      	ldrh	r3, [r1, #12]
 800c596:	05db      	lsls	r3, r3, #23
 800c598:	4605      	mov	r5, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4616      	mov	r6, r2
 800c59e:	d505      	bpl.n	800c5ac <__swrite+0x1e>
 800c5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f000 f898 	bl	800c6dc <_lseek_r>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c2:	f000 b817 	b.w	800c5f4 <_write_r>

0800c5c6 <__sseek>:
 800c5c6:	b510      	push	{r4, lr}
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ce:	f000 f885 	bl	800c6dc <_lseek_r>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	bf15      	itete	ne
 800c5d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5e2:	81a3      	strheq	r3, [r4, #12]
 800c5e4:	bf18      	it	ne
 800c5e6:	81a3      	strhne	r3, [r4, #12]
 800c5e8:	bd10      	pop	{r4, pc}

0800c5ea <__sclose>:
 800c5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ee:	f000 b831 	b.w	800c654 <_close_r>
	...

0800c5f4 <_write_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4d07      	ldr	r5, [pc, #28]	; (800c614 <_write_r+0x20>)
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	4608      	mov	r0, r1
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	2200      	movs	r2, #0
 800c600:	602a      	str	r2, [r5, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	f7f6 fb65 	bl	8002cd2 <_write>
 800c608:	1c43      	adds	r3, r0, #1
 800c60a:	d102      	bne.n	800c612 <_write_r+0x1e>
 800c60c:	682b      	ldr	r3, [r5, #0]
 800c60e:	b103      	cbz	r3, 800c612 <_write_r+0x1e>
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	bd38      	pop	{r3, r4, r5, pc}
 800c614:	240006bc 	.word	0x240006bc

0800c618 <__assert_func>:
 800c618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c61a:	4614      	mov	r4, r2
 800c61c:	461a      	mov	r2, r3
 800c61e:	4b09      	ldr	r3, [pc, #36]	; (800c644 <__assert_func+0x2c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4605      	mov	r5, r0
 800c624:	68d8      	ldr	r0, [r3, #12]
 800c626:	b14c      	cbz	r4, 800c63c <__assert_func+0x24>
 800c628:	4b07      	ldr	r3, [pc, #28]	; (800c648 <__assert_func+0x30>)
 800c62a:	9100      	str	r1, [sp, #0]
 800c62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c630:	4906      	ldr	r1, [pc, #24]	; (800c64c <__assert_func+0x34>)
 800c632:	462b      	mov	r3, r5
 800c634:	f000 f81e 	bl	800c674 <fiprintf>
 800c638:	f000 f8e9 	bl	800c80e <abort>
 800c63c:	4b04      	ldr	r3, [pc, #16]	; (800c650 <__assert_func+0x38>)
 800c63e:	461c      	mov	r4, r3
 800c640:	e7f3      	b.n	800c62a <__assert_func+0x12>
 800c642:	bf00      	nop
 800c644:	24000038 	.word	0x24000038
 800c648:	0800d235 	.word	0x0800d235
 800c64c:	0800d242 	.word	0x0800d242
 800c650:	0800d270 	.word	0x0800d270

0800c654 <_close_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d06      	ldr	r5, [pc, #24]	; (800c670 <_close_r+0x1c>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f6 fb53 	bl	8002d0a <_close>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_close_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_close_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	240006bc 	.word	0x240006bc

0800c674 <fiprintf>:
 800c674:	b40e      	push	{r1, r2, r3}
 800c676:	b503      	push	{r0, r1, lr}
 800c678:	4601      	mov	r1, r0
 800c67a:	ab03      	add	r3, sp, #12
 800c67c:	4805      	ldr	r0, [pc, #20]	; (800c694 <fiprintf+0x20>)
 800c67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c682:	6800      	ldr	r0, [r0, #0]
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	f7ff fe31 	bl	800c2ec <_vfiprintf_r>
 800c68a:	b002      	add	sp, #8
 800c68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c690:	b003      	add	sp, #12
 800c692:	4770      	bx	lr
 800c694:	24000038 	.word	0x24000038

0800c698 <_fstat_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d07      	ldr	r5, [pc, #28]	; (800c6b8 <_fstat_r+0x20>)
 800c69c:	2300      	movs	r3, #0
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	f7f6 fb3c 	bl	8002d22 <_fstat>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d102      	bne.n	800c6b4 <_fstat_r+0x1c>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	b103      	cbz	r3, 800c6b4 <_fstat_r+0x1c>
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	bf00      	nop
 800c6b8:	240006bc 	.word	0x240006bc

0800c6bc <_isatty_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d06      	ldr	r5, [pc, #24]	; (800c6d8 <_isatty_r+0x1c>)
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	602b      	str	r3, [r5, #0]
 800c6c8:	f7f6 fb3b 	bl	8002d42 <_isatty>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_isatty_r+0x1a>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_isatty_r+0x1a>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	240006bc 	.word	0x240006bc

0800c6dc <_lseek_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d07      	ldr	r5, [pc, #28]	; (800c6fc <_lseek_r+0x20>)
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f6 fb34 	bl	8002d58 <_lseek>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_lseek_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_lseek_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	240006bc 	.word	0x240006bc

0800c700 <__ascii_mbtowc>:
 800c700:	b082      	sub	sp, #8
 800c702:	b901      	cbnz	r1, 800c706 <__ascii_mbtowc+0x6>
 800c704:	a901      	add	r1, sp, #4
 800c706:	b142      	cbz	r2, 800c71a <__ascii_mbtowc+0x1a>
 800c708:	b14b      	cbz	r3, 800c71e <__ascii_mbtowc+0x1e>
 800c70a:	7813      	ldrb	r3, [r2, #0]
 800c70c:	600b      	str	r3, [r1, #0]
 800c70e:	7812      	ldrb	r2, [r2, #0]
 800c710:	1e10      	subs	r0, r2, #0
 800c712:	bf18      	it	ne
 800c714:	2001      	movne	r0, #1
 800c716:	b002      	add	sp, #8
 800c718:	4770      	bx	lr
 800c71a:	4610      	mov	r0, r2
 800c71c:	e7fb      	b.n	800c716 <__ascii_mbtowc+0x16>
 800c71e:	f06f 0001 	mvn.w	r0, #1
 800c722:	e7f8      	b.n	800c716 <__ascii_mbtowc+0x16>

0800c724 <memmove>:
 800c724:	4288      	cmp	r0, r1
 800c726:	b510      	push	{r4, lr}
 800c728:	eb01 0402 	add.w	r4, r1, r2
 800c72c:	d902      	bls.n	800c734 <memmove+0x10>
 800c72e:	4284      	cmp	r4, r0
 800c730:	4623      	mov	r3, r4
 800c732:	d807      	bhi.n	800c744 <memmove+0x20>
 800c734:	1e43      	subs	r3, r0, #1
 800c736:	42a1      	cmp	r1, r4
 800c738:	d008      	beq.n	800c74c <memmove+0x28>
 800c73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c742:	e7f8      	b.n	800c736 <memmove+0x12>
 800c744:	4402      	add	r2, r0
 800c746:	4601      	mov	r1, r0
 800c748:	428a      	cmp	r2, r1
 800c74a:	d100      	bne.n	800c74e <memmove+0x2a>
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c756:	e7f7      	b.n	800c748 <memmove+0x24>

0800c758 <__malloc_lock>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__malloc_lock+0x8>)
 800c75a:	f7fe bf58 	b.w	800b60e <__retarget_lock_acquire_recursive>
 800c75e:	bf00      	nop
 800c760:	240006b0 	.word	0x240006b0

0800c764 <__malloc_unlock>:
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <__malloc_unlock+0x8>)
 800c766:	f7fe bf53 	b.w	800b610 <__retarget_lock_release_recursive>
 800c76a:	bf00      	nop
 800c76c:	240006b0 	.word	0x240006b0

0800c770 <_realloc_r>:
 800c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c774:	4680      	mov	r8, r0
 800c776:	4614      	mov	r4, r2
 800c778:	460e      	mov	r6, r1
 800c77a:	b921      	cbnz	r1, 800c786 <_realloc_r+0x16>
 800c77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c780:	4611      	mov	r1, r2
 800c782:	f7ff bbb9 	b.w	800bef8 <_malloc_r>
 800c786:	b92a      	cbnz	r2, 800c794 <_realloc_r+0x24>
 800c788:	f7ff fb4a 	bl	800be20 <_free_r>
 800c78c:	4625      	mov	r5, r4
 800c78e:	4628      	mov	r0, r5
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	f000 f842 	bl	800c81c <_malloc_usable_size_r>
 800c798:	4284      	cmp	r4, r0
 800c79a:	4607      	mov	r7, r0
 800c79c:	d802      	bhi.n	800c7a4 <_realloc_r+0x34>
 800c79e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7a2:	d812      	bhi.n	800c7ca <_realloc_r+0x5a>
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7ff fba6 	bl	800bef8 <_malloc_r>
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0ed      	beq.n	800c78e <_realloc_r+0x1e>
 800c7b2:	42bc      	cmp	r4, r7
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	bf28      	it	cs
 800c7ba:	463a      	movcs	r2, r7
 800c7bc:	f7fd f974 	bl	8009aa8 <memcpy>
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	f7ff fb2c 	bl	800be20 <_free_r>
 800c7c8:	e7e1      	b.n	800c78e <_realloc_r+0x1e>
 800c7ca:	4635      	mov	r5, r6
 800c7cc:	e7df      	b.n	800c78e <_realloc_r+0x1e>
	...

0800c7d0 <_read_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d07      	ldr	r5, [pc, #28]	; (800c7f0 <_read_r+0x20>)
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	4608      	mov	r0, r1
 800c7d8:	4611      	mov	r1, r2
 800c7da:	2200      	movs	r2, #0
 800c7dc:	602a      	str	r2, [r5, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	f7f6 fa5a 	bl	8002c98 <_read>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_read_r+0x1e>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_read_r+0x1e>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	240006bc 	.word	0x240006bc

0800c7f4 <__ascii_wctomb>:
 800c7f4:	b149      	cbz	r1, 800c80a <__ascii_wctomb+0x16>
 800c7f6:	2aff      	cmp	r2, #255	; 0xff
 800c7f8:	bf85      	ittet	hi
 800c7fa:	238a      	movhi	r3, #138	; 0x8a
 800c7fc:	6003      	strhi	r3, [r0, #0]
 800c7fe:	700a      	strbls	r2, [r1, #0]
 800c800:	f04f 30ff 	movhi.w	r0, #4294967295
 800c804:	bf98      	it	ls
 800c806:	2001      	movls	r0, #1
 800c808:	4770      	bx	lr
 800c80a:	4608      	mov	r0, r1
 800c80c:	4770      	bx	lr

0800c80e <abort>:
 800c80e:	b508      	push	{r3, lr}
 800c810:	2006      	movs	r0, #6
 800c812:	f000 f833 	bl	800c87c <raise>
 800c816:	2001      	movs	r0, #1
 800c818:	f7f6 fa34 	bl	8002c84 <_exit>

0800c81c <_malloc_usable_size_r>:
 800c81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c820:	1f18      	subs	r0, r3, #4
 800c822:	2b00      	cmp	r3, #0
 800c824:	bfbc      	itt	lt
 800c826:	580b      	ldrlt	r3, [r1, r0]
 800c828:	18c0      	addlt	r0, r0, r3
 800c82a:	4770      	bx	lr

0800c82c <_raise_r>:
 800c82c:	291f      	cmp	r1, #31
 800c82e:	b538      	push	{r3, r4, r5, lr}
 800c830:	4604      	mov	r4, r0
 800c832:	460d      	mov	r5, r1
 800c834:	d904      	bls.n	800c840 <_raise_r+0x14>
 800c836:	2316      	movs	r3, #22
 800c838:	6003      	str	r3, [r0, #0]
 800c83a:	f04f 30ff 	mov.w	r0, #4294967295
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c842:	b112      	cbz	r2, 800c84a <_raise_r+0x1e>
 800c844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c848:	b94b      	cbnz	r3, 800c85e <_raise_r+0x32>
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 f830 	bl	800c8b0 <_getpid_r>
 800c850:	462a      	mov	r2, r5
 800c852:	4601      	mov	r1, r0
 800c854:	4620      	mov	r0, r4
 800c856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c85a:	f000 b817 	b.w	800c88c <_kill_r>
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d00a      	beq.n	800c878 <_raise_r+0x4c>
 800c862:	1c59      	adds	r1, r3, #1
 800c864:	d103      	bne.n	800c86e <_raise_r+0x42>
 800c866:	2316      	movs	r3, #22
 800c868:	6003      	str	r3, [r0, #0]
 800c86a:	2001      	movs	r0, #1
 800c86c:	e7e7      	b.n	800c83e <_raise_r+0x12>
 800c86e:	2400      	movs	r4, #0
 800c870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c874:	4628      	mov	r0, r5
 800c876:	4798      	blx	r3
 800c878:	2000      	movs	r0, #0
 800c87a:	e7e0      	b.n	800c83e <_raise_r+0x12>

0800c87c <raise>:
 800c87c:	4b02      	ldr	r3, [pc, #8]	; (800c888 <raise+0xc>)
 800c87e:	4601      	mov	r1, r0
 800c880:	6818      	ldr	r0, [r3, #0]
 800c882:	f7ff bfd3 	b.w	800c82c <_raise_r>
 800c886:	bf00      	nop
 800c888:	24000038 	.word	0x24000038

0800c88c <_kill_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_kill_r+0x20>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	4611      	mov	r1, r2
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f7f6 f9e3 	bl	8002c64 <_kill>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d102      	bne.n	800c8a8 <_kill_r+0x1c>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b103      	cbz	r3, 800c8a8 <_kill_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	bf00      	nop
 800c8ac:	240006bc 	.word	0x240006bc

0800c8b0 <_getpid_r>:
 800c8b0:	f7f6 b9d0 	b.w	8002c54 <_getpid>

0800c8b4 <_init>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr

0800c8c0 <_fini>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr
